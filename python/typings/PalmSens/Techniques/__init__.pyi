import abc
import typing

from MicroLibrary import MicroStopwatch
from PalmSens import (
    CurrentRange,
    CurrentRanges,
    CustomMeasurement,
    EncodedMethodV1,
    ExtraValueMask,
    ILevelPeakSignal,
    INPointsMethod,
    MeasType,
    Method,
    MethodScript,
    MuxMethod,
    PolyEmStatMethodEx,
    PotentialMethod,
    PotentionstatChannels,
    Ranging,
    RangingPotential,
    ScanMethod,
    SE2vsXChannels,
    SineCurve,
    TaskBarrier,
    TimeMethod,
    enumBlankType,
    enumDetermination,
    enumReaction,
    enumSignal,
    enumStandardsValues,
    enumUsePeakValue,
)
from PalmSens.Comm import (
    ActiveMeasurement,
    Buffer,
    ClientConnection,
    ClientConnectionMS,
    CommMeasurement,
    CommMeasurementMS,
    MeasureVersusOCP,
    enumDeviceType,
)
from PalmSens.Data import DataArrayTime, DataArrayType, DataSetCommon
from PalmSens.Devices import DeviceCapabilities, EISSettingsPS3, MethodScriptDeviceCapabilities
from PalmSens.Plottables import Curve, CurveDirection, EISData
from PalmSens.Techniques.Impedance import (
    DualEISModes,
    EnumFrequencyMode,
    enumFrequencyType,
    enumScanType,
)
from PalmSens.Units import Unit
from System import (
    Array_1,
    AsyncCallback,
    Attribute,
    DateTime,
    Exception,
    IAsyncResult,
    MulticastDelegate,
    TimeSpan,
    ValueTuple_2,
    ValueTuple_3,
)
from System.Collections import BitArray, IDictionary
from System.Collections.Generic import (
    Dictionary_2,
    IEnumerable_1,
    IList_1,
    IReadOnlyDictionary_2,
    List_1,
)
from System.ComponentModel import INotifyPropertyChanged
from System.IO import TextWriter
from System.Reflection import MethodBase, MethodInfo
from System.Threading.Tasks import Task, Task_1

class ACVoltammetry(PotentialMethod):
    def __init__(self) -> None: ...
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    EPretreat: Array_1[float]
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Technique: int
    TechniqueNumber: int
    tPretreat: Array_1[float]
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AnalyteName(self) -> Array_1[str]: ...
    @AnalyteName.setter
    def AnalyteName(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def AnalytePeakAutodetect(self) -> Array_1[bool]: ...
    @AnalytePeakAutodetect.setter
    def AnalytePeakAutodetect(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def BlankType(self) -> enumBlankType: ...
    @BlankType.setter
    def BlankType(self, value: enumBlankType) -> enumBlankType: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def CellVolume(self) -> float: ...
    @CellVolume.setter
    def CellVolume(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Determination(self) -> enumDetermination: ...
    @Determination.setter
    def Determination(self, value: enumDetermination) -> enumDetermination: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EPeakLeft(self) -> Array_1[float]: ...
    @EPeakLeft.setter
    def EPeakLeft(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeakRight(self) -> Array_1[float]: ...
    @EPeakRight.setter
    def EPeakRight(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeaks(self) -> Array_1[float]: ...
    @EPeaks.setter
    def EPeaks(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def factorACI(self) -> float: ...
    @property
    def Frequency(self) -> float: ...
    @Frequency.setter
    def Frequency(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MeasureDCcurrent(self) -> bool: ...
    @MeasureDCcurrent.setter
    def MeasureDCcurrent(self, value: bool) -> bool: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakValue(self) -> enumUsePeakValue: ...
    @PeakValue.setter
    def PeakValue(self, value: enumUsePeakValue) -> enumUsePeakValue: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SampleVolume(self) -> float: ...
    @SampleVolume.setter
    def SampleVolume(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def Scanrate(self) -> float: ...
    @Scanrate.setter
    def Scanrate(self, value: float) -> float: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def SineWaveAmplitude(self) -> float: ...
    @SineWaveAmplitude.setter
    def SineWaveAmplitude(self, value: float) -> float: ...
    @property
    def SolutionNr(self) -> Array_1[int]: ...
    @SolutionNr.setter
    def SolutionNr(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StandardConcentration(self) -> Array_1[float]: ...
    @property
    def StandardsValues(self) -> enumStandardsValues: ...
    @StandardsValues.setter
    def StandardsValues(self, value: enumStandardsValues) -> enumStandardsValues: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepPotential(self) -> float: ...
    @StepPotential.setter
    def StepPotential(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsDetermination(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPBeginPotential(self) -> float: ...
    @VersusOCPBeginPotential.setter
    def VersusOCPBeginPotential(self, value: float) -> float: ...
    @property
    def VersusOCPEndPotential(self) -> float: ...
    @VersusOCPEndPotential.setter
    def VersusOCPEndPotential(self, value: float) -> float: ...
    @property
    def VolumeConcentration(self) -> Array_1[float]: ...
    @VolumeConcentration.setter
    def VolumeConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def GetIntervalTime(self, capab: DeviceCapabilities) -> float: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def GetRealNPoints(self, capabilities: DeviceCapabilities) -> int: ...
    def ReceiveMeasurement(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SupportedRangingType(self, capabilities: DeviceCapabilities) -> Method.RangingTypes: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class AmperometricDetection(TimeMethod, IChargeLimits):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    TechniqueNumber: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ChargeLimitMax(self) -> float: ...
    @ChargeLimitMax.setter
    def ChargeLimitMax(self, value: float) -> float: ...
    @property
    def ChargeLimitMin(self) -> float: ...
    @ChargeLimitMin.setter
    def ChargeLimitMin(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @nPoints.setter
    def nPoints(self, value: int) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseChargeLimitMax(self) -> bool: ...
    @UseChargeLimitMax.setter
    def UseChargeLimitMax(self, value: bool) -> bool: ...
    @property
    def UseChargeLimitMin(self) -> bool: ...
    @UseChargeLimitMin.setter
    def UseChargeLimitMin(self, value: bool) -> bool: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToHex1TechniqueSpecific(self, m: EncodedMethodV1) -> None: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class Chronocoulometry(MultistepAmperometry):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    Delta: float
    MethodID: str
    MethodIsGalvanostatic: bool
    Mode: Multistep.EnumMode
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ChargeLimitMax(self) -> float: ...
    @ChargeLimitMax.setter
    def ChargeLimitMax(self, value: float) -> float: ...
    @property
    def ChargeLimitMin(self) -> float: ...
    @ChargeLimitMin.setter
    def ChargeLimitMin(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EFirstStep(self) -> float: ...
    @EFirstStep.setter
    def EFirstStep(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ESecondStep(self) -> float: ...
    @ESecondStep.setter
    def ESecondStep(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def Levels(self) -> Levels: ...
    @Levels.setter
    def Levels(self, value: Levels) -> Levels: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nCycles(self) -> int: ...
    @nCycles.setter
    def nCycles(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def nSteps(self) -> int: ...
    @nSteps.setter
    def nSteps(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TFirstStep(self) -> float: ...
    @TFirstStep.setter
    def TFirstStep(self, value: float) -> float: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def TSecondStep(self) -> float: ...
    @TSecondStep.setter
    def TSecondStep(self, value: float) -> float: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseChargeLimitMax(self) -> bool: ...
    @UseChargeLimitMax.setter
    def UseChargeLimitMax(self, value: bool) -> bool: ...
    @property
    def UseChargeLimitMin(self) -> bool: ...
    @UseChargeLimitMin.setter
    def UseChargeLimitMin(self, value: bool) -> bool: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseLimits(self) -> bool: ...
    @UseLimits.setter
    def UseLimits(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseSelectiveRecord(self) -> bool: ...
    @UseSelectiveRecord.setter
    def UseSelectiveRecord(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def GetMethodID(self) -> str: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class ChronoPotStripping(ScanMethod, IPotentiometric):
    def __init__(self) -> None: ...
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    EPretreat: Array_1[float]
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Technique: int
    TechniqueNumber: int
    tPretreat: Array_1[float]
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AnalyteName(self) -> Array_1[str]: ...
    @AnalyteName.setter
    def AnalyteName(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def AnalytePeakAutodetect(self) -> Array_1[bool]: ...
    @AnalytePeakAutodetect.setter
    def AnalytePeakAutodetect(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def AppliedCurrentRange(self) -> CurrentRange: ...
    @AppliedCurrentRange.setter
    def AppliedCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def BlankType(self) -> enumBlankType: ...
    @BlankType.setter
    def BlankType(self, value: enumBlankType) -> enumBlankType: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def CellVolume(self) -> float: ...
    @CellVolume.setter
    def CellVolume(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Determination(self) -> enumDetermination: ...
    @Determination.setter
    def Determination(self, value: enumDetermination) -> enumDetermination: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EPeakLeft(self) -> Array_1[float]: ...
    @EPeakLeft.setter
    def EPeakLeft(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeakRight(self) -> Array_1[float]: ...
    @EPeakRight.setter
    def EPeakRight(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeaks(self) -> Array_1[float]: ...
    @EPeaks.setter
    def EPeaks(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def GEquilibrationTime(self) -> float: ...
    @GEquilibrationTime.setter
    def GEquilibrationTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def Istrip(self) -> float: ...
    @Istrip.setter
    def Istrip(self, value: float) -> float: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MeasurementTime(self) -> float: ...
    @MeasurementTime.setter
    def MeasurementTime(self, value: float) -> float: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OriginalAppliedCurrentRange(self) -> typing.Optional[CurrentRanges]: ...
    @OriginalAppliedCurrentRange.setter
    def OriginalAppliedCurrentRange(
        self, value: typing.Optional[CurrentRanges]
    ) -> typing.Optional[CurrentRanges]: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakValue(self) -> enumUsePeakValue: ...
    @PeakValue.setter
    def PeakValue(self, value: enumUsePeakValue) -> enumUsePeakValue: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SampleVolume(self) -> float: ...
    @SampleVolume.setter
    def SampleVolume(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def SolutionNr(self) -> Array_1[int]: ...
    @SolutionNr.setter
    def SolutionNr(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StandardConcentration(self) -> Array_1[float]: ...
    @property
    def StandardsValues(self) -> enumStandardsValues: ...
    @StandardsValues.setter
    def StandardsValues(self, value: enumStandardsValues) -> enumStandardsValues: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsDetermination(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VolumeConcentration(self) -> Array_1[float]: ...
    @VolumeConcentration.setter
    def VolumeConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def GetMaximumEstimatedMeasurementDuration(
        self, capab: DeviceCapabilities, withLevelStageOverhead: bool = ...
    ) -> float: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetPointsPerSecond(self, deviceCapabilities: DeviceCapabilities = ...) -> float: ...
    def ReceiveMeasurement(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SetAppliedCurrentRangeSilent(self, range: CurrentRange) -> None: ...
    def SetCompatibleAppliedRange(self, capabilities: DeviceCapabilities) -> None: ...
    def SetCompatibleAppliedRangeSilent(self, capabilities: DeviceCapabilities) -> None: ...
    def SupportsDeviceStorage(self, deviceCapabilities: DeviceCapabilities) -> bool: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class ChronoPotStrippingMeasurement(CommMeasurement):
    Aborted: bool
    Channel: int
    VsOCP: MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    def Abort(self) -> None: ...
    def AbortAsync(self) -> Task: ...

class CyclicVoltammetry(PotentialMethod):
    def __init__(self) -> None: ...
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    EPretreat: Array_1[float]
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Technique: int
    TechniqueNumber: int
    tPretreat: Array_1[float]
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AnalyteName(self) -> Array_1[str]: ...
    @AnalyteName.setter
    def AnalyteName(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def AnalytePeakAutodetect(self) -> Array_1[bool]: ...
    @AnalytePeakAutodetect.setter
    def AnalytePeakAutodetect(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def BlankType(self) -> enumBlankType: ...
    @BlankType.setter
    def BlankType(self, value: enumBlankType) -> enumBlankType: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def CellVolume(self) -> float: ...
    @CellVolume.setter
    def CellVolume(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Determination(self) -> enumDetermination: ...
    @Determination.setter
    def Determination(self, value: enumDetermination) -> enumDetermination: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EPeakLeft(self) -> Array_1[float]: ...
    @EPeakLeft.setter
    def EPeakLeft(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeakRight(self) -> Array_1[float]: ...
    @EPeakRight.setter
    def EPeakRight(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeaks(self) -> Array_1[float]: ...
    @EPeaks.setter
    def EPeaks(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nEqScans(self) -> int: ...
    @nEqScans.setter
    def nEqScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakValue(self) -> enumUsePeakValue: ...
    @PeakValue.setter
    def PeakValue(self, value: enumUsePeakValue) -> enumUsePeakValue: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SampleVolume(self) -> float: ...
    @SampleVolume.setter
    def SampleVolume(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def Scanrate(self) -> float: ...
    @Scanrate.setter
    def Scanrate(self, value: float) -> float: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def SolutionNr(self) -> Array_1[int]: ...
    @SolutionNr.setter
    def SolutionNr(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StandardConcentration(self) -> Array_1[float]: ...
    @property
    def StandardsValues(self) -> enumStandardsValues: ...
    @StandardsValues.setter
    def StandardsValues(self, value: enumStandardsValues) -> enumStandardsValues: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepPotential(self) -> float: ...
    @StepPotential.setter
    def StepPotential(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsDetermination(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPBeginPotential(self) -> float: ...
    @VersusOCPBeginPotential.setter
    def VersusOCPBeginPotential(self, value: float) -> float: ...
    @property
    def VersusOCPEndPotential(self) -> float: ...
    @VersusOCPEndPotential.setter
    def VersusOCPEndPotential(self, value: float) -> float: ...
    @property
    def VersusOCPVtx1Potential(self) -> float: ...
    @VersusOCPVtx1Potential.setter
    def VersusOCPVtx1Potential(self, value: float) -> float: ...
    @property
    def VersusOCPVtx2Potential(self) -> float: ...
    @VersusOCPVtx2Potential.setter
    def VersusOCPVtx2Potential(self, value: float) -> float: ...
    @property
    def VolumeConcentration(self) -> Array_1[float]: ...
    @VolumeConcentration.setter
    def VolumeConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Vtx1Potential(self) -> float: ...
    @Vtx1Potential.setter
    def Vtx1Potential(self, value: float) -> float: ...
    @property
    def Vtx2Potential(self) -> float: ...
    @Vtx2Potential.setter
    def Vtx2Potential(self, value: float) -> float: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def GetIntervalTime(self, capab: DeviceCapabilities) -> float: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def GetRealNPoints(self, capabilities: DeviceCapabilities) -> int: ...
    def ReceiveMeasurement(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class DifferentialPulse(Pulse):
    def __init__(self) -> None: ...
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    EPretreat: Array_1[float]
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Technique: int
    TechniqueNumber: int
    tPretreat: Array_1[float]
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AnalyteName(self) -> Array_1[str]: ...
    @AnalyteName.setter
    def AnalyteName(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def AnalytePeakAutodetect(self) -> Array_1[bool]: ...
    @AnalytePeakAutodetect.setter
    def AnalytePeakAutodetect(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def BlankType(self) -> enumBlankType: ...
    @BlankType.setter
    def BlankType(self, value: enumBlankType) -> enumBlankType: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def CellVolume(self) -> float: ...
    @CellVolume.setter
    def CellVolume(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Determination(self) -> enumDetermination: ...
    @Determination.setter
    def Determination(self, value: enumDetermination) -> enumDetermination: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EPeakLeft(self) -> Array_1[float]: ...
    @EPeakLeft.setter
    def EPeakLeft(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeakRight(self) -> Array_1[float]: ...
    @EPeakRight.setter
    def EPeakRight(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeaks(self) -> Array_1[float]: ...
    @EPeaks.setter
    def EPeaks(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakValue(self) -> enumUsePeakValue: ...
    @PeakValue.setter
    def PeakValue(self, value: enumUsePeakValue) -> enumUsePeakValue: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def PulsePotential(self) -> float: ...
    @PulsePotential.setter
    def PulsePotential(self, value: float) -> float: ...
    @property
    def PulseTime(self) -> float: ...
    @PulseTime.setter
    def PulseTime(self, value: float) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SampleVolume(self) -> float: ...
    @SampleVolume.setter
    def SampleVolume(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def Scanrate(self) -> float: ...
    @Scanrate.setter
    def Scanrate(self, value: float) -> float: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def SolutionNr(self) -> Array_1[int]: ...
    @SolutionNr.setter
    def SolutionNr(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StandardConcentration(self) -> Array_1[float]: ...
    @property
    def StandardsValues(self) -> enumStandardsValues: ...
    @StandardsValues.setter
    def StandardsValues(self, value: enumStandardsValues) -> enumStandardsValues: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepPotential(self) -> float: ...
    @StepPotential.setter
    def StepPotential(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsDetermination(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPBeginPotential(self) -> float: ...
    @VersusOCPBeginPotential.setter
    def VersusOCPBeginPotential(self, value: float) -> float: ...
    @property
    def VersusOCPEndPotential(self) -> float: ...
    @VersusOCPEndPotential.setter
    def VersusOCPEndPotential(self, value: float) -> float: ...
    @property
    def VolumeConcentration(self) -> Array_1[float]: ...
    @VolumeConcentration.setter
    def VolumeConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def GetIntervalTime(self, capab: DeviceCapabilities) -> float: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class EILevel(INotifyPropertyChanged):
    def __init__(self, potentiometric: IPotentiometric = ...) -> None: ...
    @property
    def Duration(self) -> float: ...
    @Duration.setter
    def Duration(self, value: float) -> float: ...
    @property
    def Level(self) -> float: ...
    @Level.setter
    def Level(self, value: float) -> float: ...
    @property
    def MaxLimit(self) -> float: ...
    @MaxLimit.setter
    def MaxLimit(self, value: float) -> float: ...
    @property
    def MinLimit(self) -> float: ...
    @MinLimit.setter
    def MinLimit(self, value: float) -> float: ...
    @property
    def Record(self) -> bool: ...
    @Record.setter
    def Record(self, value: bool) -> bool: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseMaxLimit(self) -> bool: ...
    @UseMaxLimit.setter
    def UseMaxLimit(self, value: bool) -> bool: ...
    @property
    def UseMinLimit(self) -> bool: ...
    @UseMinLimit.setter
    def UseMinLimit(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...

class ELevel(EILevel):
    def __init__(self) -> None: ...
    @property
    def Duration(self) -> float: ...
    @Duration.setter
    def Duration(self, value: float) -> float: ...
    @property
    def Level(self) -> float: ...
    @Level.setter
    def Level(self, value: float) -> float: ...
    @property
    def MaxLimit(self) -> float: ...
    @MaxLimit.setter
    def MaxLimit(self, value: float) -> float: ...
    @property
    def MinLimit(self) -> float: ...
    @MinLimit.setter
    def MinLimit(self, value: float) -> float: ...
    @property
    def Record(self) -> bool: ...
    @Record.setter
    def Record(self, value: bool) -> bool: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseMaxLimit(self) -> bool: ...
    @UseMaxLimit.setter
    def UseMaxLimit(self, value: bool) -> bool: ...
    @property
    def UseMinLimit(self) -> bool: ...
    @UseMinLimit.setter
    def UseMinLimit(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...

class ELevels(Levels):
    @property
    def Capacity(self) -> int: ...
    @Capacity.setter
    def Capacity(self, value: int) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> EILevel: ...
    @Item.setter
    def Item(self, value: EILevel) -> EILevel: ...

class enumTechniqueParameter(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Sensor: enumTechniqueParameter  # 0
    Sample: enumTechniqueParameter  # 1
    ConditioningPotential: enumTechniqueParameter  # 2
    ConditioningTime: enumTechniqueParameter  # 3
    DepositionPotential: enumTechniqueParameter  # 4
    DepositionTime: enumTechniqueParameter  # 5
    EquilibrationTime: enumTechniqueParameter  # 6
    CellOnAfterMeasurement: enumTechniqueParameter  # 7
    StandbyPotential: enumTechniqueParameter  # 8
    StandbyTime: enumTechniqueParameter  # 9
    BeginPotential: enumTechniqueParameter  # 10
    EndPotential: enumTechniqueParameter  # 11
    StepPotential: enumTechniqueParameter  # 12
    DcPotential: enumTechniqueParameter  # 13
    PulsePotentialAD: enumTechniqueParameter  # 14
    PulsePotential: enumTechniqueParameter  # 15
    PulseTime: enumTechniqueParameter  # 16
    PulseTimeF: enumTechniqueParameter  # 17
    Scanrate: enumTechniqueParameter  # 18
    PulseAmplitude: enumTechniqueParameter  # 19
    Frequency: enumTechniqueParameter  # 20
    SineWaveAmplitude: enumTechniqueParameter  # 21
    Vtx1Potential: enumTechniqueParameter  # 22
    Vtx2Potential: enumTechniqueParameter  # 23
    nScans: enumTechniqueParameter  # 24
    nEqScans: enumTechniqueParameter  # 25
    Istrip: enumTechniqueParameter  # 26
    MeasurementTime: enumTechniqueParameter  # 27
    Potential: enumTechniqueParameter  # 28
    EqPotentialFA: enumTechniqueParameter  # 29
    IntervalTime: enumTechniqueParameter  # 30
    IntervalTimeF: enumTechniqueParameter  # 31
    RunTime: enumTechniqueParameter  # 32
    tMode: enumTechniqueParameter  # 33
    Current: enumTechniqueParameter  # 34
    E1: enumTechniqueParameter  # 35
    E2: enumTechniqueParameter  # 36
    E3: enumTechniqueParameter  # 37
    t1: enumTechniqueParameter  # 38
    t2: enumTechniqueParameter  # 39
    t3: enumTechniqueParameter  # 40
    nCycles: enumTechniqueParameter  # 41
    nSteps: enumTechniqueParameter  # 42
    E_levels: enumTechniqueParameter  # 43
    i_levels: enumTechniqueParameter  # 44
    t_levels: enumTechniqueParameter  # 45
    OCP: enumTechniqueParameter  # 46
    RecordAux: enumTechniqueParameter  # 47
    RecordBiPot: enumTechniqueParameter  # 48
    MeasureIForwardReverse: enumTechniqueParameter  # 49
    VersusOCP: enumTechniqueParameter  # 50
    OCPStabilityCriterion: enumTechniqueParameter  # 51
    OCPMaxOCPTime: enumTechniqueParameter  # 52
    ScanType: enumTechniqueParameter  # 53
    FreqType: enumTechniqueParameter  # 54
    Eac: enumTechniqueParameter  # 55
    SamplingTime: enumTechniqueParameter  # 56
    MinFrequency: enumTechniqueParameter  # 57
    MaxFrequency: enumTechniqueParameter  # 58
    FixedFrequency: enumTechniqueParameter  # 59
    nFrequencies: enumTechniqueParameter  # 60
    RecordPt1000: enumTechniqueParameter  # 61
    PretreatEachFreqMeas: enumTechniqueParameter  # 62
    PretreatEachScan: enumTechniqueParameter  # 63
    MaxEqTime: enumTechniqueParameter  # 64
    LimitMinValue: enumTechniqueParameter  # 65
    LimitMaxValue: enumTechniqueParameter  # 66
    UseLimits: enumTechniqueParameter  # 67
    PolyStatMode: enumTechniqueParameter  # 68
    BipotPotential: enumTechniqueParameter  # 69
    nAvgScans: enumTechniqueParameter  # 70
    None_: enumTechniqueParameter  # 71
    Iac: enumTechniqueParameter  # 72
    TriggerDelayPeriod: enumTechniqueParameter  # 73
    iStep: enumTechniqueParameter  # 74

class FastAmperometry(TimeMethod, IFastMeasurement):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    TechniqueNumber: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EqPotentialFA(self) -> float: ...
    @EqPotentialFA.setter
    def EqPotentialFA(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IntervalTimeF(self) -> float: ...
    @IntervalTimeF.setter
    def IntervalTimeF(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPEqPotential(self) -> float: ...
    @VersusOCPEqPotential.setter
    def VersusOCPEqPotential(self, value: float) -> float: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def IsFastMeasurement(self, capab: DeviceCapabilities) -> bool: ...
    def ReceiveMeasurement(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SupportsDeviceStorage(self, deviceCapabilities: DeviceCapabilities) -> bool: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class FastCyclicVoltammetry(CyclicVoltammetry):
    def __init__(self) -> None: ...
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    EPretreat: Array_1[float]
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    SmoothLevel: int
    Technique: int
    tPretreat: Array_1[float]
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AnalyteName(self) -> Array_1[str]: ...
    @AnalyteName.setter
    def AnalyteName(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def AnalytePeakAutodetect(self) -> Array_1[bool]: ...
    @AnalytePeakAutodetect.setter
    def AnalytePeakAutodetect(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def BlankType(self) -> enumBlankType: ...
    @BlankType.setter
    def BlankType(self, value: enumBlankType) -> enumBlankType: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def CellVolume(self) -> float: ...
    @CellVolume.setter
    def CellVolume(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Determination(self) -> enumDetermination: ...
    @Determination.setter
    def Determination(self, value: enumDetermination) -> enumDetermination: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EPeakLeft(self) -> Array_1[float]: ...
    @EPeakLeft.setter
    def EPeakLeft(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeakRight(self) -> Array_1[float]: ...
    @EPeakRight.setter
    def EPeakRight(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeaks(self) -> Array_1[float]: ...
    @EPeaks.setter
    def EPeaks(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nEqScans(self) -> int: ...
    @nEqScans.setter
    def nEqScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakValue(self) -> enumUsePeakValue: ...
    @PeakValue.setter
    def PeakValue(self, value: enumUsePeakValue) -> enumUsePeakValue: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SampleVolume(self) -> float: ...
    @SampleVolume.setter
    def SampleVolume(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def Scanrate(self) -> float: ...
    @Scanrate.setter
    def Scanrate(self, value: float) -> float: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def SolutionNr(self) -> Array_1[int]: ...
    @SolutionNr.setter
    def SolutionNr(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StandardConcentration(self) -> Array_1[float]: ...
    @property
    def StandardsValues(self) -> enumStandardsValues: ...
    @StandardsValues.setter
    def StandardsValues(self, value: enumStandardsValues) -> enumStandardsValues: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepPotential(self) -> float: ...
    @StepPotential.setter
    def StepPotential(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsDetermination(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPBeginPotential(self) -> float: ...
    @VersusOCPBeginPotential.setter
    def VersusOCPBeginPotential(self, value: float) -> float: ...
    @property
    def VersusOCPEndPotential(self) -> float: ...
    @VersusOCPEndPotential.setter
    def VersusOCPEndPotential(self, value: float) -> float: ...
    @property
    def VersusOCPVtx1Potential(self) -> float: ...
    @VersusOCPVtx1Potential.setter
    def VersusOCPVtx1Potential(self, value: float) -> float: ...
    @property
    def VersusOCPVtx2Potential(self) -> float: ...
    @VersusOCPVtx2Potential.setter
    def VersusOCPVtx2Potential(self, value: float) -> float: ...
    @property
    def VolumeConcentration(self) -> Array_1[float]: ...
    @VolumeConcentration.setter
    def VolumeConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Vtx1Potential(self) -> float: ...
    @Vtx1Potential.setter
    def Vtx1Potential(self, value: float) -> float: ...
    @property
    def Vtx2Potential(self) -> float: ...
    @Vtx2Potential.setter
    def Vtx2Potential(self, value: float) -> float: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def SupportsDeviceStorage(self, deviceCapabilities: DeviceCapabilities) -> bool: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class FastMeasurement(CommMeasurement):
    Aborted: bool
    Channel: int
    VsOCP: MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...

class FastPotentiometry(FastAmperometry):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EqPotentialFA(self) -> float: ...
    @EqPotentialFA.setter
    def EqPotentialFA(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IntervalTimeF(self) -> float: ...
    @IntervalTimeF.setter
    def IntervalTimeF(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPEqPotential(self) -> float: ...
    @VersusOCPEqPotential.setter
    def VersusOCPEqPotential(self, value: float) -> float: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def IsFastMeasurement(self, capab: DeviceCapabilities) -> bool: ...
    def SupportsDeviceStorage(self, deviceCapabilities: DeviceCapabilities) -> bool: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class IChargeLimits(typing.Protocol):
    @property
    def ChargeLimitMax(self) -> float: ...
    @ChargeLimitMax.setter
    def ChargeLimitMax(self, value: float) -> float: ...
    @property
    def ChargeLimitMin(self) -> float: ...
    @ChargeLimitMin.setter
    def ChargeLimitMin(self, value: float) -> float: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def UseChargeLimitMax(self) -> bool: ...
    @UseChargeLimitMax.setter
    def UseChargeLimitMax(self, value: bool) -> bool: ...
    @property
    def UseChargeLimitMin(self) -> bool: ...
    @UseChargeLimitMin.setter
    def UseChargeLimitMin(self, value: bool) -> bool: ...

class ICurrentScan(IPotentiometric, typing.Protocol):
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def EndCurrent(self) -> float: ...
    @EndCurrent.setter
    def EndCurrent(self, value: float) -> float: ...
    @property
    def StepCurrent(self) -> float: ...
    @StepCurrent.setter
    def StepCurrent(self, value: float) -> float: ...

class IFastMeasurement(typing.Protocol):
    @abc.abstractmethod
    def IsFastMeasurement(self, capab: DeviceCapabilities) -> bool: ...

class IImpedimetricMeasurement(typing.Protocol):
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def SupportsScope(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...

class ILevelStepOverhead(typing.Protocol):
    @abc.abstractmethod
    def GetMinimumEstimatedDurationWithOverhead(
        self, capabilities: DeviceCapabilities
    ) -> float: ...

class IMixedModeMeasurement(typing.Protocol):
    pass

class IMixedModeStage(typing.Protocol):
    @property
    def AdjustNPoints(self) -> None: ...
    @AdjustNPoints.setter
    def AdjustNPoints(self, value: bool) -> None: ...
    @property
    def Index(self) -> int: ...
    @Index.setter
    def Index(self, value: int) -> int: ...
    @property
    def IntervalTime(self) -> None: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> None: ...
    @property
    def StageType(self) -> MixedMode.EnumMixedModeStageType: ...
    @property
    def VsEiPropertiesList(self) -> Dictionary_2[str, bool]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def AdjustControlledStartValue(self, referenceValue: float) -> None: ...
    @abc.abstractmethod
    def SetRanging(self, ranging: Ranging) -> None: ...
    @abc.abstractmethod
    def SetRangingPotential(self, rangingPotential: RangingPotential) -> None: ...

class IMixedModeStageMethod(typing.Protocol):
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    @abc.abstractmethod
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...

class ImpedimetricGstatIterationMethod(ImpedimetricIterationMethodBase, IPotentiometric):
    AcCoupled: bool
    AnalyteName: str
    Celltype: int
    Channel: int
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    FilterAc: int
    FilterADC: int
    FilterCF: int
    FilterDAC: int
    Frequency: float
    HSTAB: bool
    HSTABByte: int
    IsLastIteration: bool
    MaxSamplingRate: int
    MDAC: int
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Nadc: int
    NadcStart: int
    Neqstart: int
    nPointsac: int
    NumEquilibrationSines: int
    NumMeasurementSines: int
    numsinestable: int
    Overrides: ImpedimetricIterationMethodBase.EnumOverrides
    PeakOverlap: float
    PGAgain: int
    PGAoffset: int
    PolyEmStat: PolyEmStatMethodEx
    realtIntac: int
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    tIntac: float
    ToHex1String: str
    UseExternalAD: bool
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AppliedCurrentRange(self) -> CurrentRange: ...
    @AppliedCurrentRange.setter
    def AppliedCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EndCurrent(self) -> float: ...
    @EndCurrent.setter
    def EndCurrent(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def GEquilibrationTime(self) -> float: ...
    @GEquilibrationTime.setter
    def GEquilibrationTime(self, value: float) -> float: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @nPoints.setter
    def nPoints(self, value: int) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OriginalAppliedCurrentRange(self) -> typing.Optional[CurrentRanges]: ...
    @OriginalAppliedCurrentRange.setter
    def OriginalAppliedCurrentRange(
        self, value: typing.Optional[CurrentRanges]
    ) -> typing.Optional[CurrentRanges]: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def GetMethodID(self) -> str: ...
    def ReceiveMeasurement(
        self,
        conn: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementAsync(
        self,
        conn: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SetAppliedCurrentRangeSilent(self, range: CurrentRange) -> None: ...
    def SetCompatibleAppliedRange(self, capabilities: DeviceCapabilities) -> None: ...
    def SetCompatibleAppliedRangeSilent(self, capabilities: DeviceCapabilities) -> None: ...
    def ToHexPS3(self, m: EncodedMethodV1) -> None: ...
    def ToHexPS4(self, m: EncodedMethodV1) -> None: ...
    def ToShortString(self) -> str: ...

class ImpedimetricGstatMeasurement(ImpedimetricMeasurementBase):
    def __init__(
        self, conn: ClientConnection, method: Method, muxChannel: int, measType: MeasType
    ) -> None: ...
    Channel: int
    ETA: DateTime
    LastMuxChannel: int
    MeasTimeMilliseconds: int
    MeasurementStarted: DateTime
    MeasurementStarted2: DateTime
    stopwatch: MicroStopwatch
    VsOCP: MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def CurrentState(self) -> CustomMeasurement.State: ...
    @CurrentState.setter
    def CurrentState(self, value: CustomMeasurement.State) -> CustomMeasurement.State: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def SupportsScope(self) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...

class ImpedimetricGstatMethod(ImpedimetricMethodBase, IPotentiometric):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MaxPGAgain: int
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    TechniqueNumber: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AppliedCurrentRange(self) -> CurrentRange: ...
    @AppliedCurrentRange.setter
    def AppliedCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def CustomFreqs(self) -> List_1[float]: ...
    @CustomFreqs.setter
    def CustomFreqs(self, value: List_1[float]) -> List_1[float]: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EndCurrent(self) -> float: ...
    @EndCurrent.setter
    def EndCurrent(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def FixedFrequency(self) -> float: ...
    @FixedFrequency.setter
    def FixedFrequency(self, value: float) -> float: ...
    @property
    def ForceMaxHStabFilter(self) -> bool: ...
    @ForceMaxHStabFilter.setter
    def ForceMaxHStabFilter(self, value: bool) -> bool: ...
    @property
    def Freqs(self) -> List_1[float]: ...
    @property
    def FreqType(self) -> enumFrequencyType: ...
    @FreqType.setter
    def FreqType(self, value: enumFrequencyType) -> enumFrequencyType: ...
    @property
    def FrequencyMode(self) -> EnumFrequencyMode: ...
    @FrequencyMode.setter
    def FrequencyMode(self, value: EnumFrequencyMode) -> EnumFrequencyMode: ...
    @property
    def GEquilibrationTime(self) -> float: ...
    @GEquilibrationTime.setter
    def GEquilibrationTime(self, value: float) -> float: ...
    @property
    def Iac(self) -> float: ...
    @Iac.setter
    def Iac(self, value: float) -> float: ...
    @property
    def Idc(self) -> float: ...
    @Idc.setter
    def Idc(self, value: float) -> float: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def IterationMethodOverrides(self) -> ImpedimetricIterationMethodBase: ...
    @IterationMethodOverrides.setter
    def IterationMethodOverrides(
        self, value: ImpedimetricIterationMethodBase
    ) -> ImpedimetricIterationMethodBase: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxEqTime(self) -> float: ...
    @MaxEqTime.setter
    def MaxEqTime(self, value: float) -> float: ...
    @property
    def MaxFrequency(self) -> float: ...
    @MaxFrequency.setter
    def MaxFrequency(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinFrequency(self) -> float: ...
    @MinFrequency.setter
    def MinFrequency(self, value: float) -> float: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nFrequencies(self) -> int: ...
    @nFrequencies.setter
    def nFrequencies(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def NScans(self) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OriginalAppliedCurrentRange(self) -> typing.Optional[CurrentRanges]: ...
    @OriginalAppliedCurrentRange.setter
    def OriginalAppliedCurrentRange(
        self, value: typing.Optional[CurrentRanges]
    ) -> typing.Optional[CurrentRanges]: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatEachFreqMeas(self) -> bool: ...
    @PretreatEachFreqMeas.setter
    def PretreatEachFreqMeas(self, value: bool) -> bool: ...
    @property
    def PretreatEachScan(self) -> bool: ...
    @PretreatEachScan.setter
    def PretreatEachScan(self, value: bool) -> bool: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SamplingTime(self) -> float: ...
    @SamplingTime.setter
    def SamplingTime(self, value: float) -> float: ...
    @property
    def SamplingTimeMS(self) -> float: ...
    @SamplingTimeMS.setter
    def SamplingTimeMS(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def ScanType(self) -> enumScanType: ...
    @ScanType.setter
    def ScanType(self, value: enumScanType) -> enumScanType: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def ShowTDDMS(self) -> bool: ...
    @ShowTDDMS.setter
    def ShowTDDMS(self, value: bool) -> bool: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepCurrent(self) -> float: ...
    @StepCurrent.setter
    def StepCurrent(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def GetMethodID(self) -> str: ...
    def ReceiveMeasurement(
        self,
        conn: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementAsync(
        self,
        conn: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SetAppliedCurrentRangeSilent(self, range: CurrentRange) -> None: ...
    def SetCompatibleAppliedRange(self, capabilities: DeviceCapabilities) -> None: ...
    def SetCompatibleAppliedRangeSilent(self, capabilities: DeviceCapabilities) -> None: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class ImpedimetricIterationMethod(ImpedimetricIterationMethodBase):
    AcCoupled: bool
    AnalyteName: str
    Celltype: int
    Channel: int
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    FilterAc: int
    FilterADC: int
    FilterCF: int
    FilterDAC: int
    Frequency: float
    HSTAB: bool
    HSTABByte: int
    IsLastIteration: bool
    MaxSamplingRate: int
    MDAC: int
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Nadc: int
    NadcStart: int
    Neqstart: int
    nPointsac: int
    NumEquilibrationSines: int
    NumMeasurementSines: int
    numsinestable: int
    Overrides: ImpedimetricIterationMethodBase.EnumOverrides
    PeakOverlap: float
    PGAgain: int
    PGAoffset: int
    PolyEmStat: PolyEmStatMethodEx
    realtIntac: int
    RecordCE: bool
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    tIntac: float
    ToHex1String: str
    UseExternalAD: bool
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @nPoints.setter
    def nPoints(self, value: int) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def GetMethodID(self) -> str: ...
    def ReceiveMeasurement(
        self,
        conn: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementAsync(
        self,
        conn: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def ToHexPS3(self, m: EncodedMethodV1) -> None: ...
    def ToHexPS4(self, m: EncodedMethodV1) -> None: ...
    def ToShortString(self) -> str: ...

class ImpedimetricIterationMethodBase(TimeMethod):
    class EnumInternalChannel(typing.SupportsInt):
        @typing.overload
        def __init__(self, value: int) -> None: ...
        @typing.overload
        def __init__(self, value: int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        Ibipolar: ImpedimetricIterationMethodBase.EnumInternalChannel  # 34
        Ebipolar: ImpedimetricIterationMethodBase.EnumInternalChannel  # 35

    class EnumOverrides(typing.SupportsInt):
        @typing.overload
        def __init__(self, value: int) -> None: ...
        @typing.overload
        def __init__(self, value: int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        FilterCF: ImpedimetricIterationMethodBase.EnumOverrides  # 1
        FilterAC: ImpedimetricIterationMethodBase.EnumOverrides  # 2
        PGAgain: ImpedimetricIterationMethodBase.EnumOverrides  # 4
        PGAoffset: ImpedimetricIterationMethodBase.EnumOverrides  # 8
        tIntac: ImpedimetricIterationMethodBase.EnumOverrides  # 16
        nPointsac: ImpedimetricIterationMethodBase.EnumOverrides  # 32
        Nadc: ImpedimetricIterationMethodBase.EnumOverrides  # 64
        MDAC: ImpedimetricIterationMethodBase.EnumOverrides  # 128
        Neqstart: ImpedimetricIterationMethodBase.EnumOverrides  # 256
        NumMeasurementSines: ImpedimetricIterationMethodBase.EnumOverrides  # 512
        NumEquilibrationSines: ImpedimetricIterationMethodBase.EnumOverrides  # 1024
        Channel: ImpedimetricIterationMethodBase.EnumOverrides  # 2048
        ADC: ImpedimetricIterationMethodBase.EnumOverrides  # 4096
        HSTAB: ImpedimetricIterationMethodBase.EnumOverrides  # 8192
        AcCoupled: ImpedimetricIterationMethodBase.EnumOverrides  # 16384
        MaxPGAgain: ImpedimetricIterationMethodBase.EnumOverrides  # 32768
        FilterDAC: ImpedimetricIterationMethodBase.EnumOverrides  # 65536
        FilterADC: ImpedimetricIterationMethodBase.EnumOverrides  # 131072
        MaxSamplingRate: ImpedimetricIterationMethodBase.EnumOverrides  # 262144
        HSTABByte: ImpedimetricIterationMethodBase.EnumOverrides  # 524288
        Celltype: ImpedimetricIterationMethodBase.EnumOverrides  # 1048576

    AcCoupled: bool
    AnalyteName: str
    Celltype: int
    Channel: int
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    FilterAc: int
    FilterADC: int
    FilterCF: int
    FilterDAC: int
    Frequency: float
    HSTAB: bool
    HSTABByte: int
    IsLastIteration: bool
    MaxSamplingRate: int
    MDAC: int
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Nadc: int
    NadcStart: int
    Neqstart: int
    nPointsac: int
    NumEquilibrationSines: int
    NumMeasurementSines: int
    numsinestable: int
    Overrides: ImpedimetricIterationMethodBase.EnumOverrides
    PeakOverlap: float
    PGAgain: int
    PGAoffset: int
    PolyEmStat: PolyEmStatMethodEx
    realtIntac: int
    RecordCE: bool
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    tIntac: float
    ToHex1String: str
    UseExternalAD: bool
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @nPoints.setter
    def nPoints(self, value: int) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def DetermineSine(self, eisSettings: EISSettingsPS3) -> None: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    @staticmethod
    def GetNPoints(
        maxSamplingRate: float, frequency: float, minPoints: int, maxPoints: int
    ) -> int: ...
    @staticmethod
    def GetNumMeasurementSines(samplingtime: float, frequency: float) -> int: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def IsOverridden(
        self, parameter: ImpedimetricIterationMethodBase.EnumOverrides
    ) -> bool: ...
    def OverrideValue(
        self, parameter: ImpedimetricIterationMethodBase.EnumOverrides, value: typing.Any
    ) -> None: ...
    def SupportsDeviceStorage(self, deviceCapabilities: DeviceCapabilities) -> bool: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToString(self) -> str: ...

class ImpedimetricMeasurement(ImpedimetricMeasurementBase):
    def __init__(
        self, conn: ClientConnection, method: Method, muxChannel: int, measType: MeasType
    ) -> None: ...
    Channel: int
    ETA: DateTime
    LastMuxChannel: int
    MeasTimeMilliseconds: int
    MeasurementStarted: DateTime
    MeasurementStarted2: DateTime
    stopwatch: MicroStopwatch
    VsOCP: MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def CurrentState(self) -> CustomMeasurement.State: ...
    @CurrentState.setter
    def CurrentState(self, value: CustomMeasurement.State) -> CustomMeasurement.State: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def SupportsScope(self) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...

class ImpedimetricMeasurementBase(CustomMeasurement, IImpedimetricMeasurement):
    def __init__(
        self, conn: ClientConnection, method: Method, muxChannel: int, measType: MeasType
    ) -> None: ...
    CalibrationType: int
    Channel: int
    ETA: DateTime
    LastMuxChannel: int
    MeasTimeMilliseconds: int
    MeasurementStarted: DateTime
    MeasurementStarted2: DateTime
    stopwatch: MicroStopwatch
    VsOCP: MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def CurrentState(self) -> CustomMeasurement.State: ...
    @CurrentState.setter
    def CurrentState(self, value: CustomMeasurement.State) -> CustomMeasurement.State: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def SupportsScope(self) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    def Abort(self) -> None: ...
    def AbortAsync(self) -> Task: ...
    @staticmethod
    def IntToFloat(i: int) -> float: ...
    def ProcessData(self) -> None: ...
    def ProcessDataAsync(self) -> Task: ...
    def SkipPretreatment(self) -> None: ...
    def SkipPretreatmentAsync(self) -> Task: ...
    def Start(self) -> None: ...
    def StartAsync(self) -> Task: ...
    def StartStage(
        self,
        timeOffsetInSec: float,
        name: str,
        firstStage: bool = ...,
        resetCR: bool = ...,
        overrideStartRange: CurrentRange = ...,
    ) -> None: ...
    def StartStageAsync(
        self,
        timeOffsetInSec: float,
        name: str,
        firstStage: bool = ...,
        resetCR: bool = ...,
        overrideStartRange: CurrentRange = ...,
    ) -> Task: ...

class ImpedimetricMethod(ImpedimetricMethodBase):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    DualEISModeNames: IReadOnlyDictionary_2[int, str]
    MaxPGAgain: int
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    TechniqueNumber: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def CustomFreqs(self) -> List_1[float]: ...
    @CustomFreqs.setter
    def CustomFreqs(self, value: List_1[float]) -> List_1[float]: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Eac(self) -> float: ...
    @Eac.setter
    def Eac(self, value: float) -> float: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def FixedFrequency(self) -> float: ...
    @FixedFrequency.setter
    def FixedFrequency(self, value: float) -> float: ...
    @property
    def ForceMaxHStabFilter(self) -> bool: ...
    @ForceMaxHStabFilter.setter
    def ForceMaxHStabFilter(self, value: bool) -> bool: ...
    @property
    def Freqs(self) -> List_1[float]: ...
    @property
    def FreqType(self) -> enumFrequencyType: ...
    @FreqType.setter
    def FreqType(self, value: enumFrequencyType) -> enumFrequencyType: ...
    @property
    def FrequencyMode(self) -> EnumFrequencyMode: ...
    @FrequencyMode.setter
    def FrequencyMode(self, value: EnumFrequencyMode) -> EnumFrequencyMode: ...
    @property
    def Iac(self) -> float: ...
    @Iac.setter
    def Iac(self, value: float) -> float: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def IterationMethodOverrides(self) -> ImpedimetricIterationMethodBase: ...
    @IterationMethodOverrides.setter
    def IterationMethodOverrides(
        self, value: ImpedimetricIterationMethodBase
    ) -> ImpedimetricIterationMethodBase: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxEqTime(self) -> float: ...
    @MaxEqTime.setter
    def MaxEqTime(self, value: float) -> float: ...
    @property
    def MaxFrequency(self) -> float: ...
    @MaxFrequency.setter
    def MaxFrequency(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinFrequency(self) -> float: ...
    @MinFrequency.setter
    def MinFrequency(self, value: float) -> float: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nFrequencies(self) -> int: ...
    @nFrequencies.setter
    def nFrequencies(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def NScans(self) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatEachFreqMeas(self) -> bool: ...
    @PretreatEachFreqMeas.setter
    def PretreatEachFreqMeas(self, value: bool) -> bool: ...
    @property
    def PretreatEachScan(self) -> bool: ...
    @PretreatEachScan.setter
    def PretreatEachScan(self, value: bool) -> bool: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def RecordDualEISMode(self) -> DualEISModes: ...
    @RecordDualEISMode.setter
    def RecordDualEISMode(self, value: DualEISModes) -> DualEISModes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SamplingTime(self) -> float: ...
    @SamplingTime.setter
    def SamplingTime(self, value: float) -> float: ...
    @property
    def SamplingTimeMS(self) -> float: ...
    @SamplingTimeMS.setter
    def SamplingTimeMS(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def ScanType(self) -> enumScanType: ...
    @ScanType.setter
    def ScanType(self, value: enumScanType) -> enumScanType: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def ShowTDDMS(self) -> bool: ...
    @ShowTDDMS.setter
    def ShowTDDMS(self, value: bool) -> bool: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepPotential(self) -> float: ...
    @StepPotential.setter
    def StepPotential(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPEndPotential(self) -> float: ...
    @VersusOCPEndPotential.setter
    def VersusOCPEndPotential(self, value: float) -> float: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def GetMethodID(self) -> str: ...
    def ReceiveMeasurement(
        self,
        conn: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementAsync(
        self,
        conn: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SupportedRangingType(self, capabilities: DeviceCapabilities) -> Method.RangingTypes: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class ImpedimetricMethodBase(TimeMethod):
    def __init__(self, technique: int) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MaxPGAgain: int
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def CustomFreqs(self) -> List_1[float]: ...
    @CustomFreqs.setter
    def CustomFreqs(self, value: List_1[float]) -> List_1[float]: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def FixedFrequency(self) -> float: ...
    @FixedFrequency.setter
    def FixedFrequency(self, value: float) -> float: ...
    @property
    def ForceMaxHStabFilter(self) -> bool: ...
    @ForceMaxHStabFilter.setter
    def ForceMaxHStabFilter(self, value: bool) -> bool: ...
    @property
    def Freqs(self) -> List_1[float]: ...
    @property
    def FreqType(self) -> enumFrequencyType: ...
    @FreqType.setter
    def FreqType(self, value: enumFrequencyType) -> enumFrequencyType: ...
    @property
    def FrequencyMode(self) -> EnumFrequencyMode: ...
    @FrequencyMode.setter
    def FrequencyMode(self, value: EnumFrequencyMode) -> EnumFrequencyMode: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def IterationMethodOverrides(self) -> ImpedimetricIterationMethodBase: ...
    @IterationMethodOverrides.setter
    def IterationMethodOverrides(
        self, value: ImpedimetricIterationMethodBase
    ) -> ImpedimetricIterationMethodBase: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxEqTime(self) -> float: ...
    @MaxEqTime.setter
    def MaxEqTime(self, value: float) -> float: ...
    @property
    def MaxFrequency(self) -> float: ...
    @MaxFrequency.setter
    def MaxFrequency(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinFrequency(self) -> float: ...
    @MinFrequency.setter
    def MinFrequency(self, value: float) -> float: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nFrequencies(self) -> int: ...
    @nFrequencies.setter
    def nFrequencies(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def NScans(self) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatEachFreqMeas(self) -> bool: ...
    @PretreatEachFreqMeas.setter
    def PretreatEachFreqMeas(self, value: bool) -> bool: ...
    @property
    def PretreatEachScan(self) -> bool: ...
    @PretreatEachScan.setter
    def PretreatEachScan(self, value: bool) -> bool: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SamplingTime(self) -> float: ...
    @SamplingTime.setter
    def SamplingTime(self, value: float) -> float: ...
    @property
    def SamplingTimeMS(self) -> float: ...
    @SamplingTimeMS.setter
    def SamplingTimeMS(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def ScanType(self) -> enumScanType: ...
    @ScanType.setter
    def ScanType(self, value: enumScanType) -> enumScanType: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def ShowTDDMS(self) -> bool: ...
    @ShowTDDMS.setter
    def ShowTDDMS(self, value: bool) -> bool: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def GetFreqsListAsString(self) -> str: ...
    def GetFreqsListString(self) -> List_1[str]: ...
    def GetMaximumEstimatedMeasurementDuration(
        self, capab: DeviceCapabilities, withLevelStageOverhead: bool = ...
    ) -> float: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetNPoints(self, capabilities: DeviceCapabilities) -> int: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SupportsDeviceStorage(self, deviceCapabilities: DeviceCapabilities) -> bool: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...

class InputType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    String: InputType  # 0
    Bool: InputType  # 1
    Decimal: InputType  # 2
    Integer: InputType  # 3
    Enum: InputType  # 4
    Custom: InputType  # 5
    None_: InputType  # 6

class InvalidMethodScriptException(Exception):
    @property
    def Data(self) -> IDictionary: ...
    @property
    def Description(self) -> str: ...
    @property
    def Error(self) -> str: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def MethodSCRIPT(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...
    @staticmethod
    def GetErrorDetailsFromID(id: str) -> ValueTuple_2[str, str]: ...
    @staticmethod
    def MethodScriptValidationError(
        message: str, methodScript: str
    ) -> InvalidMethodScriptException: ...

class IPotentiometric(typing.Protocol):
    @property
    def AppliedCurrentRange(self) -> CurrentRange: ...
    @AppliedCurrentRange.setter
    def AppliedCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def GEquilibrationTime(self) -> float: ...
    @GEquilibrationTime.setter
    def GEquilibrationTime(self, value: float) -> float: ...
    @property
    def OriginalAppliedCurrentRange(self) -> typing.Optional[CurrentRanges]: ...
    @OriginalAppliedCurrentRange.setter
    def OriginalAppliedCurrentRange(
        self, value: typing.Optional[CurrentRanges]
    ) -> typing.Optional[CurrentRanges]: ...
    @abc.abstractmethod
    def GetBandwidth(self, capabilities: DeviceCapabilities) -> float: ...
    @abc.abstractmethod
    def SetAppliedCurrentRangeSilent(self, range: CurrentRange) -> None: ...
    @abc.abstractmethod
    def SetCompatibleAppliedRange(self, capabilities: DeviceCapabilities) -> None: ...
    @abc.abstractmethod
    def SetCompatibleAppliedRangeSilent(self, capabilities: DeviceCapabilities) -> None: ...

class Levels(List_1[EILevel]):
    @property
    def Capacity(self) -> int: ...
    @Capacity.setter
    def Capacity(self, value: int) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> EILevel: ...
    @Item.setter
    def Item(self, value: EILevel) -> EILevel: ...

class LinearSweep(PotentialMethod):
    def __init__(self) -> None: ...
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    EPretreat: Array_1[float]
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Technique: int
    TechniqueNumber: int
    tPretreat: Array_1[float]
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AnalyteName(self) -> Array_1[str]: ...
    @AnalyteName.setter
    def AnalyteName(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def AnalytePeakAutodetect(self) -> Array_1[bool]: ...
    @AnalytePeakAutodetect.setter
    def AnalytePeakAutodetect(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def BlankType(self) -> enumBlankType: ...
    @BlankType.setter
    def BlankType(self, value: enumBlankType) -> enumBlankType: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def CellVolume(self) -> float: ...
    @CellVolume.setter
    def CellVolume(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Determination(self) -> enumDetermination: ...
    @Determination.setter
    def Determination(self, value: enumDetermination) -> enumDetermination: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EPeakLeft(self) -> Array_1[float]: ...
    @EPeakLeft.setter
    def EPeakLeft(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeakRight(self) -> Array_1[float]: ...
    @EPeakRight.setter
    def EPeakRight(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeaks(self) -> Array_1[float]: ...
    @EPeaks.setter
    def EPeaks(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakValue(self) -> enumUsePeakValue: ...
    @PeakValue.setter
    def PeakValue(self, value: enumUsePeakValue) -> enumUsePeakValue: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SampleVolume(self) -> float: ...
    @SampleVolume.setter
    def SampleVolume(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def Scanrate(self) -> float: ...
    @Scanrate.setter
    def Scanrate(self, value: float) -> float: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def SolutionNr(self) -> Array_1[int]: ...
    @SolutionNr.setter
    def SolutionNr(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StandardConcentration(self) -> Array_1[float]: ...
    @property
    def StandardsValues(self) -> enumStandardsValues: ...
    @StandardsValues.setter
    def StandardsValues(self, value: enumStandardsValues) -> enumStandardsValues: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepPotential(self) -> float: ...
    @StepPotential.setter
    def StepPotential(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsDetermination(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPBeginPotential(self) -> float: ...
    @VersusOCPBeginPotential.setter
    def VersusOCPBeginPotential(self, value: float) -> float: ...
    @property
    def VersusOCPEndPotential(self) -> float: ...
    @VersusOCPEndPotential.setter
    def VersusOCPEndPotential(self, value: float) -> float: ...
    @property
    def VolumeConcentration(self) -> Array_1[float]: ...
    @VolumeConcentration.setter
    def VolumeConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def GetIntervalTime(self, capab: DeviceCapabilities) -> float: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToHex1TechniqueSpecific(self, m: EncodedMethodV1) -> None: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class LinearSweepPotentiometry(ScanMethod, ICurrentScan, INPointsMethod, IMixedModeStageMethod):
    def __init__(self) -> None: ...
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    EPretreat: Array_1[float]
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Technique: int
    TechniqueNumber: int
    tPretreat: Array_1[float]
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AnalyteName(self) -> Array_1[str]: ...
    @AnalyteName.setter
    def AnalyteName(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def AnalytePeakAutodetect(self) -> Array_1[bool]: ...
    @AnalytePeakAutodetect.setter
    def AnalytePeakAutodetect(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def AppliedCurrentRange(self) -> CurrentRange: ...
    @AppliedCurrentRange.setter
    def AppliedCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def BlankType(self) -> enumBlankType: ...
    @BlankType.setter
    def BlankType(self, value: enumBlankType) -> enumBlankType: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def CellVolume(self) -> float: ...
    @CellVolume.setter
    def CellVolume(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Determination(self) -> enumDetermination: ...
    @Determination.setter
    def Determination(self, value: enumDetermination) -> enumDetermination: ...
    @property
    def EndCurrent(self) -> float: ...
    @EndCurrent.setter
    def EndCurrent(self, value: float) -> float: ...
    @property
    def EPeakLeft(self) -> Array_1[float]: ...
    @EPeakLeft.setter
    def EPeakLeft(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeakRight(self) -> Array_1[float]: ...
    @EPeakRight.setter
    def EPeakRight(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeaks(self) -> Array_1[float]: ...
    @EPeaks.setter
    def EPeaks(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def GEquilibrationTime(self) -> float: ...
    @GEquilibrationTime.setter
    def GEquilibrationTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OriginalAppliedCurrentRange(self) -> typing.Optional[CurrentRanges]: ...
    @OriginalAppliedCurrentRange.setter
    def OriginalAppliedCurrentRange(
        self, value: typing.Optional[CurrentRanges]
    ) -> typing.Optional[CurrentRanges]: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakValue(self) -> enumUsePeakValue: ...
    @PeakValue.setter
    def PeakValue(self, value: enumUsePeakValue) -> enumUsePeakValue: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SampleVolume(self) -> float: ...
    @SampleVolume.setter
    def SampleVolume(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def ScanrateG(self) -> float: ...
    @ScanrateG.setter
    def ScanrateG(self, value: float) -> float: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def SolutionNr(self) -> Array_1[int]: ...
    @SolutionNr.setter
    def SolutionNr(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StandardConcentration(self) -> Array_1[float]: ...
    @property
    def StandardsValues(self) -> enumStandardsValues: ...
    @StandardsValues.setter
    def StandardsValues(self, value: enumStandardsValues) -> enumStandardsValues: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepCurrent(self) -> float: ...
    @StepCurrent.setter
    def StepCurrent(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsDetermination(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VolumeConcentration(self) -> Array_1[float]: ...
    @VolumeConcentration.setter
    def VolumeConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def GetIntervalTime(self, capab: DeviceCapabilities) -> float: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetNPoints(self, capabilities: DeviceCapabilities) -> int: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def GetRealNPoints(self, capabilities: DeviceCapabilities) -> int: ...
    def GetRealStepCurrent(self, capabilities: DeviceCapabilities) -> float: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SetAppliedCurrentRangeSilent(self, range: CurrentRange) -> None: ...
    def SetCompatibleAppliedRange(self, capabilities: DeviceCapabilities) -> None: ...
    def SetCompatibleAppliedRangeSilent(self, capabilities: DeviceCapabilities) -> None: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToHex1TechniqueSpecific(self, m: EncodedMethodV1) -> None: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class MethodError:
    def __init__(
        self, message: str, parameter: enumTechniqueParameter = ..., isFatal: bool = ...
    ) -> None: ...
    @property
    def IsFatal(self) -> bool: ...
    @IsFatal.setter
    def IsFatal(self, value: bool) -> bool: ...
    @property
    def Message(self) -> str: ...
    @Message.setter
    def Message(self, value: str) -> str: ...
    @property
    def Parameter(self) -> enumTechniqueParameter: ...
    @Parameter.setter
    def Parameter(self, value: enumTechniqueParameter) -> enumTechniqueParameter: ...
    def ToString(self) -> str: ...

class MethodNotSupportedError(MethodError):
    def __init__(self, capabilities: DeviceCapabilities) -> None: ...
    @property
    def IsFatal(self) -> bool: ...
    @IsFatal.setter
    def IsFatal(self, value: bool) -> bool: ...
    @property
    def Message(self) -> str: ...
    @Message.setter
    def Message(self, value: str) -> str: ...
    @property
    def Parameter(self) -> enumTechniqueParameter: ...
    @Parameter.setter
    def Parameter(self, value: enumTechniqueParameter) -> enumTechniqueParameter: ...

class MethodScriptSandbox(Method, ILevelPeakSignal):
    def __init__(self) -> None: ...
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Technique: int
    TechniqueNumber: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MethodScript(self) -> str: ...
    @MethodScript.setter
    def MethodScript(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SupportsDeviceStorage(self, deviceCapabilities: DeviceCapabilities) -> bool: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class MethodScriptSandboxMeasurement(CommMeasurementMS):
    Aborted: bool
    Channel: int
    VsOCP: MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    def Abort(self) -> None: ...
    def AbortAsync(self) -> Task: ...
    def ProcessData(self) -> None: ...
    def ProcessDataAsync(self) -> Task: ...
    def Start(self) -> None: ...
    def StartAsync(self) -> Task: ...

class MixedMode(TimeMethod, ILevelStepOverhead):
    def __init__(self) -> None: ...

    class EnumMixedModeStageType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value: int) -> None: ...
        @typing.overload
        def __init__(self, value: int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        ConstantE: MixedMode.EnumMixedModeStageType  # 0
        ConstantI: MixedMode.EnumMixedModeStageType  # 1
        SweepE: MixedMode.EnumMixedModeStageType  # 2
        OpenCircuit: MixedMode.EnumMixedModeStageType  # 3
        Impedance: MixedMode.EnumMixedModeStageType  # 4

    class StageAddedEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(
            self, sender: typing.Any, stage: Method, callback: AsyncCallback, object: typing.Any
        ) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, stage: Method) -> None: ...

    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Stages: List_1[Method]
    Standard: Array_1[float]
    Technique: int
    TechniqueNumber: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AppliedCurrentRangeFactor(self) -> float: ...
    @AppliedCurrentRangeFactor.setter
    def AppliedCurrentRangeFactor(self, value: float) -> float: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nCycles(self) -> int: ...
    @nCycles.setter
    def nCycles(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def AddStage(self, stage: MixedMode.EnumMixedModeStageType) -> Method: ...
    def Deserialize(self, contents: str) -> None: ...
    def GetAdjustedStageDuration(
        self, stages: IEnumerable_1[Method], capab: DeviceCapabilities
    ) -> float: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedDurationWithOverhead(
        self, capabilities: DeviceCapabilities
    ) -> float: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetNPoints(self, capabilities: DeviceCapabilities) -> int: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def MoveStage(self, stage: Method, moveUp: bool) -> bool: ...
    def ReceiveMeasurement(
        self,
        conn: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementAsync(
        self,
        conn: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def RemoveStage(self, iStage: int) -> None: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SetCompatibleAppliedRange(self, capabilities: DeviceCapabilities) -> None: ...
    def SupportsDeviceStorage(self, deviceCapabilities: DeviceCapabilities) -> bool: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class MixedModeMeasurement(CommMeasurement, IMixedModeMeasurement):
    def __init__(
        self,
        conn: ClientConnection,
        mixedTechniqueMethod: MixedMode,
        muxChannel: int,
        measType: MeasType,
    ) -> None: ...
    Aborted: bool
    Channel: int
    StageMeasurement: ActiveMeasurement
    VsOCP: MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    def Abort(self) -> None: ...
    def AbortAsync(self) -> Task: ...
    def OnStageStarting(self, method: Method) -> None: ...
    def ProcessData(self) -> None: ...
    def ProcessDataAsync(self) -> Task: ...
    def Start(self) -> None: ...
    def StartAsync(self) -> Task: ...

class MixedModeStageConstantE(AmperometricDetection, IMixedModeStage):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AdjustNPoints(self) -> None: ...
    @AdjustNPoints.setter
    def AdjustNPoints(self, value: bool) -> None: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ChargeLimitMax(self) -> float: ...
    @ChargeLimitMax.setter
    def ChargeLimitMax(self, value: float) -> float: ...
    @property
    def ChargeLimitMin(self) -> float: ...
    @ChargeLimitMin.setter
    def ChargeLimitMin(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def Index(self) -> int: ...
    @Index.setter
    def Index(self, value: int) -> int: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @nPoints.setter
    def nPoints(self, value: int) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StageType(self) -> MixedMode.EnumMixedModeStageType: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseChargeLimitMax(self) -> bool: ...
    @UseChargeLimitMax.setter
    def UseChargeLimitMax(self, value: bool) -> bool: ...
    @property
    def UseChargeLimitMin(self) -> bool: ...
    @UseChargeLimitMin.setter
    def UseChargeLimitMin(self, value: bool) -> bool: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsEiPropertiesList(self) -> Dictionary_2[str, bool]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def AdjustControlledStartValue(self, referenceValue: float) -> None: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SetRanging(self, ranging: Ranging) -> None: ...
    def SetRangingPotential(self, rangingPotential: RangingPotential) -> None: ...

class MixedModeStageConstantI(Potentiometry, IMixedModeStage):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AdjustNPoints(self) -> None: ...
    @AdjustNPoints.setter
    def AdjustNPoints(self, value: bool) -> None: ...
    @property
    def AppliedCurrentRange(self) -> CurrentRange: ...
    @AppliedCurrentRange.setter
    def AppliedCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def Filter(self) -> int: ...
    @Filter.setter
    def Filter(self, value: int) -> int: ...
    @property
    def GEquilibrationTime(self) -> float: ...
    @GEquilibrationTime.setter
    def GEquilibrationTime(self, value: float) -> float: ...
    @property
    def Index(self) -> int: ...
    @Index.setter
    def Index(self, value: int) -> int: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @nPoints.setter
    def nPoints(self, value: int) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OriginalAppliedCurrentRange(self) -> typing.Optional[CurrentRanges]: ...
    @OriginalAppliedCurrentRange.setter
    def OriginalAppliedCurrentRange(
        self, value: typing.Optional[CurrentRanges]
    ) -> typing.Optional[CurrentRanges]: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverrideFilter(self) -> bool: ...
    @OverrideFilter.setter
    def OverrideFilter(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StageType(self) -> MixedMode.EnumMixedModeStageType: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsEiPropertiesList(self) -> Dictionary_2[str, bool]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def AdjustControlledStartValue(self, referenceValue: float) -> None: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SetRanging(self, ranging: Ranging) -> None: ...
    def SetRangingPotential(self, rangingPotential: RangingPotential) -> None: ...

class MixedModeStageEIS(ImpedimetricMethod, IMixedModeStage):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MaxPGAgain: int
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AdjustNPoints(self) -> None: ...
    @AdjustNPoints.setter
    def AdjustNPoints(self, value: bool) -> None: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def CustomFreqs(self) -> List_1[float]: ...
    @CustomFreqs.setter
    def CustomFreqs(self, value: List_1[float]) -> List_1[float]: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Eac(self) -> float: ...
    @Eac.setter
    def Eac(self, value: float) -> float: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def FixedFrequency(self) -> float: ...
    @FixedFrequency.setter
    def FixedFrequency(self, value: float) -> float: ...
    @property
    def ForceMaxHStabFilter(self) -> bool: ...
    @ForceMaxHStabFilter.setter
    def ForceMaxHStabFilter(self, value: bool) -> bool: ...
    @property
    def Freqs(self) -> List_1[float]: ...
    @property
    def FreqType(self) -> enumFrequencyType: ...
    @FreqType.setter
    def FreqType(self, value: enumFrequencyType) -> enumFrequencyType: ...
    @property
    def FrequencyMode(self) -> EnumFrequencyMode: ...
    @FrequencyMode.setter
    def FrequencyMode(self, value: EnumFrequencyMode) -> EnumFrequencyMode: ...
    @property
    def Iac(self) -> float: ...
    @Iac.setter
    def Iac(self, value: float) -> float: ...
    @property
    def Index(self) -> int: ...
    @Index.setter
    def Index(self, value: int) -> int: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def IterationMethodOverrides(self) -> ImpedimetricIterationMethodBase: ...
    @IterationMethodOverrides.setter
    def IterationMethodOverrides(
        self, value: ImpedimetricIterationMethodBase
    ) -> ImpedimetricIterationMethodBase: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxEqTime(self) -> float: ...
    @MaxEqTime.setter
    def MaxEqTime(self, value: float) -> float: ...
    @property
    def MaxFrequency(self) -> float: ...
    @MaxFrequency.setter
    def MaxFrequency(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinFrequency(self) -> float: ...
    @MinFrequency.setter
    def MinFrequency(self, value: float) -> float: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nFrequencies(self) -> int: ...
    @nFrequencies.setter
    def nFrequencies(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def NScans(self) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatEachFreqMeas(self) -> bool: ...
    @PretreatEachFreqMeas.setter
    def PretreatEachFreqMeas(self, value: bool) -> bool: ...
    @property
    def PretreatEachScan(self) -> bool: ...
    @PretreatEachScan.setter
    def PretreatEachScan(self, value: bool) -> bool: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def RecordDualEISMode(self) -> DualEISModes: ...
    @RecordDualEISMode.setter
    def RecordDualEISMode(self, value: DualEISModes) -> DualEISModes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SamplingTime(self) -> float: ...
    @SamplingTime.setter
    def SamplingTime(self, value: float) -> float: ...
    @property
    def SamplingTimeMS(self) -> float: ...
    @SamplingTimeMS.setter
    def SamplingTimeMS(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def ScanType(self) -> enumScanType: ...
    @ScanType.setter
    def ScanType(self, value: enumScanType) -> enumScanType: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def ShowTDDMS(self) -> bool: ...
    @ShowTDDMS.setter
    def ShowTDDMS(self, value: bool) -> bool: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StageType(self) -> MixedMode.EnumMixedModeStageType: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepPotential(self) -> float: ...
    @StepPotential.setter
    def StepPotential(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPEndPotential(self) -> float: ...
    @VersusOCPEndPotential.setter
    def VersusOCPEndPotential(self, value: float) -> float: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsEiPropertiesList(self) -> Dictionary_2[str, bool]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def AdjustControlledStartValue(self, referenceValue: float) -> None: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SetRanging(self, ranging: Ranging) -> None: ...
    def SetRangingPotential(self, rangingPotential: RangingPotential) -> None: ...

class MixedModeStageOcp(OpenCircuitPotentiometry, IMixedModeStage):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AdjustNPoints(self) -> None: ...
    @AdjustNPoints.setter
    def AdjustNPoints(self, value: bool) -> None: ...
    @property
    def AppliedCurrentRange(self) -> CurrentRange: ...
    @AppliedCurrentRange.setter
    def AppliedCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def Filter(self) -> int: ...
    @Filter.setter
    def Filter(self, value: int) -> int: ...
    @property
    def GEquilibrationTime(self) -> float: ...
    @GEquilibrationTime.setter
    def GEquilibrationTime(self, value: float) -> float: ...
    @property
    def Index(self) -> int: ...
    @Index.setter
    def Index(self, value: int) -> int: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @nPoints.setter
    def nPoints(self, value: int) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OriginalAppliedCurrentRange(self) -> typing.Optional[CurrentRanges]: ...
    @OriginalAppliedCurrentRange.setter
    def OriginalAppliedCurrentRange(
        self, value: typing.Optional[CurrentRanges]
    ) -> typing.Optional[CurrentRanges]: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverrideFilter(self) -> bool: ...
    @OverrideFilter.setter
    def OverrideFilter(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StageType(self) -> MixedMode.EnumMixedModeStageType: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsEiPropertiesList(self) -> Dictionary_2[str, bool]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def AdjustControlledStartValue(self, referenceValue: float) -> None: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SetRanging(self, ranging: Ranging) -> None: ...
    def SetRangingPotential(self, rangingPotential: RangingPotential) -> None: ...

class MixedModeStageSweepE(LinearSweep, IMixedModeStage):
    def __init__(self) -> None: ...
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    EPretreat: Array_1[float]
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    SmoothLevel: int
    Technique: int
    tPretreat: Array_1[float]
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AdjustNPoints(self) -> None: ...
    @AdjustNPoints.setter
    def AdjustNPoints(self, value: bool) -> None: ...
    @property
    def AnalyteName(self) -> Array_1[str]: ...
    @AnalyteName.setter
    def AnalyteName(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def AnalytePeakAutodetect(self) -> Array_1[bool]: ...
    @AnalytePeakAutodetect.setter
    def AnalytePeakAutodetect(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def BlankType(self) -> enumBlankType: ...
    @BlankType.setter
    def BlankType(self, value: enumBlankType) -> enumBlankType: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def CellVolume(self) -> float: ...
    @CellVolume.setter
    def CellVolume(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Determination(self) -> enumDetermination: ...
    @Determination.setter
    def Determination(self, value: enumDetermination) -> enumDetermination: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EPeakLeft(self) -> Array_1[float]: ...
    @EPeakLeft.setter
    def EPeakLeft(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeakRight(self) -> Array_1[float]: ...
    @EPeakRight.setter
    def EPeakRight(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeaks(self) -> Array_1[float]: ...
    @EPeaks.setter
    def EPeaks(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def Index(self) -> int: ...
    @Index.setter
    def Index(self, value: int) -> int: ...
    @property
    def IntervalTime(self) -> None: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> None: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakValue(self) -> enumUsePeakValue: ...
    @PeakValue.setter
    def PeakValue(self, value: enumUsePeakValue) -> enumUsePeakValue: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SampleVolume(self) -> float: ...
    @SampleVolume.setter
    def SampleVolume(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def Scanrate(self) -> float: ...
    @Scanrate.setter
    def Scanrate(self, value: float) -> float: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def SolutionNr(self) -> Array_1[int]: ...
    @SolutionNr.setter
    def SolutionNr(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StageType(self) -> MixedMode.EnumMixedModeStageType: ...
    @property
    def StandardConcentration(self) -> Array_1[float]: ...
    @property
    def StandardsValues(self) -> enumStandardsValues: ...
    @StandardsValues.setter
    def StandardsValues(self, value: enumStandardsValues) -> enumStandardsValues: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepPotential(self) -> float: ...
    @StepPotential.setter
    def StepPotential(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsDetermination(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPBeginPotential(self) -> float: ...
    @VersusOCPBeginPotential.setter
    def VersusOCPBeginPotential(self, value: float) -> float: ...
    @property
    def VersusOCPEndPotential(self) -> float: ...
    @VersusOCPEndPotential.setter
    def VersusOCPEndPotential(self, value: float) -> float: ...
    @property
    def VolumeConcentration(self) -> Array_1[float]: ...
    @VolumeConcentration.setter
    def VolumeConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def VsEiPropertiesList(self) -> Dictionary_2[str, bool]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def AdjustControlledStartValue(self, referenceValue: float) -> None: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def ReceiveMeasurement(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SetRanging(self, ranging: Ranging) -> None: ...
    def SetRangingPotential(self, rangingPotential: RangingPotential) -> None: ...

class MultiplePulseAmperometry(TimeMethod):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    TechniqueNumber: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def E1(self) -> float: ...
    @E1.setter
    def E1(self, value: float) -> float: ...
    @property
    def E2(self) -> float: ...
    @E2.setter
    def E2(self, value: float) -> float: ...
    @property
    def E3(self) -> float: ...
    @E3.setter
    def E3(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def t1(self) -> float: ...
    @t1.setter
    def t1(self, value: float) -> float: ...
    @property
    def t2(self) -> float: ...
    @t2.setter
    def t2(self, value: float) -> float: ...
    @property
    def t3(self) -> float: ...
    @t3.setter
    def t3(self, value: float) -> float: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class Multistep(TimeMethod, ILevelStepOverhead):
    class EnumMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value: int) -> None: ...
        @typing.overload
        def __init__(self, value: int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        Amperometry: Multistep.EnumMode  # 0
        Potentiometry: Multistep.EnumMode  # 1

    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    Delta: float
    MethodIsGalvanostatic: bool
    Mode: Multistep.EnumMode
    MuxSett: Method.MuxSettings
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def Levels(self) -> Levels: ...
    @Levels.setter
    def Levels(self, value: Levels) -> Levels: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nCycles(self) -> int: ...
    @nCycles.setter
    def nCycles(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def nSteps(self) -> int: ...
    @nSteps.setter
    def nSteps(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseLimits(self) -> bool: ...
    @UseLimits.setter
    def UseLimits(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseSelectiveRecord(self) -> bool: ...
    @UseSelectiveRecord.setter
    def UseSelectiveRecord(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def GetMinimumEstimatedDurationWithOverhead(
        self, capabilities: DeviceCapabilities
    ) -> float: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetNPoints(self, capabilities: DeviceCapabilities) -> int: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def ReceiveMeasurement(
        self,
        conn: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementAsync(
        self,
        conn: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SupportsDeviceStorage(self, deviceCapabilities: DeviceCapabilities) -> bool: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class MultistepAmperometry(Multistep, IChargeLimits):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    Delta: float
    MethodID: str
    MethodIsGalvanostatic: bool
    Mode: Multistep.EnumMode
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    TechniqueNumber: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ChargeLimitMax(self) -> float: ...
    @ChargeLimitMax.setter
    def ChargeLimitMax(self, value: float) -> float: ...
    @property
    def ChargeLimitMin(self) -> float: ...
    @ChargeLimitMin.setter
    def ChargeLimitMin(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def Levels(self) -> Levels: ...
    @Levels.setter
    def Levels(self, value: Levels) -> Levels: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nCycles(self) -> int: ...
    @nCycles.setter
    def nCycles(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def nSteps(self) -> int: ...
    @nSteps.setter
    def nSteps(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseChargeLimitMax(self) -> bool: ...
    @UseChargeLimitMax.setter
    def UseChargeLimitMax(self, value: bool) -> bool: ...
    @property
    def UseChargeLimitMin(self) -> bool: ...
    @UseChargeLimitMin.setter
    def UseChargeLimitMin(self, value: bool) -> bool: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseLimits(self) -> bool: ...
    @UseLimits.setter
    def UseLimits(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseSelectiveRecord(self) -> bool: ...
    @UseSelectiveRecord.setter
    def UseSelectiveRecord(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def GetMethodID(self) -> str: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class MultistepMeasurementMC(CustomMeasurement):
    def __init__(
        self, conn: ClientConnection, method: Method, muxChannel: int, measType: MeasType
    ) -> None: ...

    class State(typing.SupportsInt):
        @typing.overload
        def __init__(self, value: int) -> None: ...
        @typing.overload
        def __init__(self, value: int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        NotStarted: MultistepMeasurementMC.State  # 0
        Conditioning: MultistepMeasurementMC.State  # 1
        Depositioning: MultistepMeasurementMC.State  # 2
        Equilibrating: MultistepMeasurementMC.State  # 3
        Measuring: MultistepMeasurementMC.State  # 4
        Done: MultistepMeasurementMC.State  # 5

    Channel: int
    ETA: DateTime
    LastMuxChannel: int
    MeasurementStarted: DateTime
    VsOCP: MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def CurrentState(self) -> CustomMeasurement.State: ...
    @CurrentState.setter
    def CurrentState(self, value: CustomMeasurement.State) -> CustomMeasurement.State: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeData(self) -> DataArrayTime: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    def Abort(self) -> None: ...
    def AbortAsync(self) -> Task: ...
    def StartStage(
        self,
        timeOffsetInSec: float,
        name: str,
        firstStage: bool = ...,
        resetCR: bool = ...,
        overrideStartRange: CurrentRange = ...,
    ) -> None: ...
    def StartStageAsync(
        self,
        timeOffsetInSec: float,
        name: str,
        firstStage: bool = ...,
        resetCR: bool = ...,
        overrideStartRange: CurrentRange = ...,
    ) -> Task: ...

class MultistepPotentiometry(Multistep, IPotentiometric):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    Delta: float
    MethodID: str
    MethodIsGalvanostatic: bool
    Mode: Multistep.EnumMode
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    TechniqueNumber: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AppliedCurrentRange(self) -> CurrentRange: ...
    @AppliedCurrentRange.setter
    def AppliedCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def GEquilibrationTime(self) -> float: ...
    @GEquilibrationTime.setter
    def GEquilibrationTime(self, value: float) -> float: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def Levels(self) -> Levels: ...
    @Levels.setter
    def Levels(self, value: Levels) -> Levels: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nCycles(self) -> int: ...
    @nCycles.setter
    def nCycles(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def nSteps(self) -> int: ...
    @nSteps.setter
    def nSteps(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OriginalAppliedCurrentRange(self) -> typing.Optional[CurrentRanges]: ...
    @OriginalAppliedCurrentRange.setter
    def OriginalAppliedCurrentRange(
        self, value: typing.Optional[CurrentRanges]
    ) -> typing.Optional[CurrentRanges]: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseLimits(self) -> bool: ...
    @UseLimits.setter
    def UseLimits(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseSelectiveRecord(self) -> bool: ...
    @UseSelectiveRecord.setter
    def UseSelectiveRecord(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def GetMethodID(self) -> str: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SetAppliedCurrentRangeSilent(self, range: CurrentRange) -> None: ...
    def SetCompatibleAppliedRange(self, capabilities: DeviceCapabilities) -> None: ...
    def SetCompatibleAppliedRangeSilent(self, capabilities: DeviceCapabilities) -> None: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class NewFreqCurveEventHandler(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(
        self, sender: typing.Any, c: SineCurve, callback: AsyncCallback, object: typing.Any
    ) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: typing.Any, c: SineCurve) -> None: ...

class NewFreqCurvesEventHandler(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(
        self,
        sender: typing.Any,
        curves: ValueTuple_3[SineCurve, SineCurve, SineCurve],
        callback: AsyncCallback,
        object: typing.Any,
    ) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(
        self, sender: typing.Any, curves: ValueTuple_3[SineCurve, SineCurve, SineCurve]
    ) -> None: ...

class NormalPulse(Pulse):
    def __init__(self) -> None: ...
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    EPretreat: Array_1[float]
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Technique: int
    TechniqueNumber: int
    tPretreat: Array_1[float]
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AnalyteName(self) -> Array_1[str]: ...
    @AnalyteName.setter
    def AnalyteName(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def AnalytePeakAutodetect(self) -> Array_1[bool]: ...
    @AnalytePeakAutodetect.setter
    def AnalytePeakAutodetect(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def BlankType(self) -> enumBlankType: ...
    @BlankType.setter
    def BlankType(self, value: enumBlankType) -> enumBlankType: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def CellVolume(self) -> float: ...
    @CellVolume.setter
    def CellVolume(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Determination(self) -> enumDetermination: ...
    @Determination.setter
    def Determination(self, value: enumDetermination) -> enumDetermination: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EPeakLeft(self) -> Array_1[float]: ...
    @EPeakLeft.setter
    def EPeakLeft(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeakRight(self) -> Array_1[float]: ...
    @EPeakRight.setter
    def EPeakRight(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeaks(self) -> Array_1[float]: ...
    @EPeaks.setter
    def EPeaks(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakValue(self) -> enumUsePeakValue: ...
    @PeakValue.setter
    def PeakValue(self, value: enumUsePeakValue) -> enumUsePeakValue: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def PulsePotential(self) -> float: ...
    @PulsePotential.setter
    def PulsePotential(self, value: float) -> float: ...
    @property
    def PulseTime(self) -> float: ...
    @PulseTime.setter
    def PulseTime(self, value: float) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SampleVolume(self) -> float: ...
    @SampleVolume.setter
    def SampleVolume(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def Scanrate(self) -> float: ...
    @Scanrate.setter
    def Scanrate(self, value: float) -> float: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def SolutionNr(self) -> Array_1[int]: ...
    @SolutionNr.setter
    def SolutionNr(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StandardConcentration(self) -> Array_1[float]: ...
    @property
    def StandardsValues(self) -> enumStandardsValues: ...
    @StandardsValues.setter
    def StandardsValues(self, value: enumStandardsValues) -> enumStandardsValues: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepPotential(self) -> float: ...
    @StepPotential.setter
    def StepPotential(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsDetermination(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPBeginPotential(self) -> float: ...
    @VersusOCPBeginPotential.setter
    def VersusOCPBeginPotential(self, value: float) -> float: ...
    @property
    def VersusOCPEndPotential(self) -> float: ...
    @VersusOCPEndPotential.setter
    def VersusOCPEndPotential(self, value: float) -> float: ...
    @property
    def VolumeConcentration(self) -> Array_1[float]: ...
    @VolumeConcentration.setter
    def VolumeConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def GetIntervalTime(self, capab: DeviceCapabilities) -> float: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class OpenCircuitPotentiometry(Potentiometry):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AppliedCurrentRange(self) -> CurrentRange: ...
    @AppliedCurrentRange.setter
    def AppliedCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def Filter(self) -> int: ...
    @Filter.setter
    def Filter(self, value: int) -> int: ...
    @property
    def GEquilibrationTime(self) -> float: ...
    @GEquilibrationTime.setter
    def GEquilibrationTime(self, value: float) -> float: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @nPoints.setter
    def nPoints(self, value: int) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OriginalAppliedCurrentRange(self) -> typing.Optional[CurrentRanges]: ...
    @OriginalAppliedCurrentRange.setter
    def OriginalAppliedCurrentRange(
        self, value: typing.Optional[CurrentRanges]
    ) -> typing.Optional[CurrentRanges]: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverrideFilter(self) -> bool: ...
    @OverrideFilter.setter
    def OverrideFilter(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def GetMethodID(self) -> str: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def SetCompatibleAppliedRangeSilent(self, capabilities: DeviceCapabilities) -> None: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class PotentiometricExtensions(abc.ABC):
    @staticmethod
    def DetermineOptimalAppliedCurrentRange(
        potentiometric: IPotentiometric,
        appliedCurrents: IList_1[float],
        capabilities: DeviceCapabilities,
    ) -> CurrentRange: ...
    @staticmethod
    def ValidateAppliedRangeBandwidth(
        potentiometric: IPotentiometric, capabilities: DeviceCapabilities
    ) -> List_1[MethodError]: ...

class Potentiometry(TimeMethod, IPotentiometric):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    TechniqueNumber: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AppliedCurrentRange(self) -> CurrentRange: ...
    @AppliedCurrentRange.setter
    def AppliedCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def Filter(self) -> int: ...
    @Filter.setter
    def Filter(self, value: int) -> int: ...
    @property
    def GEquilibrationTime(self) -> float: ...
    @GEquilibrationTime.setter
    def GEquilibrationTime(self, value: float) -> float: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @nPoints.setter
    def nPoints(self, value: int) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OriginalAppliedCurrentRange(self) -> typing.Optional[CurrentRanges]: ...
    @OriginalAppliedCurrentRange.setter
    def OriginalAppliedCurrentRange(
        self, value: typing.Optional[CurrentRanges]
    ) -> typing.Optional[CurrentRanges]: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverrideFilter(self) -> bool: ...
    @OverrideFilter.setter
    def OverrideFilter(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def GetMethodID(self) -> str: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SetAppliedCurrentRangeSilent(self, range: CurrentRange) -> None: ...
    def SetCompatibleAppliedRange(self, capabilities: DeviceCapabilities) -> None: ...
    def SetCompatibleAppliedRangeSilent(self, capabilities: DeviceCapabilities) -> None: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToHex1TechniqueSpecific(self, m: EncodedMethodV1) -> None: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class Pulse(PotentialMethod):
    def __init__(self, t: int) -> None: ...
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    EPretreat: Array_1[float]
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    SmoothLevel: int
    Technique: int
    tPretreat: Array_1[float]
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AnalyteName(self) -> Array_1[str]: ...
    @AnalyteName.setter
    def AnalyteName(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def AnalytePeakAutodetect(self) -> Array_1[bool]: ...
    @AnalytePeakAutodetect.setter
    def AnalytePeakAutodetect(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def BlankType(self) -> enumBlankType: ...
    @BlankType.setter
    def BlankType(self, value: enumBlankType) -> enumBlankType: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def CellVolume(self) -> float: ...
    @CellVolume.setter
    def CellVolume(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Determination(self) -> enumDetermination: ...
    @Determination.setter
    def Determination(self, value: enumDetermination) -> enumDetermination: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EPeakLeft(self) -> Array_1[float]: ...
    @EPeakLeft.setter
    def EPeakLeft(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeakRight(self) -> Array_1[float]: ...
    @EPeakRight.setter
    def EPeakRight(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeaks(self) -> Array_1[float]: ...
    @EPeaks.setter
    def EPeaks(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakValue(self) -> enumUsePeakValue: ...
    @PeakValue.setter
    def PeakValue(self, value: enumUsePeakValue) -> enumUsePeakValue: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def PulsePotential(self) -> float: ...
    @PulsePotential.setter
    def PulsePotential(self, value: float) -> float: ...
    @property
    def PulseTime(self) -> float: ...
    @PulseTime.setter
    def PulseTime(self, value: float) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SampleVolume(self) -> float: ...
    @SampleVolume.setter
    def SampleVolume(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def Scanrate(self) -> float: ...
    @Scanrate.setter
    def Scanrate(self, value: float) -> float: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def SolutionNr(self) -> Array_1[int]: ...
    @SolutionNr.setter
    def SolutionNr(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StandardConcentration(self) -> Array_1[float]: ...
    @property
    def StandardsValues(self) -> enumStandardsValues: ...
    @StandardsValues.setter
    def StandardsValues(self, value: enumStandardsValues) -> enumStandardsValues: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepPotential(self) -> float: ...
    @StepPotential.setter
    def StepPotential(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsDetermination(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPBeginPotential(self) -> float: ...
    @VersusOCPBeginPotential.setter
    def VersusOCPBeginPotential(self, value: float) -> float: ...
    @property
    def VersusOCPEndPotential(self) -> float: ...
    @VersusOCPEndPotential.setter
    def VersusOCPEndPotential(self, value: float) -> float: ...
    @property
    def VolumeConcentration(self) -> Array_1[float]: ...
    @VolumeConcentration.setter
    def VolumeConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class PulsedAmpDetection(TimeMethod):
    def __init__(self) -> None: ...

    class enumMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value: int) -> None: ...
        @typing.overload
        def __init__(self, value: int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        dc: PulsedAmpDetection.enumMode  # 1
        Pulse: PulsedAmpDetection.enumMode  # 2
        Differential: PulsedAmpDetection.enumMode  # 3

    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    TechniqueNumber: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DcPotential(self) -> float: ...
    @DcPotential.setter
    def DcPotential(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @nPoints.setter
    def nPoints(self, value: int) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def PulsePotentialAD(self) -> float: ...
    @PulsePotentialAD.setter
    def PulsePotentialAD(self, value: float) -> float: ...
    @property
    def PulseTime(self) -> float: ...
    @PulseTime.setter
    def PulseTime(self, value: float) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def tMode(self) -> enumMode: ...
    @tMode.setter
    def tMode(self, value: enumMode) -> enumMode: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def GetMethodID(self) -> str: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class ScriptOverridable(Attribute):
    @typing.overload
    def __init__(self, propertyname: str, unit: str) -> None: ...
    @typing.overload
    def __init__(self, properyname: str, friendlyname: str, unit: str) -> None: ...
    @property
    def FriendlyName(self) -> str: ...
    @FriendlyName.setter
    def FriendlyName(self, value: str) -> str: ...
    @property
    def PropertyName(self) -> str: ...
    @PropertyName.setter
    def PropertyName(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...

class SquareWave(PotentialMethod):
    def __init__(self) -> None: ...
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    EPretreat: Array_1[float]
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Technique: int
    TechniqueNumber: int
    tPretreat: Array_1[float]
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AnalyteName(self) -> Array_1[str]: ...
    @AnalyteName.setter
    def AnalyteName(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def AnalytePeakAutodetect(self) -> Array_1[bool]: ...
    @AnalytePeakAutodetect.setter
    def AnalytePeakAutodetect(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def BlankType(self) -> enumBlankType: ...
    @BlankType.setter
    def BlankType(self, value: enumBlankType) -> enumBlankType: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def CellVolume(self) -> float: ...
    @CellVolume.setter
    def CellVolume(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Determination(self) -> enumDetermination: ...
    @Determination.setter
    def Determination(self, value: enumDetermination) -> enumDetermination: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EPeakLeft(self) -> Array_1[float]: ...
    @EPeakLeft.setter
    def EPeakLeft(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeakRight(self) -> Array_1[float]: ...
    @EPeakRight.setter
    def EPeakRight(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeaks(self) -> Array_1[float]: ...
    @EPeaks.setter
    def EPeaks(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def Frequency(self) -> float: ...
    @Frequency.setter
    def Frequency(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MeasureIForwardReverse(self) -> bool: ...
    @MeasureIForwardReverse.setter
    def MeasureIForwardReverse(self, value: bool) -> bool: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakValue(self) -> enumUsePeakValue: ...
    @PeakValue.setter
    def PeakValue(self, value: enumUsePeakValue) -> enumUsePeakValue: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def PulseAmplitude(self) -> float: ...
    @PulseAmplitude.setter
    def PulseAmplitude(self, value: float) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SampleVolume(self) -> float: ...
    @SampleVolume.setter
    def SampleVolume(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def SolutionNr(self) -> Array_1[int]: ...
    @SolutionNr.setter
    def SolutionNr(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StandardConcentration(self) -> Array_1[float]: ...
    @property
    def StandardsValues(self) -> enumStandardsValues: ...
    @StandardsValues.setter
    def StandardsValues(self, value: enumStandardsValues) -> enumStandardsValues: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepPotential(self) -> float: ...
    @StepPotential.setter
    def StepPotential(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsDetermination(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPBeginPotential(self) -> float: ...
    @VersusOCPBeginPotential.setter
    def VersusOCPBeginPotential(self, value: float) -> float: ...
    @property
    def VersusOCPEndPotential(self) -> float: ...
    @VersusOCPEndPotential.setter
    def VersusOCPEndPotential(self, value: float) -> float: ...
    @property
    def VolumeConcentration(self) -> Array_1[float]: ...
    @VolumeConcentration.setter
    def VolumeConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def GetIntervalTime(self, capab: DeviceCapabilities) -> float: ...
    def GetMethodID(self) -> str: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class TechniqueParameter:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        parameter: enumTechniqueParameter,
        label: str,
        unit: str,
        min: str,
        max: str,
        defaultValue: str,
        dataType: InputType,
        toolTip: str,
    ) -> None: ...
    DataType: InputType
    DefaultValue: str
    Label: str
    Max: str
    Min: str
    Parameter: enumTechniqueParameter
    ToolTip: str
    Unit: str

class TechniqueParameters:
    def __init__(self) -> None: ...
    Inputs: List_1[TechniqueParameter]
