import typing, clr, abc
from PalmSens import Measurement, Method, CurrentRange, PotentialRange, MeasType, TaskBarrier, PotentionstatChannels, MethodScript
from System import MulticastDelegate, IAsyncResult, AsyncCallback, TimeSpan, DateTime, Exception, Array_1, Enum, Action, Func_1, ValueTuple_3, IDisposable, EventArgs
from System.Reflection import MethodInfo, MethodBase
from PalmSens.Plottables import Curve, EISData
from PalmSens.Data import DataSetCommon, DeviceFile, DataArray, VoltageReading, CurrentReading, GenericValue
from System.Collections.Generic import List_1
from System.Threading.Tasks import Task, Task_1, TaskScheduler
from System.Collections import IDictionary
from System.ComponentModel import INotifyPropertyChanged
from PalmSens.Devices import Device, DeviceCapabilities, MethodScriptDeviceCapabilities
from System.Threading import SemaphoreSlim
from PalmSens.AuxInput import AuxiliaryInputType
from System.IO import FileStream, Stream
from PalmSens.Techniques import IImpedimetricMeasurement, IMixedModeMeasurement

class ActiveMeasurement(Measurement, abc.ABC):

    class EnumPhase(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        Conditioning : ActiveMeasurement.EnumPhase # 0
        Depositing : ActiveMeasurement.EnumPhase # 1
        Equilibrating : ActiveMeasurement.EnumPhase # 2
        Measuring : ActiveMeasurement.EnumPhase # 3
        None_ : ActiveMeasurement.EnumPhase # -1


    class PhaseChangedHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, state: ActiveMeasurement.EnumPhase, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, state: ActiveMeasurement.EnumPhase) -> None: ...

    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> EnumPhase: ...
    @Phase.setter
    def Phase(self, value: EnumPhase) -> EnumPhase: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def Abort(self) -> None: ...
    def AbortAsync(self) -> Task: ...
    def OnMeasurementEnded(self) -> None: ...
    def OnMeasurementEndedAsync(self) -> Task: ...
    @abc.abstractmethod
    def ProcessData(self) -> None: ...
    def ProcessDataAsync(self) -> Task: ...
    @abc.abstractmethod
    def SkipPretreatment(self) -> None: ...
    def SkipPretreatmentAsync(self) -> Task: ...
    @abc.abstractmethod
    def Start(self) -> None: ...
    def StartAsync(self) -> Task: ...
    @abc.abstractmethod
    def StartStage(self, timeOffsetInSec: float, name: str, firstStage: bool = ..., resetCR: bool = ..., overrideStartRange: CurrentRange = ...) -> None: ...
    def StartStageAsync(self, timeOffsetInSec: float, name: str, firstStage: bool = ..., resetCR: bool = ..., overrideStartRange: CurrentRange = ...) -> Task: ...
    @abc.abstractmethod
    def SupportsHold(self) -> bool: ...
    @abc.abstractmethod
    def ToggleHold(self) -> None: ...
    def ToggleHoldAsync(self) -> Task: ...


class ACVMeasMS(PotScanMeasMS):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class Buffer(abc.ABC):
    @property
    def CharsInBuffer(self) -> int: ...
    def Clear(self) -> None: ...
    @abc.abstractmethod
    def FillBuffer(self) -> None: ...
    @abc.abstractmethod
    def FillBufferAsync(self) -> Task: ...
    def Peek(self) -> int: ...
    def PeekAsync(self) -> Task_1[int]: ...
    def Pop(self, n: int, startIndex: int = ...) -> str: ...
    def PopAsync(self, n: int, startIndex: int = ...) -> Task_1[str]: ...
    def ToString(self) -> str: ...
    # Skipped IndexOf due to it being static, abstract and generic.

    IndexOf : IndexOf_MethodGroup
    class IndexOf_MethodGroup:
        def __call__(self, c: str, startIndex: int = ...) -> int:...
        # Method IndexOf(s : String, startIndex : Int32) was skipped since it collides with above method



class BusyException(CommException):
    def __init__(self, s: str) -> None: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...


class ClientConnection(INotifyPropertyChanged):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> None: ...
    @typing.overload
    def __init__(self, empty: bool, device: Device, versionString: str) -> None: ...

    class CommMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        MODE_NORMAL : ClientConnection.CommMode # 0
        MODE_FAST : ClientConnection.CommMode # 1
        MODE_DEBUG : ClientConnection.CommMode # 2


    class EventHandlerCommError(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, exception: Exception, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, exception: Exception) -> None: ...


    class MessageEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, message: str, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, message: str) -> None: ...

    INT24_MAX : int
    INT24_MIN : int
    INT8_MAX : int
    INT8_MIN : int
    NBipotBoardsInMeasurement : int
    Semaphore : SemaphoreSlim
    UINT24_MAX : int
    UINT24_MIN : int
    @property
    def AuxInputSelected(self) -> AuxiliaryInputType: ...
    @AuxInputSelected.setter
    def AuxInputSelected(self, value: AuxiliaryInputType) -> AuxiliaryInputType: ...
    @property
    def BiPotCurrentRange(self) -> CurrentRange: ...
    @BiPotCurrentRange.setter
    def BiPotCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Capabilities(self) -> DeviceCapabilities: ...
    @Capabilities.setter
    def Capabilities(self, value: DeviceCapabilities) -> DeviceCapabilities: ...
    @classmethod
    @property
    def ConnectedDeviceCapabilities(cls) -> DeviceCapabilities: ...
    @property
    def Device(self) -> Device: ...
    @Device.setter
    def Device(self, value: Device) -> Device: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @property
    def IsBipotOn(self) -> bool: ...
    @IsBipotOn.setter
    def IsBipotOn(self, value: bool) -> bool: ...
    @property
    def IsCellOn(self) -> bool: ...
    @IsCellOn.setter
    def IsCellOn(self, value: bool) -> bool: ...
    @property
    def LastBiPotCurrentRead(self) -> float: ...
    @property
    def LastCurrentSet(self) -> float: ...
    @LastCurrentSet.setter
    def LastCurrentSet(self, value: float) -> float: ...
    @property
    def LastPotentialSet(self) -> float: ...
    @LastPotentialSet.setter
    def LastPotentialSet(self, value: float) -> float: ...
    @property
    def PalmSensType(self) -> int: ...
    @property
    def QCount(self) -> int: ...
    @property
    def State(self) -> CommManager.DeviceState: ...
    @State.setter
    def State(self, value: CommManager.DeviceState) -> CommManager.DeviceState: ...
    @property
    def Stirrer(self) -> bool: ...
    @Stirrer.setter
    def Stirrer(self, value: bool) -> bool: ...
    @property
    def SupportedTechniques(self) -> Array_1[int]: ...
    @property
    def TaskScheduler(self) -> TaskScheduler: ...
    @TaskScheduler.setter
    def TaskScheduler(self, value: TaskScheduler) -> TaskScheduler: ...
    @property
    def VersionString(self) -> str: ...
    @VersionString.setter
    def VersionString(self, value: str) -> str: ...
    def CalibrateAsync(self) -> Task: ...
    def CalibrateResultAsync(self) -> Task_1[Array_1[float]]: ...
    def CheckDeviceStatus(self, errorStr: clr.Reference[str]) -> bool: ...
    def CheckDeviceStatusAsync(self) -> Task_1[str]: ...
    def ClearBufferAsync(self) -> Task: ...
    def ClearDeviceFiles(self) -> None: ...
    def ClearDeviceFilesAsync(self) -> Task: ...
    @staticmethod
    def ClientConnectionAsync(empty: bool, device: Device, versionString: str) -> Task_1[ClientConnection]: ...
    @staticmethod
    def ClientConnnectionAsync(device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> Task_1[ClientConnection]: ...
    def ConvertMeasurementVersion(self, fwVersion: float, buff: OfflineBuffer) -> OfflineBuffer: ...
    @staticmethod
    def CountFlags(enumType: typing.Type[typing.Any], msk: Enum) -> int: ...
    @staticmethod
    def DecToHex(v: int, n: int) -> str: ...
    def DeleteDeviceFile(self, filePath: str) -> None: ...
    def DeleteDeviceFileAsync(self, filePath: str) -> Task: ...
    def EnableStirrer(self, val: bool) -> None: ...
    def EnableStirrerAsync(self, val: bool) -> Task: ...
    def EnterDownloadMode(self) -> None: ...
    def EnterDownloadModeAsync(self) -> Task: ...
    @staticmethod
    def FindDeviceType(versionString: str) -> enumDeviceType: ...
    @staticmethod
    def FindPositionOfBit(n: int) -> int: ...
    @staticmethod
    def FloatToUint32(val: float) -> int: ...
    def FormatDeviceFS(self, timeout_ms: int = ...) -> None: ...
    def FormatDeviceFSAsync(self, timeout_ms: int = ...) -> Task: ...
    @staticmethod
    def FromDevice(device: Device, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> ClientConnection: ...
    @staticmethod
    def FromDeviceAsync(device: Device, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> Task_1[ClientConnection]: ...
    def GetCellType(self) -> int: ...
    def GetCellTypeAsync(self) -> Task_1[int]: ...
    def GetCurrentMethod(self) -> str: ...
    def GetCurrentMethodAsync(self) -> Task_1[str]: ...
    def GetCurrentStatus(self, current: float) -> ReadingStatus: ...
    def GetDeviceFile(self, filePath: str) -> DeviceFile: ...
    def GetDeviceFileAsync(self, filePath: str) -> Task_1[DeviceFile]: ...
    def GetDeviceFiles(self, dir: str) -> List_1[DeviceFile]: ...
    def GetDeviceFilesAsync(self, dir: str) -> Task_1[List_1[DeviceFile]]: ...
    def GetDeviceFree(self) -> int: ...
    def GetDeviceFreeAsync(self) -> Task_1[int]: ...
    def GetDeviceSerial(self) -> DeviceSerial: ...
    def GetDeviceSerialAsync(self) -> Task_1[DeviceSerial]: ...
    def GetDeviceSize(self) -> int: ...
    def GetDeviceSizeAsync(self) -> Task_1[int]: ...
    def GetESBipotMode(self) -> DeviceCapabilities.EnumEmStatBipotMode: ...
    def GetESBipotModeAsync(self) -> Task_1[DeviceCapabilities.EnumEmStatBipotMode]: ...
    def GetHWRevision(self) -> int: ...
    def GetHWRevisionAsync(self) -> Task_1[int]: ...
    def GetLicence(self) -> int: ...
    def GetLicenceAsync(self) -> Task_1[int]: ...
    def GetLicenseHWID(self) -> Array_1[int]: ...
    def GetLicenseHWIDAsync(self) -> Task_1[Array_1[int]]: ...
    def GetMode(self) -> int: ...
    def GetModeAsync(self) -> Task_1[int]: ...
    def GetPowerStatus(self) -> PowerStatus: ...
    def GetSupportedCommands(self) -> str: ...
    def GetSupportedCommandsAsync(self) -> Task_1[str]: ...
    def GetSupportedTechniques(self) -> str: ...
    def GetSupportedTechniquesAsync(self) -> Task_1[str]: ...
    @staticmethod
    def HexToDec(hex: str) -> int: ...
    def InitClientConnectionAsync(self, empty: bool, device: Device, versionString: str) -> Task: ...
    @staticmethod
    def IsBitSet(b: int, pos: int) -> bool: ...
    @staticmethod
    def IsHex(hex: str) -> bool: ...
    @staticmethod
    def IsPowerOfTwo(n: int) -> bool: ...
    def LoadDeviceFile(self, file: DeviceFile) -> Measurement: ...
    def LoadDeviceFileAsync(self, file: DeviceFile) -> Task_1[Measurement]: ...
    @staticmethod
    def ParseVersion(versionString: str) -> float: ...
    def ProcessData(self) -> None: ...
    def ProcessDataAsync(self) -> Task: ...
    def ReadAnalogInput(self, ain: int = ...) -> float: ...
    def ReadAnalogInputAsync(self, ain: int = ...) -> Task_1[float]: ...
    def ReadAuxDigitalIn(self) -> int: ...
    def ReadAuxDigitalInAsync(self) -> Task_1[int]: ...
    def ReadBiPotCurrent(self) -> float: ...
    def ReadBiPotCurrentAsync(self) -> Task_1[float]: ...
    def ReadCurrent(self) -> float: ...
    def ReadCurrentAsync(self) -> Task_1[float]: ...
    def ReadDigitalLine(self, bitmask: int) -> int: ...
    def ReadDigitalLineAsync(self, bitmask: int) -> Task_1[int]: ...
    def ReadDigitalLineD0(self) -> bool: ...
    def ReadDigitalLineD0Async(self) -> Task_1[bool]: ...
    def ReadDigitalLineD1(self) -> bool: ...
    def ReadEeprom(self, address: int) -> int: ...
    def ReadEepromAsync(self, address: int) -> Task_1[int]: ...
    def ReadEepromUint32(self, address: int) -> int: ...
    def ReadEepromUint32Async(self, address: int) -> Task_1[int]: ...
    def ReadEmStatEEPROM(self, address: int) -> Array_1[int]: ...
    def ReadEmStatEEPROMAsync(self, address: int) -> Task_1[Array_1[int]]: ...
    def ReadFromDevice(self, cmd: str, length: int) -> str: ...
    def ReadFromDeviceAsync(self, cmd: str, length: int) -> Task_1[str]: ...
    def ReadMuxInfo(self) -> None: ...
    def ReadMuxInfoAsync(self) -> Task: ...
    def ReadPotential(self) -> float: ...
    def ReadPotentialAsync(self) -> Task_1[float]: ...
    def ReadPS3EEPROM(self, address: int) -> int: ...
    def ReadPS3EEPROMAsync(self, address: int) -> Task_1[int]: ...
    def ReadVersion(self) -> None: ...
    def ReadVersionAsync(self) -> Task: ...
    def ReloadData(self) -> None: ...
    def ReloadDataAsync(self) -> Task: ...
    def RemoteControl(self, cmd: str, arg1: int, arg2: int) -> None: ...
    def RemoteControlAsync(self, cmd: str, arg1: int, arg2: int) -> Task: ...
    def Reset(self) -> None: ...
    def ResetAsync(self) -> Task: ...
    def SendModeCellStateRanges(self, mode: EnumMode, cellOn: bool, cr: CurrentRange, pr: PotentialRange = ...) -> None: ...
    def SendModeCellStateRangesAsync(self, mode: EnumMode, cellOn: bool, cr: CurrentRange, pr: PotentialRange = ...) -> Task: ...
    def SendModeCR(self, mode: EnumMode, CellOn: bool, cr: CurrentRange) -> None: ...
    def SendModeCRAsync(self, mode: EnumMode, CellOn: bool, cr: CurrentRange) -> Task: ...
    def SendSine(self, Sine: Array_1[int]) -> bool: ...
    def SendSineAsync(self, Sine: Array_1[int]) -> Task_1[bool]: ...
    def SetBiPotOff(self) -> None: ...
    def SetBiPotOffAsync(self) -> Task: ...
    def SetBiPotOnAndCR(self, val: CurrentRange) -> None: ...
    def SetBiPotOnAndCRAsync(self, val: CurrentRange) -> Task: ...
    def SetBiPotPotential(self, val: float) -> None: ...
    def SetBiPotPotentialAsync(self, val: float) -> Task: ...
    def SetCellType(self, ct: int) -> None: ...
    def SetCellTypeAsync(self, ct: int) -> Task: ...
    def SetCommMode(self, mode: ClientConnection.CommMode) -> None: ...
    def SetCommModeAsync(self, mode: ClientConnection.CommMode) -> Task: ...
    def SetCurrent(self, val: float) -> None: ...
    def SetCurrentAsync(self, val: float) -> Task: ...
    def SetDACOffset(self, offset: float) -> None: ...
    def SetDACOffsetAsync(self, offset: float) -> Task: ...
    def SetDataRateSpeed(self, decValue: int) -> None: ...
    def SetDataRateSpeedAsync(self, decValue: int) -> Task: ...
    def SetDateTime(self, year: int, month: int, day: int, hour: int, min: int, sec: int) -> None: ...
    def SetDateTimeAsync(self, year: int, month: int, day: int, hour: int, min: int, sec: int) -> Task: ...
    def SetDigitalOutput(self, val: int) -> None: ...
    def SetDigitalOutputAsync(self, val: int) -> Task: ...
    def SetESBiPotMode(self, mode: DeviceCapabilities.EnumEmStatBipotMode) -> None: ...
    def SetESBiPotModeAsync(self, mode: DeviceCapabilities.EnumEmStatBipotMode) -> Task: ...
    def SetExternalOutput(self, val: float) -> None: ...
    def SetExternalOutputAsync(self, val: float) -> Task: ...
    def SetFilterBytePS3(self, settings: int) -> None: ...
    def SetMDAC(self, fac: float) -> None: ...
    def SetMDACAsync(self, fac: float) -> Task: ...
    def SetMode(self, value: int) -> None: ...
    def SetModeAsync(self, value: int) -> Task: ...
    def SetMuxChannel(self, val: int) -> None: ...
    def SetMuxChannelAsync(self, val: int) -> Task: ...
    def SetMuxSettings(self, type: MuxType, sett: Method.MuxSettings) -> None: ...
    def SetMuxSettingsAsync(self, type: MuxType, sett: Method.MuxSettings) -> Task: ...
    def SetPotential(self, val: float) -> None: ...
    def SetPotentialAsync(self, val: float) -> Task: ...
    def SetPotentialOffset1V(self, val: bool) -> None: ...
    def SetPotentialOffset1VAsync(self, val: bool) -> Task: ...
    def SetPotentialReadOffset(self, offset: float) -> None: ...
    def SetPotentialReadOffsetAsync(self, offset: float) -> Task: ...
    def SetPSBiPotMode(self, mode: Method.EnumPalmSensBipotMode) -> None: ...
    def SetPSBiPotModeAsync(self, mode: Method.EnumPalmSensBipotMode) -> Task: ...
    def SetReadInterval(self, timeMS: int) -> None: ...
    def SetReadIntervalAsync(self, timeMS: int) -> Task: ...
    def SetSerial(self, serial: DeviceSerialV2) -> None: ...
    def SetSerialAsync(self, serial: DeviceSerialV2) -> Task: ...
    def SetSineFreq(self, p: float) -> None: ...
    def SetSineFreqAsync(self, p: float) -> Task: ...
    def SupportedTechniquesAsync(self) -> Task_1[Array_1[int]]: ...
    def Supports10mA(self) -> bool: ...
    def ToString(self) -> str: ...
    @staticmethod
    def UDecToHex(v: int, n: int) -> str: ...
    @staticmethod
    def Uint32ToFloat(input: int) -> float: ...
    def WriteDeviceFile(self, path: str, file: str) -> None: ...
    def WriteDeviceFileAsync(self, path: str, file: str) -> Task: ...
    def WriteEeprom(self, address: int, value: int) -> None: ...
    def WriteEepromAsync(self, address: int, value: int) -> Task: ...
    def WriteEepromUint32(self, addr: int, val: int) -> None: ...
    def WriteEepromUint32Async(self, addr: int, val: int) -> Task: ...
    def WriteToPS3EEPROM(self, address: int, value: int) -> None: ...
    def WriteToPS3EEPROMAsync(self, address: int, value: int) -> Task: ...
    # Skipped Calibrate due to it being static, abstract and generic.

    Calibrate : Calibrate_MethodGroup
    class Calibrate_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, offset: clr.Reference[Array_1[float]]) -> None:...

    # Skipped FromHex due to it being static, abstract and generic.

    FromHex : FromHex_MethodGroup
    class FromHex_MethodGroup:
        @typing.overload
        def __call__(self, str: str) -> Array_1[int]:...
        @typing.overload
        def __call__(self, str: str, offset: int, length: int) -> Array_1[int]:...

    # Skipped Measure due to it being static, abstract and generic.

    Measure : Measure_MethodGroup
    class Measure_MethodGroup:
        @typing.overload
        def __call__(self) -> ActiveMeasurement:...
        @typing.overload
        def __call__(self, m: Method) -> ActiveMeasurement:...
        @typing.overload
        def __call__(self, m: Method, channel: int, muxchannel: int, measType: MeasType) -> ActiveMeasurement:...

    # Skipped MeasureAsync due to it being static, abstract and generic.

    MeasureAsync : MeasureAsync_MethodGroup
    class MeasureAsync_MethodGroup:
        @typing.overload
        def __call__(self) -> Task_1[ActiveMeasurement]:...
        @typing.overload
        def __call__(self, m: Method) -> Task_1[ActiveMeasurement]:...
        @typing.overload
        def __call__(self, m: Method, channel: int, muxchannel: int, measType: MeasType, taskBarrier: TaskBarrier = ...) -> Task_1[ActiveMeasurement]:...

    # Skipped Run due to it being static, abstract and generic.

    Run : Run_MethodGroup
    class Run_MethodGroup:
        def __getitem__(self, t:typing.Type[Run_1_T1]) -> Run_1[Run_1_T1]: ...

        Run_1_T1 = typing.TypeVar('Run_1_T1')
        class Run_1(typing.Generic[Run_1_T1]):
            Run_1_T = ClientConnection.Run_MethodGroup.Run_1_T1
            def __call__(self, task: Task_1[Run_1_T]) -> Task_1[Run_1_T]:...

        @typing.overload
        def __call__(self, action: Action) -> Task:...
        @typing.overload
        def __call__(self, task: Task) -> Task:...

    # Skipped RunAsync due to it being static, abstract and generic.

    RunAsync : RunAsync_MethodGroup
    class RunAsync_MethodGroup:
        def __getitem__(self, t:typing.Type[RunAsync_1_T1]) -> RunAsync_1[RunAsync_1_T1]: ...

        RunAsync_1_T1 = typing.TypeVar('RunAsync_1_T1')
        class RunAsync_1(typing.Generic[RunAsync_1_T1]):
            RunAsync_1_T = ClientConnection.RunAsync_MethodGroup.RunAsync_1_T1
            @typing.overload
            def __call__(self, func: Func_1[Task_1[RunAsync_1_T]]) -> Task_1[RunAsync_1_T]:...
            @typing.overload
            def __call__(self, task: Task_1[RunAsync_1_T]) -> Task_1[RunAsync_1_T]:...

        @typing.overload
        def __call__(self, func: Func_1[Task]) -> Task:...
        @typing.overload
        def __call__(self, action: Action) -> Task:...
        @typing.overload
        def __call__(self, task: Task) -> Task:...

    # Skipped ToHex due to it being static, abstract and generic.

    ToHex : ToHex_MethodGroup
    class ToHex_MethodGroup:
        @typing.overload
        def __call__(self, data: Array_1[int]) -> str:...
        @typing.overload
        def __call__(self, data: Array_1[int], offset: int, length: int) -> str:...



class ClientConnectionES4(ClientConnectionMS):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> None: ...
    @typing.overload
    def __init__(self, empty: bool, device: Device, versionString: str) -> None: ...

    class ES4Reg(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        REG_CR_EN_MSK : ClientConnectionES4.ES4Reg # 128
        REG_NVM_COMMIT : ClientConnectionES4.ES4Reg # 129
        REG_PR_RE_EN_MSK : ClientConnectionES4.ES4Reg # 130
        REG_CAL_DO_AUTO_CAL : ClientConnectionES4.ES4Reg # 131
        REG_DEFAULT_SETT : ClientConnectionES4.ES4Reg # 132
        REG_FACTORY_SETT : ClientConnectionES4.ES4Reg # 133
        REG_FACTORY_STORE : ClientConnectionES4.ES4Reg # 134
        REG_MULTI_SERIAL : ClientConnectionES4.ES4Reg # 135
        REG_AUX_DAC_GAIN : ClientConnectionES4.ES4Reg # 136
        REG_CONF_BAUD : ClientConnectionES4.ES4Reg # 137
        REG_CAL_DC_DAC_GAIN : ClientConnectionES4.ES4Reg # 160
        REG_CAL_DC_DAC_OFFSET : ClientConnectionES4.ES4Reg # 161
        REG_CAL_AC_DAC_GAIN : ClientConnectionES4.ES4Reg # 164
        REG_CAL_AC_DAC_OFFSET : ClientConnectionES4.ES4Reg # 165
        REG_CAL_AIN0_ADC_GAIN : ClientConnectionES4.ES4Reg # 166
        REG_CAL_AIN0_ADC_OFFSET : ClientConnectionES4.ES4Reg # 167
        REG_CAL_CE_ADC_GAIN : ClientConnectionES4.ES4Reg # 168
        REG_CAL_CE_ADC_OFFSET : ClientConnectionES4.ES4Reg # 169
        REG_CAL_PR_RE_10mV_GAIN : ClientConnectionES4.ES4Reg # 170
        REG_CAL_PR_RE_10mV_OFFSET : ClientConnectionES4.ES4Reg # 171
        REG_CAL_PR_RE_20mV_GAIN : ClientConnectionES4.ES4Reg # 172
        REG_CAL_PR_RE_20mV_OFFSET : ClientConnectionES4.ES4Reg # 173
        REG_CAL_PR_RE_50mV_GAIN : ClientConnectionES4.ES4Reg # 174
        REG_CAL_PR_RE_50mV_OFFSET : ClientConnectionES4.ES4Reg # 175
        REG_CAL_PR_RE_100mV_GAIN : ClientConnectionES4.ES4Reg # 176
        REG_CAL_PR_RE_100mV_OFFSET : ClientConnectionES4.ES4Reg # 177
        REG_CAL_PR_RE_200mV_GAIN : ClientConnectionES4.ES4Reg # 178
        REG_CAL_PR_RE_200mV_OFFSET : ClientConnectionES4.ES4Reg # 179
        REG_CAL_PR_RE_500mV_GAIN : ClientConnectionES4.ES4Reg # 180
        REG_CAL_PR_RE_500mV_OFFSET : ClientConnectionES4.ES4Reg # 181
        REG_CAL_PR_RE_1V_GAIN : ClientConnectionES4.ES4Reg # 182
        REG_CAL_PR_RE_1V_OFFSET : ClientConnectionES4.ES4Reg # 183
        REG_CAL_CR_100pA_GAIN : ClientConnectionES4.ES4Reg # 184
        REG_CAL_CR_100pA_OFFSET : ClientConnectionES4.ES4Reg # 185
        REG_CAL_CR_200pA_GAIN : ClientConnectionES4.ES4Reg # 186
        REG_CAL_CR_200pA_OFFSET : ClientConnectionES4.ES4Reg # 187
        REG_CAL_CR_500pA_GAIN : ClientConnectionES4.ES4Reg # 188
        REG_CAL_CR_500pA_OFFSET : ClientConnectionES4.ES4Reg # 189
        REG_CAL_CR_1nA_GAIN : ClientConnectionES4.ES4Reg # 190
        REG_CAL_CR_1nA_OFFSET : ClientConnectionES4.ES4Reg # 191
        REG_CAL_CR_2nA_GAIN : ClientConnectionES4.ES4Reg # 192
        REG_CAL_CR_2nA_OFFSET : ClientConnectionES4.ES4Reg # 193
        REG_CAL_CR_5nA_GAIN : ClientConnectionES4.ES4Reg # 194
        REG_CAL_CR_5nA_OFFSET : ClientConnectionES4.ES4Reg # 195
        REG_CAL_CR_10nA_GAIN : ClientConnectionES4.ES4Reg # 196
        REG_CAL_CR_10nA_OFFSET : ClientConnectionES4.ES4Reg # 197
        REG_CAL_CR_20nA_GAIN : ClientConnectionES4.ES4Reg # 198
        REG_CAL_CR_20nA_OFFSET : ClientConnectionES4.ES4Reg # 199
        REG_CAL_CR_50nA_GAIN : ClientConnectionES4.ES4Reg # 200
        REG_CAL_CR_50nA_OFFSET : ClientConnectionES4.ES4Reg # 201
        REG_CAL_CR_100nA_GAIN : ClientConnectionES4.ES4Reg # 202
        REG_CAL_CR_100nA_OFFSET : ClientConnectionES4.ES4Reg # 203
        REG_CAL_CR_200nA_GAIN : ClientConnectionES4.ES4Reg # 204
        REG_CAL_CR_200nA_OFFSET : ClientConnectionES4.ES4Reg # 205
        REG_CAL_CR_500nA_GAIN : ClientConnectionES4.ES4Reg # 206
        REG_CAL_CR_500nA_OFFSET : ClientConnectionES4.ES4Reg # 207
        REG_CAL_CR_1uA_GAIN : ClientConnectionES4.ES4Reg # 208
        REG_CAL_CR_1uA_OFFSET : ClientConnectionES4.ES4Reg # 209
        REG_CAL_CR_2uA_GAIN : ClientConnectionES4.ES4Reg # 210
        REG_CAL_CR_2uA_OFFSET : ClientConnectionES4.ES4Reg # 211
        REG_CAL_CR_5uA_GAIN : ClientConnectionES4.ES4Reg # 212
        REG_CAL_CR_5uA_OFFSET : ClientConnectionES4.ES4Reg # 213
        REG_CAL_CR_10uA_GAIN : ClientConnectionES4.ES4Reg # 214
        REG_CAL_CR_10uA_OFFSET : ClientConnectionES4.ES4Reg # 215
        REG_CAL_CR_20uA_GAIN : ClientConnectionES4.ES4Reg # 216
        REG_CAL_CR_20uA_OFFSET : ClientConnectionES4.ES4Reg # 217
        REG_CAL_CR_50uA_GAIN : ClientConnectionES4.ES4Reg # 218
        REG_CAL_CR_50uA_OFFSET : ClientConnectionES4.ES4Reg # 219
        REG_CAL_CR_100uA_GAIN : ClientConnectionES4.ES4Reg # 220
        REG_CAL_CR_100uA_OFFSET : ClientConnectionES4.ES4Reg # 221
        REG_CAL_CR_200uA_GAIN : ClientConnectionES4.ES4Reg # 222
        REG_CAL_CR_200uA_OFFSET : ClientConnectionES4.ES4Reg # 223
        REG_CAL_CR_500uA_GAIN : ClientConnectionES4.ES4Reg # 224
        REG_CAL_CR_500uA_OFFSET : ClientConnectionES4.ES4Reg # 225
        REG_CAL_CR_1mA_GAIN : ClientConnectionES4.ES4Reg # 226
        REG_CAL_CR_1mA_OFFSET : ClientConnectionES4.ES4Reg # 227
        REG_CAL_CR_2mA_GAIN : ClientConnectionES4.ES4Reg # 228
        REG_CAL_CR_2mA_OFFSET : ClientConnectionES4.ES4Reg # 229
        REG_CAL_CR_5mA_GAIN : ClientConnectionES4.ES4Reg # 230
        REG_CAL_CR_5mA_OFFSET : ClientConnectionES4.ES4Reg # 231
        REG_CAL_CR_10mA_GAIN : ClientConnectionES4.ES4Reg # 232
        REG_CAL_CR_10mA_OFFSET : ClientConnectionES4.ES4Reg # 233
        REG_CAL_CR_20mA_GAIN : ClientConnectionES4.ES4Reg # 234
        REG_CAL_CR_20mA_OFFSET : ClientConnectionES4.ES4Reg # 235
        REG_CAL_CR_50mA_GAIN : ClientConnectionES4.ES4Reg # 236
        REG_CAL_CR_50mA_OFFSET : ClientConnectionES4.ES4Reg # 237
        REG_CAL_CR_100mA_GAIN : ClientConnectionES4.ES4Reg # 238
        REG_CAL_CR_100mA_OFFSET : ClientConnectionES4.ES4Reg # 239
        REG_CAL_DC_DAC_CURRENT_10nA_GAIN : ClientConnectionES4.ES4Reg # 240
        REG_CAL_DC_DAC_CURRENT_10nA_OFFSET : ClientConnectionES4.ES4Reg # 241
        REG_CAL_DC_DAC_CURRENT_1uA_GAIN : ClientConnectionES4.ES4Reg # 242
        REG_CAL_DC_DAC_CURRENT_1uA_OFFSET : ClientConnectionES4.ES4Reg # 243
        REG_CAL_DC_DAC_CURRENT_100uA_GAIN : ClientConnectionES4.ES4Reg # 244
        REG_CAL_DC_DAC_CURRENT_100uA_OFFSET : ClientConnectionES4.ES4Reg # 245
        REG_CAL_DC_DAC_CURRENT_10mA_GAIN : ClientConnectionES4.ES4Reg # 246
        REG_CAL_DC_DAC_CURRENT_10mA_OFFSET : ClientConnectionES4.ES4Reg # 247
        REG_CAL_DC_DAC_CURRENT_100mA_GAIN : ClientConnectionES4.ES4Reg # 248
        REG_CAL_DC_DAC_CURRENT_100mA_OFFSET : ClientConnectionES4.ES4Reg # 249
        REG_CAL_TRIM_DAC_I : ClientConnectionES4.ES4Reg # 250
        REG_CAL_TRIM_DAC_E : ClientConnectionES4.ES4Reg # 251
        REG_CAL_NONE : ClientConnectionES4.ES4Reg # 2147483647

    Semaphore : SemaphoreSlim
    @property
    def AuxInputSelected(self) -> AuxiliaryInputType: ...
    @AuxInputSelected.setter
    def AuxInputSelected(self, value: AuxiliaryInputType) -> AuxiliaryInputType: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def BiPotCurrentRange(self) -> CurrentRange: ...
    @BiPotCurrentRange.setter
    def BiPotCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BiPotMode(self) -> Method.EnumPalmSensBipotMode: ...
    @BiPotMode.setter
    def BiPotMode(self, value: Method.EnumPalmSensBipotMode) -> Method.EnumPalmSensBipotMode: ...
    @property
    def Capabilities(self) -> DeviceCapabilities: ...
    @property
    def Device(self) -> Device: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @property
    def FSMounted(self) -> bool: ...
    @FSMounted.setter
    def FSMounted(self, value: bool) -> bool: ...
    @property
    def IsBipotOn(self) -> bool: ...
    @IsBipotOn.setter
    def IsBipotOn(self, value: bool) -> bool: ...
    @property
    def IsCellOn(self) -> bool: ...
    @IsCellOn.setter
    def IsCellOn(self, value: bool) -> bool: ...
    @property
    def LastBiPotCurrentRead(self) -> float: ...
    @property
    def LastCurrentSet(self) -> float: ...
    @LastCurrentSet.setter
    def LastCurrentSet(self, value: float) -> float: ...
    @property
    def LastPotentialSet(self) -> float: ...
    @LastPotentialSet.setter
    def LastPotentialSet(self, value: float) -> float: ...
    @property
    def PalmSensType(self) -> int: ...
    @property
    def PGStatChannel(self) -> PotentionstatChannels: ...
    @PGStatChannel.setter
    def PGStatChannel(self, value: PotentionstatChannels) -> PotentionstatChannels: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def QCount(self) -> int: ...
    @property
    def State(self) -> CommManager.DeviceState: ...
    @State.setter
    def State(self, value: CommManager.DeviceState) -> CommManager.DeviceState: ...
    @property
    def Stirrer(self) -> bool: ...
    @Stirrer.setter
    def Stirrer(self, value: bool) -> bool: ...
    @property
    def SupportedTechniques(self) -> Array_1[int]: ...
    @property
    def TaskScheduler(self) -> TaskScheduler: ...
    @TaskScheduler.setter
    def TaskScheduler(self, value: TaskScheduler) -> TaskScheduler: ...
    @property
    def VersionString(self) -> str: ...
    def EnterDownloadMode(self) -> None: ...
    def EnterDownloadModeAsync(self) -> Task: ...
    def GetDeviceSerial(self) -> DeviceSerial: ...
    def GetDeviceSerialAsync(self) -> Task_1[DeviceSerial]: ...
    def GetLicence(self) -> int: ...
    def GetLicenceAsync(self) -> Task_1[int]: ...
    def GetLicenseHWID(self) -> Array_1[int]: ...
    def GetLicenseHWIDAsync(self) -> Task_1[Array_1[int]]: ...
    def GetSupportedCommands(self) -> str: ...
    def GetSupportedCommandsAsync(self) -> Task_1[str]: ...
    def ReadDigitalLineD0(self) -> bool: ...
    def ReadDigitalLineD0Async(self) -> Task_1[bool]: ...
    def ReadEeprom(self, address: int) -> int: ...
    def ReadEepromAsync(self, address: int) -> Task_1[int]: ...
    def ReadEepromUint32(self, address: int) -> int: ...
    def ReadEepromUint32Async(self, address: int) -> Task_1[int]: ...
    def ReloadData(self) -> None: ...
    def ReloadDataAsync(self) -> Task: ...
    def SetSerial(self, serial: DeviceSerialV2) -> None: ...
    def SetSerialAsync(self, serial: DeviceSerialV2) -> Task: ...
    def WriteEeprom(self, address: int, value: int) -> None: ...
    def WriteEepromAsync(self, address: int, value: int) -> Task: ...
    def WriteEepromUint32(self, addr: int, val: int) -> None: ...
    def WriteEepromUint32Async(self, addr: int, val: int) -> Task: ...
    # Skipped ClientConnectionES4Async due to it being static, abstract and generic.

    ClientConnectionES4Async : ClientConnectionES4Async_MethodGroup
    class ClientConnectionES4Async_MethodGroup:
        @typing.overload
        def __call__(self, empty: bool, device: Device, versionString: str) -> Task_1[ClientConnectionES4]:...
        @typing.overload
        def __call__(self, device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> Task_1[ClientConnectionES4]:...

    # Skipped InitClientConnectionES4Async due to it being static, abstract and generic.

    InitClientConnectionES4Async : InitClientConnectionES4Async_MethodGroup
    class InitClientConnectionES4Async_MethodGroup:
        @typing.overload
        def __call__(self, empty: bool, device: Device, versionString: str) -> Task:...
        @typing.overload
        def __call__(self, device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> Task:...



class ClientConnectionESP(ClientConnectionMS):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> None: ...
    @typing.overload
    def __init__(self, empty: bool, device: Device, versionString: str) -> None: ...

    class ESPicoReg(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        REG_CAL_DO_AUTO_CAL : ClientConnectionESP.ESPicoReg # 131
        REG_LSTIA_10M_CH0_GAIN : ClientConnectionESP.ESPicoReg # 160
        REG_LSTIA_10M_CH0_OFFSET : ClientConnectionESP.ESPicoReg # 161
        REG_LSTIA_10M_CH1_GAIN : ClientConnectionESP.ESPicoReg # 162
        REG_LSTIA_10M_CH1_OFFSET : ClientConnectionESP.ESPicoReg # 163
        REG_HSTIA_10M_GAIN : ClientConnectionESP.ESPicoReg # 164
        REG_HSTIA_10M_OFFSET : ClientConnectionESP.ESPicoReg # 165
        REG_HSTIA_1M_GAIN : ClientConnectionESP.ESPicoReg # 166
        REG_HSTIA_1M_OFFSET : ClientConnectionESP.ESPicoReg # 167

    Semaphore : SemaphoreSlim
    @property
    def AuxInputSelected(self) -> AuxiliaryInputType: ...
    @AuxInputSelected.setter
    def AuxInputSelected(self, value: AuxiliaryInputType) -> AuxiliaryInputType: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def BiPotCurrentRange(self) -> CurrentRange: ...
    @BiPotCurrentRange.setter
    def BiPotCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BiPotMode(self) -> Method.EnumPalmSensBipotMode: ...
    @BiPotMode.setter
    def BiPotMode(self, value: Method.EnumPalmSensBipotMode) -> Method.EnumPalmSensBipotMode: ...
    @property
    def Capabilities(self) -> DeviceCapabilities: ...
    @property
    def Device(self) -> Device: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @property
    def FSMounted(self) -> bool: ...
    @FSMounted.setter
    def FSMounted(self, value: bool) -> bool: ...
    @property
    def IsBipotOn(self) -> bool: ...
    @IsBipotOn.setter
    def IsBipotOn(self, value: bool) -> bool: ...
    @property
    def IsCellOn(self) -> bool: ...
    @IsCellOn.setter
    def IsCellOn(self, value: bool) -> bool: ...
    @property
    def LastBiPotCurrentRead(self) -> float: ...
    @property
    def LastCurrentSet(self) -> float: ...
    @LastCurrentSet.setter
    def LastCurrentSet(self, value: float) -> float: ...
    @property
    def LastPotentialSet(self) -> float: ...
    @LastPotentialSet.setter
    def LastPotentialSet(self, value: float) -> float: ...
    @property
    def PalmSensType(self) -> int: ...
    @property
    def PGStatChannel(self) -> PotentionstatChannels: ...
    @PGStatChannel.setter
    def PGStatChannel(self, value: PotentionstatChannels) -> PotentionstatChannels: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def QCount(self) -> int: ...
    @property
    def State(self) -> CommManager.DeviceState: ...
    @State.setter
    def State(self, value: CommManager.DeviceState) -> CommManager.DeviceState: ...
    @property
    def Stirrer(self) -> bool: ...
    @Stirrer.setter
    def Stirrer(self, value: bool) -> bool: ...
    @property
    def SupportedTechniques(self) -> Array_1[int]: ...
    @property
    def TaskScheduler(self) -> TaskScheduler: ...
    @TaskScheduler.setter
    def TaskScheduler(self, value: TaskScheduler) -> TaskScheduler: ...
    @property
    def VersionString(self) -> str: ...
    def EnableStirrer(self, val: bool) -> None: ...
    def GetDeviceSerial(self) -> DeviceSerial: ...
    def GetDeviceSerialAsync(self) -> Task_1[DeviceSerial]: ...
    def GetLicence(self) -> int: ...
    def GetLicenceAsync(self) -> Task_1[int]: ...
    def GetLicenseHWID(self) -> Array_1[int]: ...
    def GetLicenseHWIDAsync(self) -> Task_1[Array_1[int]]: ...
    def GetSupportedCommands(self) -> str: ...
    def GetSupportedCommandsAsync(self) -> Task_1[str]: ...
    def ReadEeprom(self, address: int) -> int: ...
    def ReadEepromAsync(self, address: int) -> Task_1[int]: ...
    def ReadEepromUint32(self, address: int) -> int: ...
    def ReadEepromUint32Async(self, address: int) -> Task_1[int]: ...
    def ReadMuxInfo(self) -> None: ...
    def ReadMuxInfoAsync(self) -> Task: ...
    def ReloadData(self) -> None: ...
    def ReloadDataAsync(self) -> Task: ...
    def SetExternalOutput(self, val: float) -> None: ...
    def SetExternalOutputAsync(self, val: float) -> Task: ...
    def SetInternalStorageGPIOConfig(self) -> None: ...
    def SetInternalStorageGPIOConfigAsync(self) -> Task: ...
    def SetSerial(self, serial: DeviceSerialV2) -> None: ...
    def SetSerialAsync(self, serial: DeviceSerialV2) -> Task: ...
    def WriteEeprom(self, address: int, value: int) -> None: ...
    def WriteEepromAsync(self, address: int, value: int) -> Task: ...
    def WriteEepromUint32(self, addr: int, val: int) -> None: ...
    def WriteEepromUint32Async(self, addr: int, val: int) -> Task: ...
    # Skipped ClientConnectionESPAsync due to it being static, abstract and generic.

    ClientConnectionESPAsync : ClientConnectionESPAsync_MethodGroup
    class ClientConnectionESPAsync_MethodGroup:
        @typing.overload
        def __call__(self, empty: bool, device: Device, versionString: str) -> Task_1[ClientConnectionESP]:...
        @typing.overload
        def __call__(self, device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> Task_1[ClientConnectionESP]:...

    # Skipped InitClientConnectionESPAsync due to it being static, abstract and generic.

    InitClientConnectionESPAsync : InitClientConnectionESPAsync_MethodGroup
    class InitClientConnectionESPAsync_MethodGroup:
        @typing.overload
        def __call__(self, empty: bool, device: Device, versionString: str) -> Task:...
        @typing.overload
        def __call__(self, device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> Task:...



class ClientConnectionMS(ClientConnection):
    def __init__(self, empty: bool, device: Device, versionString: str) -> None: ...

    class MSDeviceReg(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        REG_NONE : ClientConnectionMS.MSDeviceReg # 0
        REG_CFG : ClientConnectionMS.MSDeviceReg # 1
        REG_PERMISSION : ClientConnectionMS.MSDeviceReg # 2
        REG_LICENCE : ClientConnectionMS.MSDeviceReg # 4
        REG_UUID : ClientConnectionMS.MSDeviceReg # 5
        REG_SERIAL : ClientConnectionMS.MSDeviceReg # 6
        REG_HW_REV : ClientConnectionMS.MSDeviceReg # 7
        REG_MSCR_AUTORUN : ClientConnectionMS.MSDeviceReg # 8
        REG_OPT_BITS : ClientConnectionMS.MSDeviceReg # 9
        REG_MAX_DATARATE : ClientConnectionMS.MSDeviceReg # 10
        REG_RESET : ClientConnectionMS.MSDeviceReg # 11
        REG_RUNTIME_CFG : ClientConnectionMS.MSDeviceReg # 12
        REG_MULTIDEVICE : ClientConnectionMS.MSDeviceReg # 13
        REG_DATE_TIME : ClientConnectionMS.MSDeviceReg # 14
        REG_GPIO_DEFAULT : ClientConnectionMS.MSDeviceReg # 15
        REG_SYSTEM_WARN : ClientConnectionMS.MSDeviceReg # 16
        REG_IO_ALLOWED_CFG : ClientConnectionMS.MSDeviceReg # 17
        REG_GIT_HASH : ClientConnectionMS.MSDeviceReg # 127

    MeasureAuxInIdlePackages : bool
    Semaphore : SemaphoreSlim
    @property
    def AuxInputSelected(self) -> AuxiliaryInputType: ...
    @AuxInputSelected.setter
    def AuxInputSelected(self, value: AuxiliaryInputType) -> AuxiliaryInputType: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def BiPotCurrentRange(self) -> CurrentRange: ...
    @BiPotCurrentRange.setter
    def BiPotCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BiPotMode(self) -> Method.EnumPalmSensBipotMode: ...
    @BiPotMode.setter
    def BiPotMode(self, value: Method.EnumPalmSensBipotMode) -> Method.EnumPalmSensBipotMode: ...
    @property
    def Capabilities(self) -> DeviceCapabilities: ...
    @property
    def Device(self) -> Device: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @property
    def FSMounted(self) -> bool: ...
    @FSMounted.setter
    def FSMounted(self, value: bool) -> bool: ...
    @classmethod
    @property
    def IdlePacketIntervalTimeMilliseconds(cls) -> float: ...
    @classmethod
    @IdlePacketIntervalTimeMilliseconds.setter
    def IdlePacketIntervalTimeMilliseconds(cls, value: float) -> float: ...
    @property
    def IsBipotOn(self) -> bool: ...
    @IsBipotOn.setter
    def IsBipotOn(self, value: bool) -> bool: ...
    @property
    def IsCellOn(self) -> bool: ...
    @IsCellOn.setter
    def IsCellOn(self, value: bool) -> bool: ...
    @property
    def LastBiPotCurrentRead(self) -> float: ...
    @property
    def LastCurrentSet(self) -> float: ...
    @LastCurrentSet.setter
    def LastCurrentSet(self, value: float) -> float: ...
    @property
    def LastPotentialSet(self) -> float: ...
    @LastPotentialSet.setter
    def LastPotentialSet(self, value: float) -> float: ...
    @property
    def PalmSensType(self) -> int: ...
    @property
    def PGStatChannel(self) -> PotentionstatChannels: ...
    @PGStatChannel.setter
    def PGStatChannel(self, value: PotentionstatChannels) -> PotentionstatChannels: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def QCount(self) -> int: ...
    @property
    def State(self) -> CommManager.DeviceState: ...
    @State.setter
    def State(self, value: CommManager.DeviceState) -> CommManager.DeviceState: ...
    @property
    def Stirrer(self) -> bool: ...
    @Stirrer.setter
    def Stirrer(self, value: bool) -> bool: ...
    @property
    def SupportedTechniques(self) -> Array_1[int]: ...
    @property
    def TaskScheduler(self) -> TaskScheduler: ...
    @TaskScheduler.setter
    def TaskScheduler(self, value: TaskScheduler) -> TaskScheduler: ...
    @property
    def VersionString(self) -> str: ...
    def CalibrateAsync(self) -> Task: ...
    def CalibrateResultAsync(self) -> Task_1[Array_1[float]]: ...
    def CheckDeviceStatus(self, errorStr: clr.Reference[str]) -> bool: ...
    def CheckDeviceStatusAsync(self) -> Task_1[str]: ...
    def ClearDeviceFiles(self) -> None: ...
    def ClearDeviceFilesAsync(self) -> Task: ...
    def DeleteDeviceFile(self, filePath: str) -> None: ...
    def DeleteDeviceFileAsync(self, filePath: str) -> Task: ...
    def DisableIdleWhileCellOff(self, disable: bool) -> None: ...
    def EnableStirrer(self, val: bool) -> None: ...
    def EnableStirrerAsync(self, val: bool) -> Task: ...
    def EnterDownloadMode(self) -> None: ...
    def EnterDownloadModeAsync(self) -> Task: ...
    def FormatDeviceFS(self, timeout_ms: int = ...) -> None: ...
    def FormatDeviceFSAsync(self, timeout_ms: int = ...) -> Task: ...
    def GetAutoRunAsync(self) -> Task_1[bool]: ...
    def GetAutoRunState(self) -> bool: ...
    def GetCurrentMethod(self) -> str: ...
    def GetCurrentMethodAsync(self) -> Task_1[str]: ...
    def GetDeviceFile(self, filePath: str) -> DeviceFile: ...
    def GetDeviceFileAsync(self, filePath: str) -> Task_1[DeviceFile]: ...
    def GetDeviceFiles(self, dir: str) -> List_1[DeviceFile]: ...
    def GetDeviceFilesAsync(self, dir: str) -> Task_1[List_1[DeviceFile]]: ...
    def GetDeviceFree(self) -> int: ...
    def GetDeviceFreeAsync(self) -> Task_1[int]: ...
    def GetDeviceSize(self) -> int: ...
    def GetDeviceSizeAsync(self) -> Task_1[int]: ...
    def GetFWCommitHash(self) -> str: ...
    def GetFWCommitHashAsync(self) -> Task_1[str]: ...
    def GetMode(self) -> int: ...
    def GetModeAsync(self) -> Task_1[int]: ...
    def GetPowerStatus(self) -> PowerStatus: ...
    def GetReg(self, reg: int) -> Array_1[int]: ...
    def GetRegAsync(self, reg: int) -> Task_1[Array_1[int]]: ...
    def GetSupportedTechniques(self) -> str: ...
    def GetSupportedTechniquesAsync(self) -> Task_1[str]: ...
    def GetSupportedTechniquesAsyncMS(self) -> Task_1[Array_1[int]]: ...
    def GetSupportedTechniquesMS(self) -> Array_1[int]: ...
    def GetSupportedTechniquesMSAsync(self) -> Task_1[Array_1[int]]: ...
    def LoadDeviceFile(self, file: DeviceFile) -> Measurement: ...
    def Measure(self, clonedMethod: Method, channel: int, muxchannel: int, measType: MeasType) -> ActiveMeasurement: ...
    def MeasureAsync(self, clonedMethod: Method, channel: int, muxchannel: int, measType: MeasType, taskBarrier: TaskBarrier = ...) -> Task_1[ActiveMeasurement]: ...
    def MountFS(self) -> None: ...
    def MountFSAsync(self) -> Task: ...
    def ProcessData(self) -> None: ...
    def ProcessDataAsync(self) -> Task: ...
    def ReadAnalogInput(self, ain: int = ...) -> float: ...
    def ReadAnalogInputAsync(self, ain: int = ...) -> Task_1[float]: ...
    def ReadAuxDigitalIn(self) -> int: ...
    def ReadAuxDigitalInAsync(self) -> Task_1[int]: ...
    def ReadBiPotCurrent(self) -> float: ...
    def ReadBiPotCurrentAsync(self) -> Task_1[float]: ...
    def ReadCurrent(self) -> float: ...
    def ReadCurrentAsync(self) -> Task_1[float]: ...
    def ReadDigitalLine(self, bitmask: int) -> int: ...
    def ReadDigitalLineAsync(self, bitmask: int) -> Task_1[int]: ...
    def ReadDigitalLineD0(self) -> bool: ...
    def ReadDigitalLineD0Async(self) -> Task_1[bool]: ...
    def ReadDigitalLineD1(self) -> bool: ...
    def ReadMuxInfo(self) -> None: ...
    def ReadMuxInfoAsync(self) -> Task: ...
    def ReadPotential(self) -> float: ...
    def ReadPotentialAsync(self) -> Task_1[float]: ...
    def Reset(self) -> None: ...
    def ResetAsync(self) -> Task: ...
    def SendModeCellStateRanges(self, mode: EnumMode, cellOn: bool, cr: CurrentRange, pr: PotentialRange = ...) -> None: ...
    def SendModeCellStateRangesAsync(self, mode: EnumMode, cellOn: bool, cr: CurrentRange, pr: PotentialRange = ...) -> Task: ...
    def SetAutoRun(self, autoRun: bool) -> None: ...
    def SetAutoRunAsync(self, autoRun: bool) -> Task: ...
    def SetBandwidth(self, bandwidth: float) -> None: ...
    def SetBiPotOff(self) -> None: ...
    def SetBiPotOffAsync(self) -> Task: ...
    def SetBiPotOnAndCR(self, cr: CurrentRange) -> None: ...
    def SetBiPotOnAndCRAsync(self, cr: CurrentRange) -> Task: ...
    def SetBiPotPotential(self, val: float) -> None: ...
    def SetBiPotPotentialAsync(self, val: float) -> Task: ...
    def SetCommMode(self, mode: ClientConnection.CommMode) -> None: ...
    def SetCommModeAsync(self, mode: ClientConnection.CommMode) -> Task: ...
    def SetCurrent(self, val: float) -> None: ...
    def SetCurrentAsync(self, val: float) -> Task: ...
    def SetDataRateSpeed(self, decValue: int) -> None: ...
    def SetDataRateSpeedAsync(self, decValue: int) -> Task: ...
    def SetDateTime(self, year: int, month: int, day: int, hour: int, min: int, sec: int) -> None: ...
    def SetDateTimeAsync(self, year: int, month: int, day: int, hour: int, min: int, sec: int) -> Task: ...
    def SetExternalOutput(self, val: float) -> None: ...
    def SetExternalOutputAsync(self, val: float) -> Task: ...
    def SetMDAC(self, fac: float) -> None: ...
    def SetMDACAsync(self, fac: float) -> Task: ...
    def SetMode(self, value: int) -> None: ...
    def SetModeAsync(self, value: int) -> Task: ...
    def SetMuxChannel(self, val: int) -> None: ...
    def SetMuxChannelAsync(self, val: int) -> Task: ...
    def SetMuxSettings(self, type: MuxType, sett: Method.MuxSettings) -> None: ...
    def SetMuxSettingsAsync(self, type: MuxType, sett: Method.MuxSettings) -> Task: ...
    def SetPGStatMode(self, mode: MethodScript.PGStatModes) -> None: ...
    def SetPGStatModeAsync(self, mode: MethodScript.PGStatModes) -> Task: ...
    def SetPotential(self, val: float) -> None: ...
    def SetPotentialAsync(self, val: float) -> Task: ...
    def SetPotentialNoRange(self, val: float) -> None: ...
    def SetPotentialOffset1V(self, val: bool) -> None: ...
    def SetPotentialOffset1VAsync(self, val: bool) -> Task: ...
    def SetPSBiPotMode(self, mode: Method.EnumPalmSensBipotMode) -> None: ...
    def SetPSBiPotModeAsync(self, mode: Method.EnumPalmSensBipotMode) -> Task: ...
    def SetSineFreq(self, p: float) -> None: ...
    def SetSineFreqAsync(self, p: float) -> Task: ...
    def StartGetterMethodScript(self, methodScript: str, resultTimeOut: int = ..., throwExceptionsDirectly: bool = ..., responseTimeOut: int = ...) -> str: ...
    def StartGetterMethodScriptAsync(self, methodScript: str, resultTimeOut: int = ..., throwExceptionsDirectly: bool = ..., responseTimeOut: int = ...) -> Task_1[str]: ...
    def StartSetterMethodScript(self, methodScript: str, timeOut: int = ...) -> None: ...
    def StartSetterMethodScriptAsync(self, methodScript: str, timeOut: int = ...) -> Task: ...
    def TryGetSupportedDigitalLineModes(self, inputMask: clr.Reference[int], outputMask: clr.Reference[int]) -> bool: ...
    def TryGetSupportedDigitalLineModesAsync(self) -> Task_1[ValueTuple_3[bool, int, int]]: ...
    def UnMountFS(self) -> None: ...
    def UnMountFSAsync(self) -> Task: ...
    def WriteDeviceFile(self, path: str, file: str) -> None: ...
    def WriteDeviceFileAsync(self, path: str, file: str) -> Task: ...
    # Skipped Calibrate due to it being static, abstract and generic.

    Calibrate : Calibrate_MethodGroup
    class Calibrate_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, offset: clr.Reference[Array_1[float]]) -> None:...

    # Skipped GetValueFromSubPackage due to it being static, abstract and generic.

    GetValueFromSubPackage : GetValueFromSubPackage_MethodGroup
    class GetValueFromSubPackage_MethodGroup:
        @typing.overload
        def __call__(self, pck: str, length: int, value: clr.Reference[float], factor: int = ...) -> bool:...
        @typing.overload
        def __call__(self, pck: str, length: int, value: clr.Reference[float], rawValue: clr.Reference[int], factor: int = ...) -> bool:...

    # Skipped SetDigitalOutput due to it being static, abstract and generic.

    SetDigitalOutput : SetDigitalOutput_MethodGroup
    class SetDigitalOutput_MethodGroup:
        @typing.overload
        def __call__(self, bitmask: int) -> None:...
        @typing.overload
        def __call__(self, bitmask: int, configGPIO: int) -> None:...

    # Skipped SetDigitalOutputAsync due to it being static, abstract and generic.

    SetDigitalOutputAsync : SetDigitalOutputAsync_MethodGroup
    class SetDigitalOutputAsync_MethodGroup:
        @typing.overload
        def __call__(self, bitmask: int) -> Task:...
        @typing.overload
        def __call__(self, bitmask: int, configGPIO: int) -> Task:...

    # Skipped SetPGStatChannel due to it being static, abstract and generic.

    SetPGStatChannel : SetPGStatChannel_MethodGroup
    class SetPGStatChannel_MethodGroup:
        @typing.overload
        def __call__(self, channel: int) -> None:...
        @typing.overload
        def __call__(self, channel: PotentionstatChannels) -> None:...

    # Skipped SetPGStatChannelAsync due to it being static, abstract and generic.

    SetPGStatChannelAsync : SetPGStatChannelAsync_MethodGroup
    class SetPGStatChannelAsync_MethodGroup:
        @typing.overload
        def __call__(self, channel: int) -> Task:...
        @typing.overload
        def __call__(self, channel: PotentionstatChannels) -> Task:...

    # Skipped SetReg due to it being static, abstract and generic.

    SetReg : SetReg_MethodGroup
    class SetReg_MethodGroup:
        @typing.overload
        def __call__(self, reg: int, code: int, timeout: int = ...) -> None:...
        # Method SetReg(reg : Byte, code : UInt32, timeout : Int64) was skipped since it collides with above method
        # Method SetReg(reg : Byte, code : UInt64, timeout : Int64) was skipped since it collides with above method
        @typing.overload
        def __call__(self, reg: int, code: Array_1[int], timeout: int = ...) -> None:...

    # Skipped SetRegAsync due to it being static, abstract and generic.

    SetRegAsync : SetRegAsync_MethodGroup
    class SetRegAsync_MethodGroup:
        @typing.overload
        def __call__(self, reg: int, code: int, timeout: int = ...) -> Task:...
        # Method SetRegAsync(reg : Byte, code : UInt32, timeout : Int64) was skipped since it collides with above method
        # Method SetRegAsync(reg : Byte, code : UInt64, timeout : Int64) was skipped since it collides with above method
        @typing.overload
        def __call__(self, reg: int, code: Array_1[int], timeout: int = ...) -> Task:...



class ClientConnectionNexus(ClientConnectionMS):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> None: ...
    @typing.overload
    def __init__(self, empty: bool, device: Device, versionString: str) -> None: ...

    class NexusReg(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        REG_CFG : ClientConnectionNexus.NexusReg # 1
        REG_PERMISSION : ClientConnectionNexus.NexusReg # 2
        REG_LICENCE : ClientConnectionNexus.NexusReg # 4
        REG_UUID : ClientConnectionNexus.NexusReg # 5
        REG_SERIAL : ClientConnectionNexus.NexusReg # 6
        REG_HW_REV : ClientConnectionNexus.NexusReg # 7
        REG_MSCR_AUTORUN : ClientConnectionNexus.NexusReg # 8
        REG_OPT_BITS : ClientConnectionNexus.NexusReg # 9
        REG_MAX_DATARATE : ClientConnectionNexus.NexusReg # 10
        REG_RESET : ClientConnectionNexus.NexusReg # 11
        REG_RUNTIME_CFG : ClientConnectionNexus.NexusReg # 12
        REG_MULTIDEVICE : ClientConnectionNexus.NexusReg # 13
        REG_DATE_TIME : ClientConnectionNexus.NexusReg # 14
        REG_GPIO_DEFAULT : ClientConnectionNexus.NexusReg # 15
        REG_SYSTEM_WARN : ClientConnectionNexus.NexusReg # 16
        REG_FREQ_COMP_FIRST_ADDR : ClientConnectionNexus.NexusReg # 80
        REG_FREQ_COMP_ACQ_I_GAIN_1 : ClientConnectionNexus.NexusReg # 80
        REG_FREQ_COMP_ACQ_I_GAIN_10 : ClientConnectionNexus.NexusReg # 81
        REG_FREQ_COMP_ACQ_I_GAIN_100 : ClientConnectionNexus.NexusReg # 82
        REG_FREQ_COMP_ACQ_I_GAIN_1000 : ClientConnectionNexus.NexusReg # 83
        REG_FREQ_COMP_ACQ_E_GAIN_1 : ClientConnectionNexus.NexusReg # 84
        REG_FREQ_COMP_ACQ_E_GAIN_10 : ClientConnectionNexus.NexusReg # 85
        REG_FREQ_COMP_ACQ_E_GAIN_100 : ClientConnectionNexus.NexusReg # 86
        REG_FREQ_COMP_ACQ_E_GAIN_1000 : ClientConnectionNexus.NexusReg # 87
        REG_FREQ_COMP_ACQ_3_GAIN_1 : ClientConnectionNexus.NexusReg # 88
        REG_FREQ_COMP_ACQ_3_GAIN_10 : ClientConnectionNexus.NexusReg # 89
        REG_FREQ_COMP_ACQ_3_GAIN_100 : ClientConnectionNexus.NexusReg # 90
        REG_FREQ_COMP_ACQ_3_GAIN_1000 : ClientConnectionNexus.NexusReg # 91
        REG_FREQ_COMP_CF_RES_2G : ClientConnectionNexus.NexusReg # 92
        REG_FREQ_COMP_CF_RES_200M : ClientConnectionNexus.NexusReg # 93
        REG_FREQ_COMP_CF_RES_20M : ClientConnectionNexus.NexusReg # 94
        REG_FREQ_COMP_CF_RES_2M : ClientConnectionNexus.NexusReg # 95
        REG_FREQ_COMP_CF_RES_200k : ClientConnectionNexus.NexusReg # 96
        REG_FREQ_COMP_CF_RES_20k : ClientConnectionNexus.NexusReg # 97
        REG_FREQ_COMP_CF_RES_2k : ClientConnectionNexus.NexusReg # 98
        REG_FREQ_COMP_CF_RES_200 : ClientConnectionNexus.NexusReg # 99
        REG_FREQ_COMP_CF_RES_100_SHUNT : ClientConnectionNexus.NexusReg # 100
        REG_FREQ_COMP_CF_RES_10_SHUNT : ClientConnectionNexus.NexusReg # 101
        REG_FREQ_COMP_CF_RES_1_SHUNT : ClientConnectionNexus.NexusReg # 102
        REG_FREQ_COMP_CF_RES_100m_SHUNT : ClientConnectionNexus.NexusReg # 103
        REG_FREQ_COMP_BIPOT_CF_RES_1G : ClientConnectionNexus.NexusReg # 104
        REG_FREQ_COMP_BIPOT_CF_RES_100M : ClientConnectionNexus.NexusReg # 105
        REG_FREQ_COMP_BIPOT_CF_RES_10M : ClientConnectionNexus.NexusReg # 106
        REG_FREQ_COMP_BIPOT_CF_RES_1M : ClientConnectionNexus.NexusReg # 107
        REG_FREQ_COMP_BIPOT_CF_RES_100k : ClientConnectionNexus.NexusReg # 108
        REG_FREQ_COMP_BIPOT_CF_RES_10k : ClientConnectionNexus.NexusReg # 109
        REG_FREQ_COMP_BIPOT_CF_RES_1k : ClientConnectionNexus.NexusReg # 110
        REG_FREQ_COMP_BIPOT_CF_RES_100 : ClientConnectionNexus.NexusReg # 111
        REG_FREQ_COMP_SECOND_SENSE : ClientConnectionNexus.NexusReg # 112
        REG_FREQ_COMP_ELECTROMETER : ClientConnectionNexus.NexusReg # 113
        REG_FREQ_COMP_TEST_CELL_RANDAL : ClientConnectionNexus.NexusReg # 122
        REG_FREQ_COMP_TEST_CELL_100M : ClientConnectionNexus.NexusReg # 123
        REG_FREQ_COMP_TEST_CELL_1M : ClientConnectionNexus.NexusReg # 124
        REG_FREQ_COMP_TEST_CELL_10k : ClientConnectionNexus.NexusReg # 125
        REG_FREQ_COMP_TEST_CELL_100 : ClientConnectionNexus.NexusReg # 126
        REG_FREQ_COMP_LAST_ADDR : ClientConnectionNexus.NexusReg # 126
        REG_EEPROM_FORMAT : ClientConnectionNexus.NexusReg # 128
        REG_FACTORY_RESTORE : ClientConnectionNexus.NexusReg # 129
        REG_MAC_ADDRESS : ClientConnectionNexus.NexusReg # 130
        REG_EEPROM_DELETE : ClientConnectionNexus.NexusReg # 131
        REG_CAL_COMMIT : ClientConnectionNexus.NexusReg # 132
        REG_IP_ADDRESS : ClientConnectionNexus.NexusReg # 133
        REG_SELF_CAL : ClientConnectionNexus.NexusReg # 136
        REG_CF_RES : ClientConnectionNexus.NexusReg # 144
        REG_CF_CAP : ClientConnectionNexus.NexusReg # 145
        REG_ACQ_I_GAIN : ClientConnectionNexus.NexusReg # 146
        REG_ACQ_E_GAIN : ClientConnectionNexus.NexusReg # 147
        REG_ACQ_3_GAIN : ClientConnectionNexus.NexusReg # 148
        REG_SP_GAIN : ClientConnectionNexus.NexusReg # 149
        REG_DC_DAC_RANGE : ClientConnectionNexus.NexusReg # 150
        REG_IRCOMP_CAP : ClientConnectionNexus.NexusReg # 151
        REG_GSTAB_RES : ClientConnectionNexus.NexusReg # 152
        REG_ACQ_I_TRIM : ClientConnectionNexus.NexusReg # 153
        REG_ACQ_E_TRIM : ClientConnectionNexus.NexusReg # 154
        REG_ACQ_3_TRIM : ClientConnectionNexus.NexusReg # 155
        REG_BIPOT_CF_RES : ClientConnectionNexus.NexusReg # 156
        REG_BIPOT_CF_CAP : ClientConnectionNexus.NexusReg # 157
        REG_CAL_FIRST_ADDR : ClientConnectionNexus.NexusReg # 176
        REG_CAL_CF_RES_2G : ClientConnectionNexus.NexusReg # 176
        REG_CAL_CF_RES_200M : ClientConnectionNexus.NexusReg # 177
        REG_CAL_CF_RES_20M : ClientConnectionNexus.NexusReg # 178
        REG_CAL_CF_RES_2M : ClientConnectionNexus.NexusReg # 179
        REG_CAL_CF_RES_200k : ClientConnectionNexus.NexusReg # 180
        REG_CAL_CF_RES_20k : ClientConnectionNexus.NexusReg # 181
        REG_CAL_CF_RES_2k : ClientConnectionNexus.NexusReg # 182
        REG_CAL_CF_RES_200 : ClientConnectionNexus.NexusReg # 183
        REG_CAL_CF_RES_100_SHUNT : ClientConnectionNexus.NexusReg # 184
        REG_CAL_CF_RES_10_SHUNT : ClientConnectionNexus.NexusReg # 185
        REG_CAL_CF_RES_1_SHUNT : ClientConnectionNexus.NexusReg # 186
        REG_CAL_CF_RES_100m_SHUNT : ClientConnectionNexus.NexusReg # 187
        REG_CAL_BIPOT_CF_RES_1G : ClientConnectionNexus.NexusReg # 188
        REG_CAL_BIPOT_CF_RES_100M : ClientConnectionNexus.NexusReg # 189
        REG_CAL_BIPOT_CF_RES_10M : ClientConnectionNexus.NexusReg # 190
        REG_CAL_BIPOT_CF_RES_1M : ClientConnectionNexus.NexusReg # 191
        REG_CAL_BIPOT_CF_RES_100k : ClientConnectionNexus.NexusReg # 192
        REG_CAL_BIPOT_CF_RES_10k : ClientConnectionNexus.NexusReg # 193
        REG_CAL_BIPOT_CF_RES_1k : ClientConnectionNexus.NexusReg # 194
        REG_CAL_BIPOT_CF_RES_100 : ClientConnectionNexus.NexusReg # 195
        REG_CAL_ACQ_I_GAIN_1 : ClientConnectionNexus.NexusReg # 196
        REG_CAL_ACQ_I_GAIN_10 : ClientConnectionNexus.NexusReg # 197
        REG_CAL_ACQ_I_GAIN_100 : ClientConnectionNexus.NexusReg # 198
        REG_CAL_ACQ_I_GAIN_1000 : ClientConnectionNexus.NexusReg # 199
        REG_CAL_ACQ_E_GAIN_1 : ClientConnectionNexus.NexusReg # 200
        REG_CAL_ACQ_E_GAIN_10 : ClientConnectionNexus.NexusReg # 201
        REG_CAL_ACQ_E_GAIN_100 : ClientConnectionNexus.NexusReg # 202
        REG_CAL_ACQ_E_GAIN_1000 : ClientConnectionNexus.NexusReg # 203
        REG_CAL_ACQ_3_GAIN_1 : ClientConnectionNexus.NexusReg # 204
        REG_CAL_ACQ_3_GAIN_10 : ClientConnectionNexus.NexusReg # 205
        REG_CAL_ACQ_3_GAIN_100 : ClientConnectionNexus.NexusReg # 206
        REG_CAL_ACQ_3_GAIN_1000 : ClientConnectionNexus.NexusReg # 207
        REG_CAL_DC_DAC_2500m : ClientConnectionNexus.NexusReg # 208
        REG_CAL_DC_DAC_5 : ClientConnectionNexus.NexusReg # 209
        REG_CAL_DC_DAC_10 : ClientConnectionNexus.NexusReg # 210
        REG_CAL_GSTAT_FEEDBACK : ClientConnectionNexus.NexusReg # 211
        REG_CAL_SETPOINT_1 : ClientConnectionNexus.NexusReg # 212
        REG_CAL_SETPOINT_100m : ClientConnectionNexus.NexusReg # 213
        REG_CAL_ELECTROMETER : ClientConnectionNexus.NexusReg # 214
        REG_CAL_CE : ClientConnectionNexus.NexusReg # 215
        REG_CAL_AUX_UC_ADC : ClientConnectionNexus.NexusReg # 216
        REG_CAL_AUX_ACQ : ClientConnectionNexus.NexusReg # 217
        REG_CAL_AUX_DAC : ClientConnectionNexus.NexusReg # 218
        REG_CAL_UC_DAC : ClientConnectionNexus.NexusReg # 219
        REG_CAL_SINE_WAVE_GEN : ClientConnectionNexus.NexusReg # 220
        REG_CAL_SQUARE_WAVE_GEN : ClientConnectionNexus.NexusReg # 221
        REG_CAL_IR_COMP : ClientConnectionNexus.NexusReg # 222
        REG_CAL_BIPOT_DAC_RE : ClientConnectionNexus.NexusReg # 224
        REG_CAL_BIPOT_DAC_S : ClientConnectionNexus.NexusReg # 225
        REG_CAL_SECOND_SENSE_RE : ClientConnectionNexus.NexusReg # 226
        REG_CAL_SECOND_SENSE_S : ClientConnectionNexus.NexusReg # 227
        REG_CAL_ACQ_TRIM_I_GAIN_1 : ClientConnectionNexus.NexusReg # 228
        REG_CAL_ACQ_TRIM_I_GAIN_10 : ClientConnectionNexus.NexusReg # 229
        REG_CAL_ACQ_TRIM_I_GAIN_100 : ClientConnectionNexus.NexusReg # 230
        REG_CAL_ACQ_TRIM_I_GAIN_1000 : ClientConnectionNexus.NexusReg # 231
        REG_CAL_ACQ_TRIM_E_GAIN_1 : ClientConnectionNexus.NexusReg # 232
        REG_CAL_ACQ_TRIM_E_GAIN_10 : ClientConnectionNexus.NexusReg # 233
        REG_CAL_ACQ_TRIM_E_GAIN_100 : ClientConnectionNexus.NexusReg # 234
        REG_CAL_ACQ_TRIM_E_GAIN_1000 : ClientConnectionNexus.NexusReg # 235
        REG_CAL_ACQ_TRIM_3_GAIN_1 : ClientConnectionNexus.NexusReg # 236
        REG_CAL_ACQ_TRIM_3_GAIN_10 : ClientConnectionNexus.NexusReg # 237
        REG_CAL_ACQ_TRIM_3_GAIN_100 : ClientConnectionNexus.NexusReg # 238
        REG_CAL_ACQ_TRIM_3_GAIN_1000 : ClientConnectionNexus.NexusReg # 239
        REG_CAL_LAST_ADDR : ClientConnectionNexus.NexusReg # 249
        REG_CAL_TEST_CELL_FIRST : ClientConnectionNexus.NexusReg # 250
        REG_CAL_TEST_CELL_RANDAL : ClientConnectionNexus.NexusReg # 250
        REG_CAL_TEST_CELL_100M : ClientConnectionNexus.NexusReg # 251
        REG_CAL_TEST_CELL_1M : ClientConnectionNexus.NexusReg # 252
        REG_CAL_TEST_CELL_10k : ClientConnectionNexus.NexusReg # 253
        REG_CAL_TEST_CELL_100 : ClientConnectionNexus.NexusReg # 254
        REG_CAL_TEST_CELL_LAST : ClientConnectionNexus.NexusReg # 254

    Semaphore : SemaphoreSlim
    @property
    def AuxInputSelected(self) -> AuxiliaryInputType: ...
    @AuxInputSelected.setter
    def AuxInputSelected(self, value: AuxiliaryInputType) -> AuxiliaryInputType: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def BiPotCurrentRange(self) -> CurrentRange: ...
    @BiPotCurrentRange.setter
    def BiPotCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BiPotMode(self) -> Method.EnumPalmSensBipotMode: ...
    @BiPotMode.setter
    def BiPotMode(self, value: Method.EnumPalmSensBipotMode) -> Method.EnumPalmSensBipotMode: ...
    @property
    def Capabilities(self) -> DeviceCapabilities: ...
    @property
    def Device(self) -> Device: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @property
    def FSMounted(self) -> bool: ...
    @FSMounted.setter
    def FSMounted(self, value: bool) -> bool: ...
    @property
    def IsBipotOn(self) -> bool: ...
    @IsBipotOn.setter
    def IsBipotOn(self, value: bool) -> bool: ...
    @property
    def IsCellOn(self) -> bool: ...
    @IsCellOn.setter
    def IsCellOn(self, value: bool) -> bool: ...
    @property
    def LastBiPotCurrentRead(self) -> float: ...
    @property
    def LastCurrentSet(self) -> float: ...
    @LastCurrentSet.setter
    def LastCurrentSet(self, value: float) -> float: ...
    @property
    def LastPotentialSet(self) -> float: ...
    @LastPotentialSet.setter
    def LastPotentialSet(self, value: float) -> float: ...
    @property
    def PalmSensType(self) -> int: ...
    @property
    def PGStatChannel(self) -> PotentionstatChannels: ...
    @PGStatChannel.setter
    def PGStatChannel(self, value: PotentionstatChannels) -> PotentionstatChannels: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def QCount(self) -> int: ...
    @property
    def State(self) -> CommManager.DeviceState: ...
    @State.setter
    def State(self, value: CommManager.DeviceState) -> CommManager.DeviceState: ...
    @property
    def Stirrer(self) -> bool: ...
    @Stirrer.setter
    def Stirrer(self, value: bool) -> bool: ...
    @property
    def SupportedTechniques(self) -> Array_1[int]: ...
    @property
    def TaskScheduler(self) -> TaskScheduler: ...
    @TaskScheduler.setter
    def TaskScheduler(self, value: TaskScheduler) -> TaskScheduler: ...
    @property
    def VersionString(self) -> str: ...
    def CheckDeviceStatusAsync(self) -> Task_1[str]: ...
    def EnterDownloadMode(self) -> None: ...
    def EnterDownloadModeAsync(self) -> Task: ...
    def GetDeviceSerial(self) -> DeviceSerial: ...
    def GetDeviceSerialAsync(self) -> Task_1[DeviceSerial]: ...
    def GetLicence(self) -> int: ...
    def GetLicenceAsync(self) -> Task_1[int]: ...
    def GetLicenseHWID(self) -> Array_1[int]: ...
    def GetLicenseHWIDAsync(self) -> Task_1[Array_1[int]]: ...
    def GetSupportedCommands(self) -> str: ...
    def GetSupportedCommandsAsync(self) -> Task_1[str]: ...
    def ReadAcqChannel(self, id: MethodScriptDeviceCapabilities.PckIDs, settlingTime: float, samplingTimeMs: int = ...) -> float: ...
    def ReadDigitalLineD0(self) -> bool: ...
    def ReadDigitalLineD0Async(self) -> Task_1[bool]: ...
    def ReadEeprom(self, address: int) -> int: ...
    def ReadEepromAsync(self, address: int) -> Task_1[int]: ...
    def ReadEepromUint32(self, address: int) -> int: ...
    def ReadEepromUint32Async(self, address: int) -> Task_1[int]: ...
    def ReadMuxInfo(self) -> None: ...
    def ReadMuxInfoAsync(self) -> Task: ...
    def ReloadData(self) -> None: ...
    def ReloadDataAsync(self) -> Task: ...
    def SendModeCellStateRanges(self, mode: EnumMode, cellOn: bool, cr: CurrentRange, pr: PotentialRange = ...) -> None: ...
    def SetMuxSettings(self, type: MuxType, sett: Method.MuxSettings) -> None: ...
    def SetMuxSettingsAsync(self, type: MuxType, sett: Method.MuxSettings) -> Task: ...
    def SetSerial(self, serial: DeviceSerialV2) -> None: ...
    def SetSerialAsync(self, serial: DeviceSerialV2) -> Task: ...
    def WriteEeprom(self, address: int, value: int) -> None: ...
    def WriteEepromAsync(self, address: int, value: int) -> Task: ...
    def WriteEepromUint32(self, addr: int, val: int) -> None: ...
    def WriteEepromUint32Async(self, addr: int, val: int) -> Task: ...
    # Skipped ClientConnectionNexusAsync due to it being static, abstract and generic.

    ClientConnectionNexusAsync : ClientConnectionNexusAsync_MethodGroup
    class ClientConnectionNexusAsync_MethodGroup:
        @typing.overload
        def __call__(self, empty: bool, device: Device, versionString: str) -> Task_1[ClientConnectionNexus]:...
        @typing.overload
        def __call__(self, device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> Task_1[ClientConnectionNexus]:...

    # Skipped InitClientConnectionNexusAsync due to it being static, abstract and generic.

    InitClientConnectionNexusAsync : InitClientConnectionNexusAsync_MethodGroup
    class InitClientConnectionNexusAsync_MethodGroup:
        @typing.overload
        def __call__(self, empty: bool, device: Device, versionString: str) -> Task:...
        @typing.overload
        def __call__(self, device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> Task:...

    # Skipped ReadBiPotCurrent due to it being static, abstract and generic.

    ReadBiPotCurrent : ReadBiPotCurrent_MethodGroup
    class ReadBiPotCurrent_MethodGroup:
        @typing.overload
        def __call__(self) -> float:...
        @typing.overload
        def __call__(self, settlingTime: float, samplingTimeMs: int = ...) -> float:...



class ClientConnectionPS4(ClientConnection):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> None: ...

    class CellType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        CT_EXTERNAL : ClientConnectionPS4.CellType # 0
        CT_TEST_SENSOR_LOAD_0 : ClientConnectionPS4.CellType # 1
        CT_TEST_SENSOR_LOAD_1 : ClientConnectionPS4.CellType # 2
        CT_TEST_SENSOR_LOAD_2 : ClientConnectionPS4.CellType # 3
        CT_TEST_SENSOR_LOAD_3 : ClientConnectionPS4.CellType # 4
        CT_UNDEF : ClientConnectionPS4.CellType # 255


    class ModuleType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        MT_NONE : ClientConnectionPS4.ModuleType # 0
        MT_BIPOT : ClientConnectionPS4.ModuleType # 1
        MT_IR : ClientConnectionPS4.ModuleType # 2
        MT_BIPOT_IR : ClientConnectionPS4.ModuleType # 3
        MT_NOT_SET : ClientConnectionPS4.ModuleType # 65535

    Semaphore : SemaphoreSlim
    @property
    def AuxInputSelected(self) -> AuxiliaryInputType: ...
    @AuxInputSelected.setter
    def AuxInputSelected(self, value: AuxiliaryInputType) -> AuxiliaryInputType: ...
    @property
    def BiPotCurrentRange(self) -> CurrentRange: ...
    @BiPotCurrentRange.setter
    def BiPotCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Capabilities(self) -> DeviceCapabilities: ...
    @property
    def Device(self) -> Device: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @property
    def IsBipotOn(self) -> bool: ...
    @IsBipotOn.setter
    def IsBipotOn(self, value: bool) -> bool: ...
    @property
    def IsCellOn(self) -> bool: ...
    @IsCellOn.setter
    def IsCellOn(self, value: bool) -> bool: ...
    @property
    def LastBiPotCurrentRead(self) -> float: ...
    @property
    def LastCurrentSet(self) -> float: ...
    @LastCurrentSet.setter
    def LastCurrentSet(self, value: float) -> float: ...
    @property
    def LastPotentialSet(self) -> float: ...
    @LastPotentialSet.setter
    def LastPotentialSet(self, value: float) -> float: ...
    @property
    def PalmSensType(self) -> int: ...
    @property
    def QCount(self) -> int: ...
    @property
    def State(self) -> CommManager.DeviceState: ...
    @State.setter
    def State(self, value: CommManager.DeviceState) -> CommManager.DeviceState: ...
    @property
    def Stirrer(self) -> bool: ...
    @Stirrer.setter
    def Stirrer(self, value: bool) -> bool: ...
    @property
    def SupportedTechniques(self) -> Array_1[int]: ...
    @property
    def TaskScheduler(self) -> TaskScheduler: ...
    @TaskScheduler.setter
    def TaskScheduler(self, value: TaskScheduler) -> TaskScheduler: ...
    @property
    def VersionString(self) -> str: ...
    def Calibrate(self, offset: clr.Reference[Array_1[float]]) -> None: ...
    def CalibrateResultAsync(self) -> Task_1[Array_1[float]]: ...
    def CheckDeviceStatus(self, errorStr: clr.Reference[str]) -> bool: ...
    def CheckDeviceStatusAsync(self) -> Task_1[str]: ...
    def ClearDeviceFiles(self) -> None: ...
    def ClearDeviceFilesAsync(self) -> Task: ...
    @staticmethod
    def ClientConnectionPS4Async(device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> Task_1[ClientConnectionPS4]: ...
    def ConvertMeasurementVersion(self, fwVersion: float, buff: OfflineBuffer) -> OfflineBuffer: ...
    def DeleteDeviceFile(self, filePath: str) -> None: ...
    def DeleteDeviceFileAsync(self, filePath: str) -> Task: ...
    def EEPROMCalcCRC(self) -> None: ...
    def EnableStirrer(self, val: bool) -> None: ...
    def EnableStirrerAsync(self, val: bool) -> Task: ...
    def EnterDownloadMode(self) -> None: ...
    def EnterDownloadModeAsync(self) -> Task: ...
    def FormatDeviceFS(self, timeout_ms: int = ...) -> None: ...
    def FormatDeviceFSAsync(self, timeout_ms: int = ...) -> Task: ...
    def GetCellType(self) -> int: ...
    def GetCellTypeAsync(self) -> Task_1[int]: ...
    def GetDeviceFile(self, filePath: str) -> DeviceFile: ...
    def GetDeviceFileAsync(self, filePath: str) -> Task_1[DeviceFile]: ...
    def GetDeviceFiles(self, dir: str) -> List_1[DeviceFile]: ...
    def GetDeviceFilesAsync(self, dir: str) -> Task_1[List_1[DeviceFile]]: ...
    def GetDeviceFree(self) -> int: ...
    def GetDeviceFreeAsync(self) -> Task_1[int]: ...
    def GetDeviceSerial(self) -> DeviceSerial: ...
    def GetDeviceSerialAsync(self) -> Task_1[DeviceSerial]: ...
    def GetDeviceSize(self) -> int: ...
    def GetDeviceSizeAsync(self) -> Task_1[int]: ...
    def GetHWRevision(self) -> int: ...
    def GetHWRevisionAsync(self) -> Task_1[int]: ...
    def GetLicence(self) -> int: ...
    def GetLicenceAsync(self) -> Task_1[int]: ...
    def GetLicenseHWID(self) -> Array_1[int]: ...
    def GetLicenseHWIDAsync(self) -> Task_1[Array_1[int]]: ...
    def GetMode(self) -> int: ...
    def GetModeAsync(self) -> Task_1[int]: ...
    def GetSupportedCommands(self) -> str: ...
    def GetSupportedCommandsAsync(self) -> Task_1[str]: ...
    def GetSupportedTechniques(self) -> str: ...
    def GetSupportedTechniquesAsync(self) -> Task_1[str]: ...
    def InitClientConnectionPS4Async(self, device: Device, versionString: str, forceNoEEPROM: bool = ..., timeOutInMilliSeconds: int = ...) -> Task: ...
    def LoadDeviceFile(self, file: DeviceFile) -> Measurement: ...
    def ReadAuxDigitalIn(self) -> int: ...
    def ReadAuxDigitalInAsync(self) -> Task_1[int]: ...
    def ReadBiPotCurrent(self) -> float: ...
    def ReadBiPotCurrentAsync(self) -> Task_1[float]: ...
    def ReadDigitalLineD0(self) -> bool: ...
    def ReadDigitalLineD0Async(self) -> Task_1[bool]: ...
    def ReadEeprom(self, address: int) -> int: ...
    def ReadEepromAsync(self, address: int) -> Task_1[int]: ...
    def ReadEepromUint32(self, address: int) -> int: ...
    def ReadEepromUint32Async(self, address: int) -> Task_1[int]: ...
    def ReadMuxInfo(self) -> None: ...
    def ReadMuxInfoAsync(self) -> Task: ...
    def ReloadData(self) -> None: ...
    def ReloadDataAsync(self) -> Task: ...
    def Reset(self) -> None: ...
    def ResetAsync(self) -> Task: ...
    def RunDiagnosticTest(self, parentTestId: str, childTestId: str, estimatedDuration: int) -> str: ...
    def SendModeCellStateRanges(self, mode: EnumMode, cellOn: bool, cr: CurrentRange, pr: PotentialRange = ...) -> None: ...
    def SendModeCellStateRangesAsync(self, mode: EnumMode, cellOn: bool, cr: CurrentRange, pr: PotentialRange = ...) -> Task: ...
    def SetBiPotOff(self) -> None: ...
    def SetBiPotOffAsync(self) -> Task: ...
    def SetBiPotOnAndCR(self, cr: CurrentRange) -> None: ...
    def SetBiPotOnAndCRAsync(self, cr: CurrentRange) -> Task: ...
    def SetBiPotPotential(self, val: float) -> None: ...
    def SetBiPotPotentialAsync(self, val: float) -> Task: ...
    def SetCellType(self, ct: int) -> None: ...
    def SetCellTypeAsync(self, ct: int) -> Task: ...
    def SetCurrent(self, val: float) -> None: ...
    def SetCurrentAsync(self, val: float) -> Task: ...
    def SetDateTime(self, year: int, month: int, day: int, hour: int, min: int, sec: int) -> None: ...
    def SetDateTimeAsync(self, year: int, month: int, day: int, hour: int, min: int, sec: int) -> Task: ...
    def SetDigitalOutput(self, bitmask: int) -> None: ...
    def SetDigitalOutputAsync(self, bitmask: int) -> Task: ...
    def SetExternalOutput(self, val: float) -> None: ...
    def SetExternalOutputAsync(self, val: float) -> Task: ...
    def SetMDAC(self, fac: float) -> None: ...
    def SetMDACAsync(self, fac: float) -> Task: ...
    def SetMode(self, value: int) -> None: ...
    def SetModeAsync(self, value: int) -> Task: ...
    def SetMuxChannel(self, chan: int) -> None: ...
    def SetMuxChannelAsync(self, chan: int) -> Task: ...
    def SetMuxSettings(self, type: MuxType, sett: Method.MuxSettings) -> None: ...
    def SetMuxSettingsAsync(self, type: MuxType, sett: Method.MuxSettings) -> Task: ...
    def SetPotential(self, val: float) -> None: ...
    def SetPotentialAsync(self, val: float) -> Task: ...
    def SetPotentialOffset1V(self, val: bool) -> None: ...
    def SetPotentialOffset1VAsync(self, val: bool) -> Task: ...
    def SetPSBiPotMode(self, mode: Method.EnumPalmSensBipotMode) -> None: ...
    def SetPSBiPotModeAsync(self, mode: Method.EnumPalmSensBipotMode) -> Task: ...
    def SetReadInterval(self, timeMS: int) -> None: ...
    def SetReadIntervalAsync(self, timeMS: int) -> Task: ...
    def SetSerial(self, serial: DeviceSerialV2) -> None: ...
    def SetSerialAsync(self, serial: DeviceSerialV2) -> Task: ...
    def SetSineFreq(self, freq: float) -> None: ...
    def SetSineFreqAsync(self, freq: float) -> Task: ...
    def SupportsSelfDiagnostics(self) -> bool: ...
    def WriteCustomDeviceID(self, name: str) -> None: ...
    def WriteDeviceFile(self, path: str, file: str) -> None: ...
    def WriteDeviceFileAsync(self, path: str, file: str) -> Task: ...
    def WriteEeprom(self, address: int, value: int) -> None: ...
    def WriteEepromAsync(self, address: int, value: int) -> Task: ...
    def WriteEepromUint32(self, addr: int, val: int) -> None: ...
    def WriteEepromUint32Async(self, addr: int, val: int) -> Task: ...


class CommException(Exception):
    @typing.overload
    def __init__(self, s: str) -> None: ...
    @typing.overload
    def __init__(self, s: str, innerException: Exception) -> None: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...


class CommManager(IDisposable):
    @typing.overload
    def __init__(self, clientConnection: ClientConnection, async: bool = ...) -> None: ...
    @typing.overload
    def __init__(self, d: Device, timeout: int = ...) -> None: ...

    class BeginMeasurementEventArgsAsync:
        def __init__(self, measurement: ActiveMeasurement, device: Device, cellOn: bool) -> None: ...
        CellOn : bool
        Device : Device
        NewMeasurement : ActiveMeasurement


    class BeginMeasurementEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, newMeasurement: ActiveMeasurement, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, newMeasurement: ActiveMeasurement) -> None: ...


    class CellStateChangedAsyncEventArgs:
        def __init__(self, cellOn: bool, biPotOn: bool, deviceType: enumDeviceType) -> None: ...
        BiPotOn : bool
        CellOn : bool
        DeviceType : enumDeviceType


    class DebugEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, text: str, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, text: str) -> None: ...


    class DeviceState(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        Unknown : CommManager.DeviceState # 0
        Idle : CommManager.DeviceState # 1
        Measurement : CommManager.DeviceState # 2
        Download : CommManager.DeviceState # 3
        Pretreatment : CommManager.DeviceState # 4
        Error : CommManager.DeviceState # 5
        MeasOCP : CommManager.DeviceState # 6


    class EndMeasurementAsyncEventArgs(EventArgs):
        def __init__(self, cellOn: bool, biPotOn: bool, method: Method, deviceType: enumDeviceType) -> None: ...
        BiPotOn : bool
        CellOn : bool
        DeviceType : enumDeviceType
        Method : Method


    class EventHandlerCommErrorOccurred(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, exception: Exception, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, exception: Exception) -> None: ...


    class ModeChangedAsyncEventArgs:
        def __init__(self, mode: EnumMode, capabilities: DeviceCapabilities, currentRange: CurrentRange) -> None: ...
        Capabilities : DeviceCapabilities
        CurrentRange : CurrentRange
        Mode : EnumMode


    class StateChangedAsyncEventArgs:
        def __init__(self, state: CommManager.DeviceState, device: Device, cellOn: bool, method: Method, capabilities: DeviceCapabilities, currentCurve: Curve, activeMeasurement: ActiveMeasurement) -> None: ...
        ActiveMeasurement : ActiveMeasurement
        Capabilities : DeviceCapabilities
        CellOn : bool
        CurrentCurve : Curve
        Device : Device
        Method : Method
        State : CommManager.DeviceState


    class StatusChangedEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, CurrentState: CommManager.DeviceState, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, CurrentState: CommManager.DeviceState) -> None: ...


    class UnknownDataEventArgs(EventArgs):
        @property
        def Data(self) -> str: ...
        @property
        def PacketCount(self) -> int: ...


    class UnknownDataEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, e: CommManager.UnknownDataEventArgs, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, e: CommManager.UnknownDataEventArgs) -> None: ...


    class VersusOCPEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, vsOCP: MeasureVersusOCP, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, vsOCP: MeasureVersusOCP) -> None: ...

    ActiveMeasurement : ActiveMeasurement
    ClientConnection : ClientConnection
    @property
    def Active(self) -> bool: ...
    @property
    def AnalogInput(self) -> float: ...
    @property
    def AuxInputSelected(self) -> AuxiliaryInputType: ...
    @AuxInputSelected.setter
    def AuxInputSelected(self, value: AuxiliaryInputType) -> AuxiliaryInputType: ...
    @property
    def BiPotCurrentRange(self) -> CurrentRange: ...
    @BiPotCurrentRange.setter
    def BiPotCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BiPotPotential(self) -> None: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> None: ...
    @property
    def Busy(self) -> bool: ...
    @property
    def Capabilities(self) -> DeviceCapabilities: ...
    @property
    def CellOn(self) -> bool: ...
    @CellOn.setter
    def CellOn(self, value: bool) -> bool: ...
    @property
    def ChannelIndex(self) -> int: ...
    @ChannelIndex.setter
    def ChannelIndex(self, value: int) -> int: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def CurrentCurve(self) -> Curve: ...
    @property
    def CurrentRange(self) -> CurrentRange: ...
    @CurrentRange.setter
    def CurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Device(self) -> Device: ...
    @property
    def DeviceSerial(self) -> DeviceSerial: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def DigitalLineD0(self) -> bool: ...
    @property
    def DigitalLineD1(self) -> bool: ...
    @property
    def DigitalOutput(self) -> int: ...
    @DigitalOutput.setter
    def DigitalOutput(self, value: int) -> int: ...
    @property
    def ExternalOutput(self) -> None: ...
    @ExternalOutput.setter
    def ExternalOutput(self, value: float) -> None: ...
    @property
    def IsBipotOn(self) -> bool: ...
    @IsBipotOn.setter
    def IsBipotOn(self, value: bool) -> bool: ...
    @property
    def LastBiPotCurrentRead(self) -> float: ...
    @property
    def LastBiPotReadingStatus(self) -> ReadingStatus: ...
    @property
    def Method(self) -> Method: ...
    @property
    def Mode(self) -> EnumMode: ...
    @Mode.setter
    def Mode(self, value: EnumMode) -> EnumMode: ...
    @property
    def MuxChannel(self) -> int: ...
    @MuxChannel.setter
    def MuxChannel(self, value: int) -> int: ...
    @property
    def PalmSensType(self) -> int: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PotentialOffset1V(self) -> bool: ...
    @PotentialOffset1V.setter
    def PotentialOffset1V(self, value: bool) -> bool: ...
    @property
    def PotentialRange(self) -> PotentialRange: ...
    @PotentialRange.setter
    def PotentialRange(self, value: PotentialRange) -> PotentialRange: ...
    @property
    def PowerStatus(self) -> PowerStatus: ...
    @property
    def QCount(self) -> int: ...
    @property
    def ReadBiPotCurrent(self) -> float: ...
    @property
    def RemainingMeasurementTime(self) -> TimeSpan: ...
    @property
    def State(self) -> DeviceState: ...
    @State.setter
    def State(self, value: DeviceState) -> DeviceState: ...
    @property
    def Status(self) -> Status: ...
    @property
    def StatusWhenIdle(self) -> bool: ...
    @StatusWhenIdle.setter
    def StatusWhenIdle(self, value: bool) -> bool: ...
    @property
    def Stirrer(self) -> bool: ...
    @Stirrer.setter
    def Stirrer(self, value: bool) -> bool: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def TimerPeriod(self) -> int: ...
    @TimerPeriod.setter
    def TimerPeriod(self, value: int) -> int: ...
    @property
    def TimerPeriodAsync(self) -> int: ...
    @TimerPeriodAsync.setter
    def TimerPeriodAsync(self, value: int) -> int: ...
    @property
    def Version(self) -> float: ...
    @property
    def VersionString(self) -> str: ...
    def Abort(self) -> None: ...
    def AbortAsync(self) -> Task: ...
    def AnalogInputAsync(self) -> Task_1[float]: ...
    def CalibrateAsync(self) -> Task: ...
    def CalibrateReturnResultAsync(self) -> Task_1[Array_1[float]]: ...
    def CellOffAfterSeconds(self, seconds: int) -> None: ...
    def CellOffAfterSecondsAsync(self, seconds: int) -> Task: ...
    @staticmethod
    def CommManagerAsync(d: Device, timeout: int = ...) -> Task_1[CommManager]: ...
    def DigitalLine(self, bitmask: int) -> bool: ...
    def DigitalLineAsync(self, bitmask: int) -> Task_1[bool]: ...
    def DigitalLineD0Async(self) -> Task_1[bool]: ...
    def Disconnect(self, silent: bool = ...) -> None: ...
    def DisconnectAsync(self, silent: bool = ..., fromCommTimer: bool = ...) -> Task: ...
    def Dispose(self) -> None: ...
    def GetBiPotCurrent(self) -> float: ...
    def GetBiPotCurrentRange(self) -> CurrentRange: ...
    def GetBiPotCurrentRangeAsync(self) -> Task_1[CurrentRange]: ...
    def GetCellOnAsync(self) -> Task_1[bool]: ...
    def GetCurrentAsync(self) -> Task_1[float]: ...
    def GetCurrentRangeAsync(self) -> Task_1[CurrentRange]: ...
    def GetDeviceSerialAsync(self) -> Task_1[DeviceSerial]: ...
    def GetModeAsync(self) -> Task_1[EnumMode]: ...
    def GetPotentialAsync(self) -> Task_1[float]: ...
    def GetStateAsync(self) -> Task_1[CommManager.DeviceState]: ...
    def GetStatusWhenIdleAsync(self) -> Task_1[bool]: ...
    def GetStirrerAsync(self) -> Task_1[bool]: ...
    def HoldEvents(self) -> None: ...
    def IsActiveAsync(self) -> Task_1[bool]: ...
    def IsBusyAsync(self) -> Task_1[bool]: ...
    def OnMeasurementStarted(self) -> None: ...
    def PauseParsing(self) -> None: ...
    def ReadAnalogInputAsync(self) -> Task_1[int]: ...
    def ReadBiPotCurrentAsync(self) -> Task_1[float]: ...
    def ResumeEvents(self) -> None: ...
    def ResumeParsing(self) -> None: ...
    def SendModeCR(self, mode: EnumMode, cellOn: bool, cr: CurrentRange) -> None: ...
    def SendModeCRAsync(self, mode: EnumMode, cellOn: bool, cr: CurrentRange) -> Task: ...
    def SendModePR(self, mode: EnumMode, cellOn: bool, pr: PotentialRange) -> None: ...
    def SendModePRAsync(self, mode: EnumMode, cellOn: bool, pr: PotentialRange) -> Task: ...
    def SetBiPotCurrentRangeAsync(self, cr: CurrentRange) -> Task: ...
    def SetBipotOff(self) -> None: ...
    def SetBipotOffAsync(self) -> Task: ...
    def SetBipotOnAndCurrentRange(self, currentRange: CurrentRange) -> None: ...
    def SetBipotOnAndCurrentRangeAsync(self, currentRange: CurrentRange) -> Task: ...
    def SetBiPotPotentialAsync(self, potential: float) -> Task: ...
    def SetCellOnAsync(self, value: bool) -> Task: ...
    def SetCurrentAsync(self, current: float) -> Task: ...
    def SetCurrentRangeAsync(self, cr: CurrentRange) -> Task: ...
    def SetDigitalOutput(self, modifiedValue: int, modifiedValueMask: int, digitalOutputMask: int) -> None: ...
    def SetExternalOutputAsync(self, extoutput: float) -> Task: ...
    def SetModeAsync(self, mode: EnumMode) -> Task: ...
    def SetMuxChannelAsync(self, channel: int) -> Task: ...
    def SetPotentialAsync(self, potential: float) -> Task: ...
    def SetPotentialRangeAsync(self, pr: PotentialRange) -> Task: ...
    def SetStatusWhenIdleAsync(self, value: bool) -> Task: ...
    def SetStirrerAsync(self, value: bool) -> Task: ...
    def SkipPretreatment(self) -> None: ...
    def SkipPretreatmentAsync(self) -> Task: ...
    def ToString(self) -> str: ...
    # Skipped Calibrate due to it being static, abstract and generic.

    Calibrate : Calibrate_MethodGroup
    class Calibrate_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, values: clr.Reference[Array_1[float]]) -> None:...

    # Skipped GetPotentialOffset1VAsync due to it being static, abstract and generic.

    GetPotentialOffset1VAsync : GetPotentialOffset1VAsync_MethodGroup
    class GetPotentialOffset1VAsync_MethodGroup:
        @typing.overload
        def __call__(self) -> Task_1[bool]:...
        @typing.overload
        def __call__(self, value: bool) -> Task:...

    # Skipped Measure due to it being static, abstract and generic.

    Measure : Measure_MethodGroup
    class Measure_MethodGroup:
        @typing.overload
        def __call__(self, m: Method) -> str:...
        @typing.overload
        def __call__(self, m: Method, muxchannel: int) -> str:...
        @typing.overload
        def __call__(self, m: Method, measType: MeasType, muxchannel: int = ...) -> str:...

    # Skipped MeasureAsync due to it being static, abstract and generic.

    MeasureAsync : MeasureAsync_MethodGroup
    class MeasureAsync_MethodGroup:
        @typing.overload
        def __call__(self, m: Method, taskBarrier: TaskBarrier = ...) -> Task_1[str]:...
        @typing.overload
        def __call__(self, m: Method, muxchannel: int, taskBarrier: TaskBarrier = ...) -> Task_1[str]:...
        @typing.overload
        def __call__(self, m: Method, measType: MeasType, muxchannel: int = ..., taskBarrier: TaskBarrier = ...) -> Task_1[str]:...

    # Skipped SetDigitalOutputAsync due to it being static, abstract and generic.

    SetDigitalOutputAsync : SetDigitalOutputAsync_MethodGroup
    class SetDigitalOutputAsync_MethodGroup:
        @typing.overload
        def __call__(self, channel: int) -> Task:...
        @typing.overload
        def __call__(self, modifiedValue: int, modifiedValueMask: int, digitalOutputMask: int) -> Task:...



class CommMeasurement(ActiveMeasurement):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    def Abort(self) -> None: ...
    def AbortAsync(self) -> Task: ...
    def ProcessData(self) -> None: ...
    def ProcessDataAsync(self) -> Task: ...
    def Reverse(self) -> None: ...
    def ReverseAsync(self) -> Task: ...
    def SkipPretreatment(self) -> None: ...
    def SkipPretreatmentAsync(self) -> Task: ...
    def Start(self) -> None: ...
    def StartAsync(self) -> Task: ...
    def StartStage(self, timeOffsetInSec: float, name: str, firstStage: bool = ..., resetCR: bool = ..., overrideStartRange: CurrentRange = ...) -> None: ...
    def StartStageAsync(self, timeOffsetInSec: float, name: str, firstStage: bool = ..., resetCR: bool = ..., overrideStartRange: CurrentRange = ...) -> Task: ...
    def SupportsHold(self) -> bool: ...
    def ToggleHold(self) -> None: ...
    def ToggleHoldAsync(self) -> Task: ...


class CommMeasurementMS(CommMeasurement):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    def Abort(self) -> None: ...
    def AbortAsync(self) -> Task: ...
    def ProcessData(self) -> None: ...
    def ProcessDataAsync(self) -> Task: ...
    def Reverse(self) -> None: ...
    def ReverseAsync(self) -> Task: ...
    def SkipPretreatment(self) -> None: ...
    def SkipPretreatmentAsync(self) -> Task: ...
    def Start(self) -> None: ...
    def StartAsync(self) -> Task: ...
    def ToggleHold(self) -> None: ...
    def ToggleHoldAsync(self) -> Task: ...


class ConnBuffer(Buffer):
    def __init__(self, d: Device) -> None: ...
    @property
    def CharsInBuffer(self) -> int: ...
    def FillBuffer(self) -> None: ...
    def FillBufferAsync(self) -> Task: ...


class CVMeasMS(PotScanMeasMS):
    def __init__(self, conn: ClientConnection, method: Method, muxChannel: int, measType: MeasType, measBuff: Buffer) -> None: ...
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class DebugInformationEventArgs(EventArgs):
    def __init__(self, text: str) -> None: ...
    @property
    def Text(self) -> str: ...


class DebugInformationEventHandler(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, sender: typing.Any, e: DebugInformationEventArgs, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: typing.Any, e: DebugInformationEventArgs) -> None: ...


class DeviceSerial:
    def __init__(self) -> None: ...
    Batch : int
    DeviceId : str
    EISlicensed : bool
    Number : int
    Year : int
    @property
    def BatchLetter(self) -> str: ...
    def ContainsValidSerial(self) -> bool: ...
    def ToString(self) -> str: ...


class DeviceSerialCustom(DeviceSerial):
    def __init__(self, serialStr: str) -> None: ...
    Batch : int
    DeviceId : str
    EISlicensed : bool
    Number : int
    Year : int
    @property
    def BatchLetter(self) -> str: ...
    def ContainsValidSerial(self) -> bool: ...
    def ToString(self) -> str: ...


class DeviceSerialHelperClass(abc.ABC):
    @staticmethod
    def GetDevicePrefix(d: enumDeviceType) -> str: ...
    @staticmethod
    def ReadSerial(c: ClientConnection) -> DeviceSerial: ...
    @staticmethod
    def ReadSerialAsync(c: ClientConnection) -> Task_1[DeviceSerial]: ...


class DeviceSerialV2(DeviceSerial):
    def __init__(self) -> None: ...
    Batch : int
    DeviceId : str
    EISlicensed : bool
    Number : int
    Type : int
    Year : int
    @property
    def BatchLetter(self) -> str: ...
    def ToString(self) -> str: ...
    def TypeToString(self) -> str: ...


class DeviceSerialV3(DeviceSerial):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, raw: Array_1[int]) -> None: ...

    class DeviceTypeSerialV3(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        ESPICO : DeviceSerialV3.DeviceTypeSerialV3 # 0
        ES4SLR : DeviceSerialV3.DeviceTypeSerialV3 # 1
        ES4SHR : DeviceSerialV3.DeviceTypeSerialV3 # 2
        MES4LR : DeviceSerialV3.DeviceTypeSerialV3 # 3
        MES4HR : DeviceSerialV3.DeviceTypeSerialV3 # 4
        ES4XLR : DeviceSerialV3.DeviceTypeSerialV3 # 5
        ES4XHR : DeviceSerialV3.DeviceTypeSerialV3 # 6
        ES4RLR : DeviceSerialV3.DeviceTypeSerialV3 # 7
        ES4RHR : DeviceSerialV3.DeviceTypeSerialV3 # 8
        ES4OLR : DeviceSerialV3.DeviceTypeSerialV3 # 9
        ES4OHR : DeviceSerialV3.DeviceTypeSerialV3 # 10
        WRABBT : DeviceSerialV3.DeviceTypeSerialV3 # 11
        SENWB : DeviceSerialV3.DeviceTypeSerialV3 # 12
        ES4TLR : DeviceSerialV3.DeviceTypeSerialV3 # 13
        ES4THR : DeviceSerialV3.DeviceTypeSerialV3 # 14
        NEXUS : DeviceSerialV3.DeviceTypeSerialV3 # 15
        ES4_MUX8R2_LR : DeviceSerialV3.DeviceTypeSerialV3 # 17
        ES4_MUX8R2_HR : DeviceSerialV3.DeviceTypeSerialV3 # 18
        UNKNOWN : DeviceSerialV3.DeviceTypeSerialV3 # 255

    Batch : int
    DeviceId : str
    EISlicensed : bool
    Number : int
    Type : int
    Year : int
    @property
    def BatchLetter(self) -> str: ...
    @property
    def IsES4LR(self) -> bool: ...
    def ContainsValidSerial(self) -> bool: ...
    @staticmethod
    def DeviceTypeIsES4LR(type: DeviceSerialV3.DeviceTypeSerialV3) -> bool: ...
    @staticmethod
    def FromES4SerialString(serialStr: str, type: DeviceSerialV3.DeviceTypeSerialV3) -> DeviceSerialV3: ...
    @staticmethod
    def FromPicoSerialString(serialStr: str) -> DeviceSerialV3: ...
    @staticmethod
    def FromSerialString(serialStr: str, type: DeviceSerialV3.DeviceTypeSerialV3) -> DeviceSerialV3: ...
    def ToByteArray(self) -> Array_1[int]: ...
    def ToString(self) -> str: ...
    def ToStringNoType(self) -> str: ...
    @staticmethod
    def TypeFromString(typeStr: str) -> int: ...
    def TypeToModelName(self) -> str: ...
    def TypeToString(self) -> str: ...


class DeviceWaitingForDataException(CommException):
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...


class DualImpedimetricMeasMS(ImpedimetricMeasMS):
    @typing.overload
    def __init__(self, conn: ClientConnection, method: Method, muxChannel: int, measType: MeasType, measBuff: Buffer) -> None: ...
    @typing.overload
    def __init__(self, conn: ClientConnection, method: Method, muxChannel: int, measType: MeasType, measBuff: Buffer, taskBarrier: TaskBarrier) -> None: ...
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def SupportsScope(self) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    def AddEISdataForGraphView(self) -> None: ...


class EnumCurrentPhase(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Cond1 : EnumCurrentPhase # 0
    Cond2 : EnumCurrentPhase # 1
    MeasE : EnumCurrentPhase # 2
    ApplyVsOCP : EnumCurrentPhase # 3


class enumDeviceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Unknown : enumDeviceType # 0
    PalmSens : enumDeviceType # 1
    EmStat1 : enumDeviceType # 2
    EmStat2 : enumDeviceType # 3
    PalmSens3 : enumDeviceType # 4
    EmStat2BP : enumDeviceType # 5
    EmStat3 : enumDeviceType # 6
    EmStat3P : enumDeviceType # 7
    EmStat3BP : enumDeviceType # 8
    PalmSens4 : enumDeviceType # 9
    SAMBAProgramPort : enumDeviceType # 10
    EmStatPico : enumDeviceType # 11
    EmStatPicoSim : enumDeviceType # 12
    EmStatPicoBootLoader : enumDeviceType # 13
    EmStat4LR : enumDeviceType # 14
    EmStat4HR : enumDeviceType # 15
    EmStat4Bootloader : enumDeviceType # 16
    Nexus : enumDeviceType # 17
    NexusBootloader : enumDeviceType # 18
    None_ : enumDeviceType # 19
    SensitWearable : enumDeviceType # 20
    SensitWearableBootloader : enumDeviceType # 21


class EnumMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Galvanostatic : EnumMode # 0
    Potentiostatic : EnumMode # 1
    Undetermined : EnumMode # -1


class EnumVersusOCPError(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    TooHigh : EnumVersusOCPError # 0
    TooLow : EnumVersusOCPError # 1
    InvalidMethod : EnumVersusOCPError # 2


class FastGImpedimetricMeasMS(GImpedimetricMeasMS):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def SupportsScope(self) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class FastImpedimetricMeasMS(ImpedimetricMeasMS):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def SupportsScope(self) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class FastMeasMS(typing.Protocol):
    pass


class FCVMeasMS(CVMeasMS, FastMeasMS):
    def __init__(self, conn: ClientConnection, method: Method, muxChannel: int, measType: MeasType, measBuff: Buffer) -> None: ...
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class Firmware:
    @typing.overload
    def __init__(self, fileStream: FileStream, path: str) -> None: ...
    @typing.overload
    def __init__(self, s: Stream) -> None: ...
    @typing.overload
    def __init__(self, s: FileStream) -> None: ...

    class Block:
        def __init__(self) -> None: ...
        address : int
        data : Array_1[int]
        lineno : int

    blocks : List_1[Firmware.Block]
    Length : int
    @property
    def BootloaderDevice(self) -> enumDeviceType: ...
    @property
    def Date(self) -> DateTime: ...
    @property
    def Device(self) -> Array_1[enumDeviceType]: ...
    @property
    def Filename(self) -> str: ...
    @property
    def Version(self) -> float: ...
    def AddressOffset(self) -> int: ...
    def JumpAddress(self) -> int: ...


class FirmwareBin(Firmware):
    def __init__(self, s: FileStream) -> None: ...
    blocks : List_1[Firmware.Block]
    Length : int
    @property
    def BootloaderDevice(self) -> enumDeviceType: ...
    @property
    def Date(self) -> DateTime: ...
    @property
    def Device(self) -> Array_1[enumDeviceType]: ...
    @property
    def Filename(self) -> str: ...
    @property
    def Version(self) -> float: ...


class FirmwareUploader(abc.ABC):

    class DownloadProgressEventArgs(EventArgs):
        Current : int
        Total : int


    class DownloadProgressEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, e: FirmwareUploader.DownloadProgressEventArgs, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, e: FirmwareUploader.DownloadProgressEventArgs) -> None: ...

    @property
    def MinEstimatedDurationMinutes(self) -> int: ...
    @property
    def VersionString(self) -> str: ...
    @abc.abstractmethod
    def ClearCodeDataMemory(self) -> None: ...
    @abc.abstractmethod
    def ClearCodeDataMemoryAsync(self, semaphore: SemaphoreSlim) -> Task: ...
    @abc.abstractmethod
    def ClearCodeMemory(self) -> None: ...
    @abc.abstractmethod
    def ClearCodeMemoryAsync(self, semaphore: SemaphoreSlim) -> Task: ...
    def Dispose(self) -> None: ...
    @abc.abstractmethod
    def GetVersionStringAsync(self, semaphore: SemaphoreSlim) -> Task_1[str]: ...
    @abc.abstractmethod
    def Reset(self) -> None: ...
    @abc.abstractmethod
    def ResetAsync(self, semaphore: SemaphoreSlim) -> Task: ...
    @abc.abstractmethod
    def RunFirmware(self) -> None: ...
    @abc.abstractmethod
    def RunFirmwareAsync(self, semaphore: SemaphoreSlim) -> Task: ...
    @abc.abstractmethod
    def Upload(self, _Firmware: Firmware) -> None: ...
    @abc.abstractmethod
    def UploadAsync(self, firmware: Firmware, semaphore: SemaphoreSlim) -> Task: ...
    @abc.abstractmethod
    def WaitVersion(self) -> bool: ...
    @abc.abstractmethod
    def WaitVersionAsync(self, semaphore: SemaphoreSlim) -> Task_1[bool]: ...


class GalvScanMeasMS(ScanMeasMS):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class GalvTimeMeasMS(TimeMeasMS):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class GenericCommMeasurement(CommMeasurement):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class GImpedimetricMeasMS(ImpedimetricMeasBaseMS):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def SupportsScope(self) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class ImpedimetricMeasBaseMS(CommMeasurementMS, IImpedimetricMeasurement):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def SupportsScope(self) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    def AddEISdataForGraphView(self) -> None: ...
    def ProcessData(self) -> None: ...
    def ProcessDataAsync(self) -> Task: ...


class ImpedimetricMeasMS(ImpedimetricMeasBaseMS):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def SupportsScope(self) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class IMultiStepMeasMS(typing.Protocol):
    @property
    def MeasuredStepStartIndex(self) -> DataArray: ...
    @MeasuredStepStartIndex.setter
    def MeasuredStepStartIndex(self, value: DataArray) -> DataArray: ...


class InvalidChecksumException(Exception):
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...


class InvalidHexException(Exception):
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...


class LicenseException(Exception):
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...


class MeasureVersusOCP:
    def __init__(self, method: Method, m: Measurement, conn: ClientConnection, muxChannel: int, measType: MeasType, taskBarrier: TaskBarrier = ..., isOffline: bool = ...) -> None: ...

    class VersusOCPErrorHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, vsOCPerror: VersusOCPError, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, vsOCPerror: VersusOCPError) -> None: ...


    class VersusOCPProgressHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, vsOCPProgress: VersusOCPProgress, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, vsOCPProgress: VersusOCPProgress) -> None: ...


    class VersusOCPResultHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, vsOCPResult: VersusOCPResult, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, vsOCPResult: VersusOCPResult) -> None: ...

    CurrentPhase : EnumCurrentPhase
    NewEvalues : Array_1[float]
    ProceedAfterError : bool
    @property
    def IsOnHold(self) -> bool: ...
    @property
    def IsRunning(self) -> bool: ...
    @property
    def Measurement(self) -> Measurement: ...
    @property
    def Method(self) -> Method: ...
    @property
    def OCP(self) -> float: ...
    def Abort(self) -> None: ...
    def AbortAsync(self) -> Task: ...
    def Dispose(self) -> None: ...
    def SkipPhase(self) -> None: ...
    def SkipPhaseAsync(self) -> Task: ...
    def Start(self) -> None: ...
    def StartAsync(self) -> Task: ...
    def ToggleHold(self) -> None: ...
    def ToggleHoldAsync(self) -> Task: ...


class MeasureVersusOCPMS(MeasureVersusOCP):
    def __init__(self, measMS: CommMeasurementMS, method: Method, conn: ClientConnection, muxChannel: int, measType: MeasType, taskBarrier: TaskBarrier = ..., isOffline: bool = ...) -> None: ...
    CurrentPhase : EnumCurrentPhase
    NewEvalues : Array_1[float]
    ProceedAfterError : bool
    @property
    def IsOnHold(self) -> bool: ...
    @property
    def IsRunning(self) -> bool: ...
    @property
    def Measurement(self) -> Measurement: ...
    @property
    def Method(self) -> Method: ...
    @property
    def OCP(self) -> float: ...
    def Abort(self) -> None: ...
    def AbortAsync(self) -> Task: ...
    def Dispose(self) -> None: ...
    def OCPStable(self) -> None: ...
    def OCPStableAsync(self) -> Task: ...
    def SkipPhase(self) -> None: ...
    def SkipPhaseAsync(self) -> Task: ...
    def Start(self) -> None: ...
    def StartAsync(self) -> Task: ...
    def ToggleHold(self) -> None: ...
    def ToggleHoldAsync(self) -> Task: ...


class MixedModeMeasurementMS(TimeMeasMS, IMixedModeMeasurement):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class MultiGalvTimeMeasMS(GalvTimeMeasMS, IMultiStepMeasMS):
    @typing.overload
    def __init__(self, conn: ClientConnection, method: Method, muxChannel: int, measType: MeasType, measBuff: Buffer) -> None: ...
    @typing.overload
    def __init__(self, conn: ClientConnection, method: Method, muxChannel: int, measType: MeasType, measBuff: Buffer, taskBarrier: TaskBarrier) -> None: ...
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def MeasuredStepStartIndex(self) -> DataArray: ...
    @MeasuredStepStartIndex.setter
    def MeasuredStepStartIndex(self, value: DataArray) -> DataArray: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class MultiPotTimeMeasMS(PotTimeMeasMS, IMultiStepMeasMS):
    @typing.overload
    def __init__(self, conn: ClientConnection, method: Method, muxChannel: int, measType: MeasType, measBuff: Buffer) -> None: ...
    @typing.overload
    def __init__(self, conn: ClientConnection, method: Method, muxChannel: int, measType: MeasType, measBuff: Buffer, taskBarrier: TaskBarrier) -> None: ...
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def MeasuredStepStartIndex(self) -> DataArray: ...
    @MeasuredStepStartIndex.setter
    def MeasuredStepStartIndex(self, value: DataArray) -> DataArray: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class Mux8R2NotFoundException(Exception):
    def __init__(self) -> None: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...


class MuxType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    AuxAddress : MuxType # 0
    Protocol : MuxType # 1


class NoMuxChannelsEnabled(Exception):
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...


class NoResponseException(Exception):
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...


class OCPTimeMeasMS(TimeMeasMS):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class OfflineBuffer(Buffer):
    def __init__(self, buff: str) -> None: ...
    @property
    def CharsInBuffer(self) -> int: ...
    @property
    def OfflineQueue(self) -> str: ...
    def FillBuffer(self) -> None: ...
    def FillBufferAsync(self) -> Task: ...


class PotScanMeasMS(ScanMeasMS):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class PotTimeMeasMS(TimeMeasMS):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class PowerStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Unknown : PowerStatus # 0
    Charging : PowerStatus # 1
    LowBattery : PowerStatus # 2
    Normal : PowerStatus # 3


class ReadingStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    OK : ReadingStatus # 0
    Overload : ReadingStatus # 1
    Underload : ReadingStatus # 2
    Unknown : ReadingStatus # -1


class ScanMeasMS(CommMeasurementMS):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class Status:
    def __init__(self, potentialReading: VoltageReading, currentReading: CurrentReading, currentReadingWE2: CurrentReading, auxInputRaw: int, noise: float, pretPhase: Status.EnumPretreatmentPhase, capabilities: DeviceCapabilities, voltageLevels: List_1[GenericValue] = ..., auxInput: float = ...) -> None: ...

    class EnumPretreatmentPhase(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        None_ : Status.EnumPretreatmentPhase # 0
        Conditioning : Status.EnumPretreatmentPhase # 1
        Depositing : Status.EnumPretreatmentPhase # 2
        Equilibrating : Status.EnumPretreatmentPhase # 3

    AuxInput : int
    Capabilities : DeviceCapabilities
    CurrentReading : CurrentReading
    CurrentReadingWE2 : CurrentReading
    Noise : float
    PotentialReading : VoltageReading
    PretreatmentPhase : Status.EnumPretreatmentPhase
    VoltageLevels : List_1[GenericValue]
    def GetAuxInputAsVoltage(self) -> float: ...
    def GetCorrectedBiPotCurrent(self) -> float: ...
    def ToString(self) -> str: ...


class StatusEventArgs(EventArgs):
    def GetStatus(self) -> Status: ...


class StatusEventArgsAsync(StatusEventArgs):
    AuxiliaryInputType : AuxiliaryInputType
    BiPotCR : CurrentRange
    BiPotOn : bool
    Capabilities : DeviceCapabilities
    CellOn : bool
    Channel : int
    Device : Device
    DeviceState : CommManager.DeviceState
    DeviceType : enumDeviceType
    LastBiPotCurrent : float
    Mode : EnumMode


class StatusEventHandler(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, sender: typing.Any, e: StatusEventArgs, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: typing.Any, e: StatusEventArgs) -> None: ...


class SWVMeasMS(PotScanMeasMS):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class TimeMeasMS(CommMeasurementMS):
    Aborted : bool
    Channel : int
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def PretreatmentDone(self) -> bool: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class TimingStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Unknown : TimingStatus # 0
    OK : TimingStatus # 1
    OverStep : TimingStatus # 2


class UnknownCommandException(Exception):
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...


class UnknownDataException(Exception):
    Data : str
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...


class VersusOCPError:
    def __init__(self, errorType: EnumVersusOCPError, parameter: str, newValue: float) -> None: ...
    ErrorType : EnumVersusOCPError
    NewValue : float
    Parameter : str


class VersusOCPProgress:
    def __init__(self, delta_mV_s: float, newPotential: float, tRunOCP: int) -> None: ...
    Delta_mV_s : float
    NewPotential : float
    OCPRunTime : int


class VersusOCPResult:
    def __init__(self, ocp: float, proceed: bool, aborted: bool, original: Method, muxChannel: int, measType: MeasType, taskBarrier: TaskBarrier) -> None: ...
    IsAborted : bool
    MeasType : MeasType
    MuxChannel : int
    OCP : float
    OriginalMethod : Method
    ProceedWithMeasurement : bool
    TaskBarrier : TaskBarrier
