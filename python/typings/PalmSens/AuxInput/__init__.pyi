import typing

from PalmSens.Units import Unit

class AuxiliaryInputType:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        isReadOnly: bool,
        name: str,
        description: str,
        offset: float,
        slope: float,
        unit: Unit,
    ) -> None: ...
    IsReadOnly: bool
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Offset(self) -> float: ...
    @Offset.setter
    def Offset(self, value: float) -> float: ...
    @property
    def Slope(self) -> float: ...
    @Slope.setter
    def Slope(self, value: float) -> float: ...
    @property
    def Unit(self) -> Unit: ...
    @Unit.setter
    def Unit(self, value: Unit) -> Unit: ...
    def Clone(self) -> AuxiliaryInputType: ...
    def ConvertAuxValue(self, analogInput: float) -> float: ...
    @staticmethod
    def Deserialize(serializedAuxiliaryInputType: str) -> AuxiliaryInputType: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ParseString(self, serializedAuxiliaryInputType: str) -> None: ...
    def Serialize(self) -> str: ...
    # Skipped ToString due to it being static, abstract and generic.

    ToString: ToString_MethodGroup
    class ToString_MethodGroup:
        @typing.overload
        def __call__(self) -> str: ...
        @typing.overload
        def __call__(self, value: float) -> str: ...
