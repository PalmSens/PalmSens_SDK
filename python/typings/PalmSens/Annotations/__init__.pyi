import typing

from System import Attribute

class AspChildControlTypeAttribute(Attribute):
    def __init__(self, tagName: str, controlType: typing.Type[typing.Any]) -> None: ...
    @property
    def ControlType(self) -> typing.Type[typing.Any]: ...
    @ControlType.setter
    def ControlType(self, value: typing.Type[typing.Any]) -> typing.Type[typing.Any]: ...
    @property
    def TagName(self) -> str: ...
    @TagName.setter
    def TagName(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspDataFieldAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspDataFieldsAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMethodPropertyAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcActionAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, anonymousProperty: str) -> None: ...
    @property
    def AnonymousProperty(self) -> str: ...
    @AnonymousProperty.setter
    def AnonymousProperty(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcActionSelectorAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcAreaAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, anonymousProperty: str) -> None: ...
    @property
    def AnonymousProperty(self) -> str: ...
    @AnonymousProperty.setter
    def AnonymousProperty(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcAreaMasterLocationFormatAttribute(Attribute):
    def __init__(self, format: str) -> None: ...
    @property
    def Format(self) -> str: ...
    @Format.setter
    def Format(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcAreaPartialViewLocationFormatAttribute(Attribute):
    def __init__(self, format: str) -> None: ...
    @property
    def Format(self) -> str: ...
    @Format.setter
    def Format(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcAreaViewLocationFormatAttribute(Attribute):
    def __init__(self, format: str) -> None: ...
    @property
    def Format(self) -> str: ...
    @Format.setter
    def Format(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcControllerAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, anonymousProperty: str) -> None: ...
    @property
    def AnonymousProperty(self) -> str: ...
    @AnonymousProperty.setter
    def AnonymousProperty(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcDisplayTemplateAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcEditorTemplateAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcMasterAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcMasterLocationFormatAttribute(Attribute):
    def __init__(self, format: str) -> None: ...
    @property
    def Format(self) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcModelTypeAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcPartialViewAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcPartialViewLocationFormatAttribute(Attribute):
    def __init__(self, format: str) -> None: ...
    @property
    def Format(self) -> str: ...
    @Format.setter
    def Format(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcSuppressViewErrorAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcTemplateAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcViewAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcViewComponentAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcViewComponentViewAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspMvcViewLocationFormatAttribute(Attribute):
    def __init__(self, format: str) -> None: ...
    @property
    def Format(self) -> str: ...
    @Format.setter
    def Format(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspRequiredAttributeAttribute(Attribute):
    def __init__(self, attribute: str) -> None: ...
    @property
    def Attribute(self) -> str: ...
    @Attribute.setter
    def Attribute(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AspTypePropertyAttribute(Attribute):
    def __init__(self, createConstructorReferences: bool) -> None: ...
    @property
    def CreateConstructorReferences(self) -> bool: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AssertionConditionAttribute(Attribute):
    def __init__(self, conditionType: AssertionConditionType) -> None: ...
    @property
    def ConditionType(self) -> AssertionConditionType: ...
    @property
    def TypeId(self) -> typing.Any: ...

class AssertionConditionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    IS_TRUE: AssertionConditionType  # 0
    IS_FALSE: AssertionConditionType  # 1
    IS_NULL: AssertionConditionType  # 2
    IS_NOT_NULL: AssertionConditionType  # 3

class AssertionMethodAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class BaseTypeRequiredAttribute(Attribute):
    def __init__(self, baseType: typing.Type[typing.Any]) -> None: ...
    @property
    def BaseType(self) -> typing.Type[typing.Any]: ...
    @BaseType.setter
    def BaseType(self, value: typing.Type[typing.Any]) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> typing.Any: ...

class CanBeNullAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class CannotApplyEqualityOperatorAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class CollectionAccessAttribute(Attribute):
    def __init__(self, collectionAccessType: CollectionAccessType) -> None: ...
    @property
    def CollectionAccessType(self) -> CollectionAccessType: ...
    @property
    def TypeId(self) -> typing.Any: ...

class CollectionAccessType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    None_: CollectionAccessType  # 0
    Read: CollectionAccessType  # 1
    ModifyExistingContent: CollectionAccessType  # 2
    UpdatedContent: CollectionAccessType  # 6

class ContractAnnotationAttribute(Attribute):
    @typing.overload
    def __init__(self, contract: str) -> None: ...
    @typing.overload
    def __init__(self, contract: str, forceFullStates: bool) -> None: ...
    @property
    def Contract(self) -> str: ...
    @Contract.setter
    def Contract(self, value: str) -> str: ...
    @property
    def ForceFullStates(self) -> bool: ...
    @property
    def TypeId(self) -> typing.Any: ...

class HtmlAttributeValueAttribute(Attribute):
    def __init__(self, name: str) -> None: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class HtmlElementAttributesAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, name: str) -> None: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class ImplicitNotNullAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class ImplicitUseKindFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Access: ImplicitUseKindFlags  # 1
    Assign: ImplicitUseKindFlags  # 2
    InstantiatedWithFixedConstructorSignature: ImplicitUseKindFlags  # 4
    Default: ImplicitUseKindFlags  # 7
    InstantiatedNoFixedConstructorSignature: ImplicitUseKindFlags  # 8

class ImplicitUseTargetFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Default: ImplicitUseTargetFlags  # 1
    Itself: ImplicitUseTargetFlags  # 1
    Members: ImplicitUseTargetFlags  # 2
    WithMembers: ImplicitUseTargetFlags  # 3

class InstantHandleAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class InvokerParameterNameAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class ItemCanBeNullAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class ItemNotNullAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class LinqTunnelAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class LocalizationRequiredAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, required: bool) -> None: ...
    @property
    def Required(self) -> bool: ...
    @property
    def TypeId(self) -> typing.Any: ...

class MacroAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def Editable(self) -> int: ...
    @Editable.setter
    def Editable(self, value: int) -> int: ...
    @property
    def Expression(self) -> str: ...
    @Expression.setter
    def Expression(self, value: str) -> str: ...
    @property
    def Target(self) -> str: ...
    @Target.setter
    def Target(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class MeansImplicitUseAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, targetFlags: ImplicitUseTargetFlags) -> None: ...
    @typing.overload
    def __init__(self, useKindFlags: ImplicitUseKindFlags) -> None: ...
    @typing.overload
    def __init__(
        self, useKindFlags: ImplicitUseKindFlags, targetFlags: ImplicitUseTargetFlags
    ) -> None: ...
    @property
    def TargetFlags(self) -> ImplicitUseTargetFlags: ...
    @TargetFlags.setter
    def TargetFlags(self, value: ImplicitUseTargetFlags) -> ImplicitUseTargetFlags: ...
    @property
    def TypeId(self) -> typing.Any: ...
    @property
    def UseKindFlags(self) -> ImplicitUseKindFlags: ...
    @UseKindFlags.setter
    def UseKindFlags(self, value: ImplicitUseKindFlags) -> ImplicitUseKindFlags: ...

class MustUseReturnValueAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, justification: str) -> None: ...
    @property
    def Justification(self) -> str: ...
    @Justification.setter
    def Justification(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class NoEnumerationAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class NoReorder(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class NotifyPropertyChangedInvocatorAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parameterName: str) -> None: ...
    @property
    def ParameterName(self) -> str: ...
    @ParameterName.setter
    def ParameterName(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class NotNullAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class PathReferenceAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, basePath: str) -> None: ...
    @property
    def BasePath(self) -> str: ...
    @BasePath.setter
    def BasePath(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class ProvidesContextAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class PublicAPIAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, comment: str) -> None: ...
    @property
    def Comment(self) -> str: ...
    @Comment.setter
    def Comment(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class PureAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class RazorDirectiveAttribute(Attribute):
    def __init__(self, directive: str) -> None: ...
    @property
    def Directive(self) -> str: ...
    @Directive.setter
    def Directive(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class RazorHelperCommonAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class RazorImportNamespaceAttribute(Attribute):
    def __init__(self, name: str) -> None: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class RazorInjectionAttribute(Attribute):
    def __init__(self, type: str, fieldName: str) -> None: ...
    @property
    def FieldName(self) -> str: ...
    @FieldName.setter
    def FieldName(self, value: str) -> str: ...
    @property
    def Type(self) -> str: ...
    @Type.setter
    def Type(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class RazorLayoutAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class RazorSectionAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class RazorWriteLiteralMethodAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class RazorWriteMethodAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class RazorWriteMethodParameterAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class RegexPatternAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class SourceTemplateAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class StringFormatMethodAttribute(Attribute):
    def __init__(self, formatParameterName: str) -> None: ...
    @property
    def FormatParameterName(self) -> str: ...
    @FormatParameterName.setter
    def FormatParameterName(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class TerminatesProgramAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class UsedImplicitlyAttribute(Attribute):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, targetFlags: ImplicitUseTargetFlags) -> None: ...
    @typing.overload
    def __init__(self, useKindFlags: ImplicitUseKindFlags) -> None: ...
    @typing.overload
    def __init__(
        self, useKindFlags: ImplicitUseKindFlags, targetFlags: ImplicitUseTargetFlags
    ) -> None: ...
    @property
    def TargetFlags(self) -> ImplicitUseTargetFlags: ...
    @property
    def TypeId(self) -> typing.Any: ...
    @property
    def UseKindFlags(self) -> ImplicitUseKindFlags: ...

class ValueProviderAttribute(Attribute):
    def __init__(self, name: str) -> None: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def TypeId(self) -> typing.Any: ...

class XamlItemBindingOfItemsControlAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...

class XamlItemsControlAttribute(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...
