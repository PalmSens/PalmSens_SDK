import typing, clr, abc
from System import EventArgs, MulticastDelegate, IAsyncResult, AsyncCallback, IDisposable, Array_1, IComparable, Version, Exception, DateTime, TimeSpan, Func_1, Action
from System.Reflection import MethodInfo, Assembly, MethodBase
from System.Threading.Tasks import Task, Task_1
from System.Collections.Generic import List_1, IEnumerable_1, Dictionary_2, IReadOnlyDictionary_2
from PalmSens.Plottables import Curve, VisualSettings, EISData, CurveDirection
from PalmSens.Units import Unit
from PalmSens.Analysis import CFALevelList, PeakList
from PalmSens.Data import DataArray, DataArrayType, DataSetCommon, IDataValue
from PalmSens.DataFiles import JsonBag
from System.Collections import IDictionary, IEnumerable, BitArray
from PalmSens.Devices import DeviceCapabilities, MethodScriptDeviceCapabilities, WakeOnTriggers
from PalmSens.Comm import ActiveMeasurement, MeasureVersusOCP, enumDeviceType, ClientConnectionMS, MuxType, ClientConnection, Buffer
from Newtonsoft.Json import JsonReader, JsonWriter
from System.Threading import CancellationToken, SynchronizationContext, SendOrPostCallback
from System.ComponentModel import PropertyChangedEventArgs, INotifyPropertyChanged
from System.IO import TextWriter
from PalmSens.Techniques import MethodError, MixedMode, IMixedModeStageMethod, IFastMeasurement, ImpedimetricIterationMethodBase
from System.Linq.Expressions import Expression_1
from System.Runtime.CompilerServices import INotifyCompletion

class AsyncEventArgs(EventArgs):
    def __init__(self) -> None: ...
    Empty : AsyncEventArgs
    def GetAsyncEventQueueItem(self) -> AsyncEventQueueItem: ...


class AsyncEventHandler_GenericClasses(abc.ABCMeta):
    Generic_AsyncEventHandler_GenericClasses_AsyncEventHandler_1_T = typing.TypeVar('Generic_AsyncEventHandler_GenericClasses_AsyncEventHandler_1_T')
    def __getitem__(self, types : typing.Type[Generic_AsyncEventHandler_GenericClasses_AsyncEventHandler_1_T]) -> typing.Type[AsyncEventHandler_1[Generic_AsyncEventHandler_GenericClasses_AsyncEventHandler_1_T]]: ...

class AsyncEventHandler(AsyncEventHandler_0, metaclass =AsyncEventHandler_GenericClasses): ...

class AsyncEventHandler_0(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, sender: typing.Any, e: EventArgs, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Task: ...
    def Invoke(self, sender: typing.Any, e: EventArgs) -> Task: ...


AsyncEventHandler_1_T = typing.TypeVar('AsyncEventHandler_1_T')
class AsyncEventHandler_1(typing.Generic[AsyncEventHandler_1_T], MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, sender: typing.Any, e: AsyncEventHandler_1_T, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Task: ...
    def Invoke(self, sender: typing.Any, e: AsyncEventHandler_1_T) -> Task: ...


class AsyncEventHandlerExtensions(abc.ABC):
    # Skipped InvokeAsync due to it being static, abstract and generic.

    InvokeAsync : InvokeAsync_MethodGroup
    class InvokeAsync_MethodGroup:
        def __getitem__(self, t:typing.Type[InvokeAsync_1_T1]) -> InvokeAsync_1[InvokeAsync_1_T1]: ...

        InvokeAsync_1_T1 = typing.TypeVar('InvokeAsync_1_T1')
        class InvokeAsync_1(typing.Generic[InvokeAsync_1_T1]):
            InvokeAsync_1_T = AsyncEventHandlerExtensions.InvokeAsync_MethodGroup.InvokeAsync_1_T1
            def __call__(self, handler: AsyncEventHandler_1[InvokeAsync_1_T], sender: typing.Any, eventArgs: InvokeAsync_1_T) -> Task:...

        def __call__(self, handler: AsyncEventHandler, sender: typing.Any, eventArgs: EventArgs) -> Task:...



class AsyncEventQueueItem(IDisposable):
    def Complete(self) -> None: ...
    def Dispose(self) -> None: ...


class AutoRanging(Ranging):
    @typing.overload
    def __init__(self, minRange: int, maxRange: int, startRange: int, supportedRanges: List_1[CurrentRange] = ...) -> None: ...
    @typing.overload
    def __init__(self, minRange: CurrentRange, maxRange: CurrentRange, startRange: CurrentRange, supportedRanges: List_1[CurrentRange] = ...) -> None: ...
    @typing.overload
    def __init__(self, minRange: int, maxRange: int, supportedRanges: List_1[CurrentRange] = ...) -> None: ...
    @typing.overload
    def __init__(self, minRange: CurrentRange, maxRange: CurrentRange, supportedRanges: List_1[CurrentRange] = ...) -> None: ...
    @typing.overload
    def __init__(self, supportedRanges: List_1[CurrentRange] = ...) -> None: ...
    @property
    def Autoranging(self) -> bool: ...
    @property
    def CurrentRange(self) -> CurrentRange: ...
    @CurrentRange.setter
    def CurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def MaximumCurrentRange(self) -> CurrentRange: ...
    @MaximumCurrentRange.setter
    def MaximumCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def MinimumCurrentRange(self) -> CurrentRange: ...
    @MinimumCurrentRange.setter
    def MinimumCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def StartCurrentRange(self) -> CurrentRange: ...
    @StartCurrentRange.setter
    def StartCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def SupportedCurrentRanges(self) -> List_1[CurrentRange]: ...
    @SupportedCurrentRanges.setter
    def SupportedCurrentRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...


class AutoRangingPotential(RangingPotential):
    @typing.overload
    def __init__(self, minRange: PotentialRange, maxRange: PotentialRange, startRange: PotentialRange, supportedRanges: List_1[PotentialRange] = ...) -> None: ...
    @typing.overload
    def __init__(self, minRange: PotentialRange, maxRange: PotentialRange, supportedRanges: List_1[PotentialRange] = ...) -> None: ...
    @typing.overload
    def __init__(self, supportedRanges: List_1[PotentialRange] = ...) -> None: ...
    PotentialRange : PotentialRange
    @property
    def Autoranging(self) -> bool: ...
    @property
    def MaximumPotentialRange(self) -> PotentialRange: ...
    @MaximumPotentialRange.setter
    def MaximumPotentialRange(self, value: PotentialRange) -> PotentialRange: ...
    @property
    def MinimumPotentialRange(self) -> PotentialRange: ...
    @MinimumPotentialRange.setter
    def MinimumPotentialRange(self, value: PotentialRange) -> PotentialRange: ...
    @property
    def StartPotentialRange(self) -> PotentialRange: ...
    @StartPotentialRange.setter
    def StartPotentialRange(self, value: PotentialRange) -> PotentialRange: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(self, value: List_1[PotentialRange]) -> List_1[PotentialRange]: ...


class CalibrationCurve(Curve):
    def __init__(self, signalUnit: Unit, concentrationUnit: Unit, i: Array_1[float], conc: Array_1[float]) -> None: ...
    CorrCoef : float
    ErrorMessage : str
    Hash : Array_1[int]
    Levels : CFALevelList
    Offset : float
    Slope : float
    @property
    def Appearance(self) -> VisualSettings: ...
    @Appearance.setter
    def Appearance(self, value: VisualSettings) -> VisualSettings: ...
    @property
    def CorrosionButlerVolmer(self) -> Array_1[int]: ...
    @CorrosionButlerVolmer.setter
    def CorrosionButlerVolmer(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def CorrosionTafel(self) -> Array_1[int]: ...
    @CorrosionTafel.setter
    def CorrosionTafel(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def Error(self) -> str: ...
    @Error.setter
    def Error(self, value: str) -> str: ...
    @property
    def HasMultipleDirections(self) -> bool: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsInPlot(self) -> bool: ...
    @IsInPlot.setter
    def IsInPlot(self, value: bool) -> bool: ...
    @property
    def MaxX(self) -> float: ...
    @property
    def MaxY(self) -> float: ...
    @property
    def MeasType(self) -> MeasType: ...
    @MeasType.setter
    def MeasType(self, value: MeasType) -> MeasType: ...
    @property
    def MeasuredStepStartIndex(self) -> DataArray: ...
    @MeasuredStepStartIndex.setter
    def MeasuredStepStartIndex(self, value: DataArray) -> DataArray: ...
    @property
    def MinX(self) -> float: ...
    @property
    def MinY(self) -> float: ...
    @property
    def MuxChannel(self) -> int: ...
    @MuxChannel.setter
    def MuxChannel(self, value: int) -> int: ...
    @property
    def NPoints(self) -> int: ...
    @property
    def OCPValue(self) -> float: ...
    @property
    def Peaks(self) -> PeakList: ...
    @Peaks.setter
    def Peaks(self, value: PeakList) -> PeakList: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodePotential(self) -> float: ...
    @ReferenceElectrodePotential.setter
    def ReferenceElectrodePotential(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def SelectedPoints(self) -> Array_1[bool]: ...
    @SelectedPoints.setter
    def SelectedPoints(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def SupportsPowerPlot(self) -> bool: ...
    @property
    def SuspendSavedToFileChangedEvent(self) -> bool: ...
    @SuspendSavedToFileChangedEvent.setter
    def SuspendSavedToFileChangedEvent(self, value: bool) -> bool: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def ValidHash(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    @property
    def XArrayType(self) -> DataArrayType: ...
    @property
    def XAxis(self) -> Curve.EnumXAxis: ...
    @XAxis.setter
    def XAxis(self, value: Curve.EnumXAxis) -> Curve.EnumXAxis: ...
    @property
    def XAxisDataArray(self) -> DataArray: ...
    @property
    def XOffset(self) -> float: ...
    @XOffset.setter
    def XOffset(self, value: float) -> float: ...
    @property
    def XUnit(self) -> Unit: ...
    @property
    def YArrayType(self) -> DataArrayType: ...
    @property
    def YAxis(self) -> Curve.EnumYAxis: ...
    @YAxis.setter
    def YAxis(self, value: Curve.EnumYAxis) -> Curve.EnumYAxis: ...
    @property
    def YAxisDataArray(self) -> DataArray: ...
    @property
    def YUnit(self) -> Unit: ...
    @property
    def ZUnit(self) -> Unit: ...
    @ZUnit.setter
    def ZUnit(self, value: Unit) -> Unit: ...
    # Skipped CalculateConcentration due to it being static, abstract and generic.

    CalculateConcentration : CalculateConcentration_MethodGroup
    class CalculateConcentration_MethodGroup:
        @typing.overload
        def __call__(self, i: float) -> float:...
        @typing.overload
        def __call__(self, m: ICalibrationMethod, c: Curve) -> float:...



class CoreSettings(abc.ABC):
    EntryAssembly : Assembly


class CreateThreadFunc(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, startFunc: PSRun, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> IThreadWrapper: ...
    def Invoke(self, startFunc: PSRun) -> IThreadWrapper: ...


class CurrentRange(IRange, IComparable):
    @typing.overload
    def __init__(self, bag: JsonBag, coreVersion: Version) -> None: ...
    @typing.overload
    def __init__(self, cr: CurrentRanges) -> None: ...
    @typing.overload
    def __init__(self, crbyte: int) -> None: ...

    class InvalidCRByte(Exception):
        def __init__(self, b: int) -> None: ...
        @property
        def Data(self) -> IDictionary: ...
        @property
        def HelpLink(self) -> str: ...
        @HelpLink.setter
        def HelpLink(self, value: str) -> str: ...
        @property
        def HResult(self) -> int: ...
        @HResult.setter
        def HResult(self, value: int) -> int: ...
        @property
        def InnerException(self) -> Exception: ...
        @property
        def Message(self) -> str: ...
        @property
        def Source(self) -> str: ...
        @Source.setter
        def Source(self, value: str) -> str: ...
        @property
        def StackTrace(self) -> str: ...
        @property
        def TargetSite(self) -> MethodBase: ...

    AvailableCurrentRanges : Array_1[CurrentRange]
    @property
    def CRbyte(self) -> int: ...
    @property
    def Description(self) -> str: ...
    @property
    def Factor(self) -> float: ...
    @property
    def Gain(self) -> typing.Optional[int]: ...
    @property
    def Range(self) -> CurrentRanges: ...
    def CompareTo(self, that: typing.Any) -> int: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    def Format(self, current: float) -> str: ...
    def Format2(self, current: float) -> str: ...
    @staticmethod
    def FromCRByte(p: int) -> CurrentRange: ...
    @staticmethod
    def FromMicroamps(p: float) -> CurrentRange: ...
    @staticmethod
    def GetCRByte(cr: CurrentRanges) -> int: ...
    @staticmethod
    def GetCRFactor(cr: CurrentRanges) -> float: ...
    @staticmethod
    def GetCRfromCRByte(s: int) -> CurrentRanges: ...
    @staticmethod
    def GetCRString(cr: CurrentRanges) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetOptimalRangeForCurrent(self, current: float, capab: DeviceCapabilities) -> int: ...
    def Higher(self, range: Ranging) -> CurrentRange: ...
    def Lower(self, range: Ranging) -> CurrentRange: ...
    def __eq__(self, a: CurrentRange, b: CurrentRange) -> bool: ...
    def __gt__(self, a: CurrentRange, b: CurrentRange) -> bool: ...
    def __ge__(self, a: CurrentRange, b: CurrentRange) -> bool: ...
    def __ne__(self, a: CurrentRange, b: CurrentRange) -> bool: ...
    def __lt__(self, a: CurrentRange, b: CurrentRange) -> bool: ...
    def __le__(self, a: CurrentRange, b: CurrentRange) -> bool: ...
    def ToJsonBag(self) -> JsonBag: ...
    def ToString(self) -> str: ...
    # Skipped GetRanges due to it being static, abstract and generic.

    GetRanges : GetRanges_MethodGroup
    class GetRanges_MethodGroup:
        @typing.overload
        def __call__(self, cranges: Array_1[CurrentRanges]) -> List_1[CurrentRange]:...
        @typing.overload
        def __call__(self, minRange: int, maxRange: int) -> List_1[CurrentRange]:...

    # Skipped Nearest due to it being static, abstract and generic.

    Nearest : Nearest_MethodGroup
    class Nearest_MethodGroup:
        @typing.overload
        def __call__(self, ranges: IEnumerable_1[CurrentRange]) -> CurrentRange:...
        @typing.overload
        def __call__(self, ranges: IEnumerable_1[CurrentRange], factor: float) -> CurrentRange:...



class CurrentRanges(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    cr100pA : CurrentRanges # 0
    cr1nA : CurrentRanges # 1
    cr10nA : CurrentRanges # 2
    cr100nA : CurrentRanges # 3
    cr1uA : CurrentRanges # 4
    cr10uA : CurrentRanges # 5
    cr100uA : CurrentRanges # 6
    cr1mA : CurrentRanges # 7
    cr10mA : CurrentRanges # 8
    cr100mA : CurrentRanges # 9
    cr2uA : CurrentRanges # 10
    cr4uA : CurrentRanges # 11
    cr8uA : CurrentRanges # 12
    cr16uA : CurrentRanges # 13
    cr32uA : CurrentRanges # 14
    cr125uA : CurrentRanges # 17
    cr250uA : CurrentRanges # 18
    cr500uA : CurrentRanges # 19
    cr5mA : CurrentRanges # 20
    cr6uA : CurrentRanges # 21
    cr13uA : CurrentRanges # 22
    cr25uA : CurrentRanges # 23
    cr50uA : CurrentRanges # 24
    cr200uA : CurrentRanges # 25
    cr63uA : CurrentRanges # 26
    cr1mA_shunt : CurrentRanges # 27
    cr10mA_shunt : CurrentRanges # 28
    cr100mA_shunt : CurrentRanges # 29
    cr1A : CurrentRanges # 30
    cr2500uA : CurrentRanges # 31


class CustomMeasurement(ActiveMeasurement):

    class State(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        NotStarted : CustomMeasurement.State # 0
        Conditioning : CustomMeasurement.State # 1
        Depositioning : CustomMeasurement.State # 2
        Equilibrating : CustomMeasurement.State # 3
        Measuring : CustomMeasurement.State # 4
        Done : CustomMeasurement.State # 5

    Channel : int
    ETA : DateTime
    LastMuxChannel : int
    MeasurementStarted : DateTime
    VsOCP : MeasureVersusOCP
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def CurrentState(self) -> State: ...
    @CurrentState.setter
    def CurrentState(self, value: State) -> State: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def OnHold(self) -> bool: ...
    @property
    def Phase(self) -> ActiveMeasurement.EnumPhase: ...
    @Phase.setter
    def Phase(self, value: ActiveMeasurement.EnumPhase) -> ActiveMeasurement.EnumPhase: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ReverseSupported(self) -> bool: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    def Abort(self) -> None: ...
    def AbortAsync(self) -> Task: ...
    def ProcessData(self) -> None: ...
    def ProcessDataAsync(self) -> Task: ...
    def SkipPretreatment(self) -> None: ...
    def SkipPretreatmentAsync(self) -> Task: ...
    def Start(self) -> None: ...
    def StartAsync(self) -> Task: ...
    def SupportsHold(self) -> bool: ...
    def ToggleHold(self) -> None: ...
    def ToggleHoldAsync(self) -> Task: ...


class CustomMethodScript(MethodScript):
    def __init__(self, script: IEnumerable_1[ScriptLine], capabilities: MethodScriptDeviceCapabilities) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...
    @staticmethod
    def Merge(first: CustomMethodScript, second: CustomMethodScript) -> CustomMethodScript: ...


class CustomScriptLine(ScriptLine):
    def __init__(self, command: str, arg: str, indentation: int) -> None: ...
    Args : IEnumerable_1[str]
    Command : MethodScriptDeviceCapabilities.MSCommands
    @property
    def CustomCommand(self) -> str: ...
    @property
    def Function(self) -> str: ...
    @Function.setter
    def Function(self, value: str) -> str: ...
    @property
    def Indentation(self) -> str: ...


class EncodedMethod(abc.ABC):

    class enumOptions(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        UseBlank : EncodedMethod.enumOptions # 8
        PowerFreq50 : EncodedMethod.enumOptions # 32
        UseStirrer : EncodedMethod.enumOptions # 64
        Equilibration : EncodedMethod.enumOptions # 256
        Deposition : EncodedMethod.enumOptions # 512
        Conditioning : EncodedMethod.enumOptions # 1024
        PlotOnline : EncodedMethod.enumOptions # 2048
        NoAutoRanging : EncodedMethod.enumOptions # 4096
        CellOnAfterMeasurement : EncodedMethod.enumOptions # 8192
        CellOnDuringMeasurement : EncodedMethod.enumOptions # 16384
        GalvanostatMode : EncodedMethod.enumOptions # 32768


    class MeasurementIntervalUnit(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        HthSeconds : EncodedMethod.MeasurementIntervalUnit # 0
        Seconds : EncodedMethod.MeasurementIntervalUnit # 1
        Minutes : EncodedMethod.MeasurementIntervalUnit # 2
        Hours : EncodedMethod.MeasurementIntervalUnit # 3

    @property
    def DeviceFileName(self) -> str: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...
    @abc.abstractmethod
    def checksum(self) -> int: ...
    @staticmethod
    def FromString(s: str) -> EncodedMethod: ...
    @abc.abstractmethod
    def OverrideFileName(self, fileName: str) -> None: ...


class EncodedMethodV0(EncodedMethod):
    ADTcycle : float
    @property
    def ADTimingUnit(self) -> float: ...
    @ADTimingUnit.setter
    def ADTimingUnit(self, value: float) -> float: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def Item(self) -> int: ...
    @Item.setter
    def Item(self, value: int) -> int: ...
    @property
    def Length(self) -> int: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...
    def checksum(self) -> int: ...
    def GetBool(self, pos: int, bit: int) -> bool: ...
    def OverrideFileName(self, fileName: str) -> None: ...
    def ResetBool(self, pos: int, bit: int) -> None: ...
    def SetAnalog(self, position: int, Vanalog: float) -> None: ...
    def SetAnalogDiff(self, position: int, Vanalog: float) -> None: ...
    def SetBool(self, pos: int, bit: int) -> None: ...
    def SetCurrentRange(self, position: int, value: CurrentRange) -> None: ...
    def SetInt16(self, position: int, dec: int) -> None: ...
    def SetInt16BE(self, position: int, dec: int) -> None: ...
    def SetInt16LE(self, position: int, dec: int) -> None: ...
    def SetTime(self, position: int, dec: float) -> None: ...
    def SetTime2(self, position: int, dec: float) -> None: ...
    def ToString(self) -> str: ...


class EncodedMethodV1(EncodedMethod):

    class Options(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        PlotOffline : EncodedMethodV1.Options # 1
        AlternatingMux : EncodedMethodV1.Options # 2
        CellOnAfterMeasurement : EncodedMethodV1.Options # 4
        UseStirrer : EncodedMethodV1.Options # 8
        PulsedAmpDetectionPulse : EncodedMethodV1.Options # 16
        PulsedAmpDetectionDifferential : EncodedMethodV1.Options # 32
        RecordExtraValue : EncodedMethodV1.Options # 64
        UseLimitMin : EncodedMethodV1.Options # 128
        UseLimitMax : EncodedMethodV1.Options # 256
        IsPartOfMixedMeasurement : EncodedMethodV1.Options # 512
        MeasureIForwardReverse : EncodedMethodV1.Options # 1024
        UseTriggerOnEquil : EncodedMethodV1.Options # 2048
        UseTriggerOnStart : EncodedMethodV1.Options # 4096
        UseTriggerOnDelay : EncodedMethodV1.Options # 8192
        UseIRComp : EncodedMethodV1.Options # 32768

    options : int
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...
    def checksum(self) -> int: ...
    def Get(self, name: str, defaultVal: str) -> str: ...
    def GetAnalog(self, name: str, defaultVal: float) -> float: ...
    def GetCurrentRange(self, name: str, defaultVal: CurrentRange) -> CurrentRange: ...
    def GetInt16(self, name: str, defaultVal: int) -> int: ...
    def GetInt8(self, name: str, defaultVal: int) -> int: ...
    def GetTimeCon(self, name: str, defaultVal: float) -> float: ...
    def GetUInt32(self, name: str, defaultVal: int) -> int: ...
    def HasParam(self, name: str) -> bool: ...
    def OverrideFileName(self, fileName: str) -> None: ...
    def Set(self, name: str, data: str) -> None: ...
    def SetAnalog(self, name: str, Vanalog: float) -> None: ...
    def SetAnalogDiff(self, name: str, Vanalog: float) -> None: ...
    def SetCurrentRange(self, name: str, cr: CurrentRange) -> None: ...
    def SetDelay(self, name: str, dec: float) -> None: ...
    def SetInt16(self, name: str, dec: int) -> None: ...
    def SetInt16Array(self, name: str, array: Array_1[int]) -> None: ...
    def SetInt32(self, name: str, b: int) -> None: ...
    def SetInt8(self, name: str, b: int) -> None: ...
    def SetInt8Array(self, name: str, array: Array_1[int]) -> None: ...
    def SetOverrides(self, overrides: str) -> None: ...
    def SetTimeCon(self, name: str, dec: float) -> int: ...
    def SetUInt32(self, name: str, b: int) -> None: ...
    def ToString(self) -> str: ...


class Encryption:
    def __init__(self) -> None: ...
    BlockSize : int
    KeySize : int
    MacSize : int
    NonceSize : int
    @staticmethod
    def CCMCreateTimeBasedNonce() -> Array_1[int]: ...
    @staticmethod
    def CCMDecrypt(encryptedMessage: Array_1[int], key: Array_1[int]) -> Array_1[int]: ...
    @staticmethod
    def CCMEncrypt(secretPayload: Array_1[int], key: Array_1[int], nonce: Array_1[int], nonSecretPayload: Array_1[int] = ...) -> Array_1[int]: ...
    @staticmethod
    def GetSecureRandom(n: int) -> Array_1[int]: ...


class Enum_GenericClasses(abc.ABCMeta):
    Generic_Enum_GenericClasses_Enum_1_T = typing.TypeVar('Generic_Enum_GenericClasses_Enum_1_T')
    def __getitem__(self, types : typing.Type[Generic_Enum_GenericClasses_Enum_1_T]) -> typing.Type[Enum_1[Generic_Enum_GenericClasses_Enum_1_T]]: ...

Enum : Enum_GenericClasses

Enum_1_T = typing.TypeVar('Enum_1_T')
class Enum_1(typing.Generic[Enum_1_T]):
    def __init__(self) -> None: ...
    @classmethod
    @property
    def Count(cls) -> int: ...
    @staticmethod
    def GetAllFlagDescriptions(values: clr.Reference[Array_1[int]]) -> Array_1[str]: ...
    @staticmethod
    def GetFlagCount(enumerator: Enum_1_T) -> int: ...
    # Skipped GetFlagDescriptions due to it being static, abstract and generic.

    GetFlagDescriptions : GetFlagDescriptions_MethodGroup[Enum_1_T]
    GetFlagDescriptions_MethodGroup_Enum_1_T = typing.TypeVar('GetFlagDescriptions_MethodGroup_Enum_1_T')
    class GetFlagDescriptions_MethodGroup(typing.Generic[GetFlagDescriptions_MethodGroup_Enum_1_T]):
        GetFlagDescriptions_MethodGroup_Enum_1_T = Enum_1.GetFlagDescriptions_MethodGroup_Enum_1_T
        @typing.overload
        def __call__(self, enumerator: GetFlagDescriptions_MethodGroup_Enum_1_T) -> Array_1[str]:...
        @typing.overload
        def __call__(self, enumerator: GetFlagDescriptions_MethodGroup_Enum_1_T, values: clr.Reference[Array_1[int]]) -> Array_1[str]:...

    # Skipped GetFlagNames due to it being static, abstract and generic.

    GetFlagNames : GetFlagNames_MethodGroup[Enum_1_T]
    GetFlagNames_MethodGroup_Enum_1_T = typing.TypeVar('GetFlagNames_MethodGroup_Enum_1_T')
    class GetFlagNames_MethodGroup(typing.Generic[GetFlagNames_MethodGroup_Enum_1_T]):
        GetFlagNames_MethodGroup_Enum_1_T = Enum_1.GetFlagNames_MethodGroup_Enum_1_T
        @typing.overload
        def __call__(self, enumerator: GetFlagNames_MethodGroup_Enum_1_T) -> Array_1[str]:...
        @typing.overload
        def __call__(self, enumerator: GetFlagNames_MethodGroup_Enum_1_T, values: clr.Reference[Array_1[int]]) -> Array_1[str]:...



class enumBlankType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    None_ : enumBlankType # 0
    SeperateMeasurement : enumBlankType # 1
    SubstractiveStripping : enumBlankType # 2


class enumDetermination(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    StandardAddition : enumDetermination # 1
    Calibration : enumDetermination # 2


class EnumExtraValueOld(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    None_ : EnumExtraValueOld # 0
    Current : EnumExtraValueOld # 1
    Potential : EnumExtraValueOld # 2
    WE2 : EnumExtraValueOld # 3
    AuxInput : EnumExtraValueOld # 4
    Reverse : EnumExtraValueOld # 6
    PolyStatWE : EnumExtraValueOld # 7
    DCcurrent : EnumExtraValueOld # 8
    CEPotential : EnumExtraValueOld # 9


class enumReaction(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Reduction : enumReaction # 1
    Oxidation : enumReaction # 2


class enumSignal(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    DC_Current : enumSignal # 1
    Peak : enumSignal # 2


class enumStandardsValues(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    ConcentrationsAddedToSample : enumStandardsValues # 1
    VolumesAddedToCell : enumStandardsValues # 2


class enumUsePeakValue(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    PeakHeight : enumUsePeakValue # 0
    PeakArea : enumUsePeakValue # 1
    PeakSumSlopes : enumUsePeakValue # 2


class ExtraValueMask(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    None_ : ExtraValueMask # 0
    CurrentExtraWE : ExtraValueMask # 1
    PotentialExtraRE : ExtraValueMask # 2
    BipotWE : ExtraValueMask # 4
    PolyStatWE : ExtraValueMask # 8
    AuxInput : ExtraValueMask # 16
    Forward : ExtraValueMask # 32
    Reverse : ExtraValueMask # 64
    IForwardReverse : ExtraValueMask # 96
    DCcurrent : ExtraValueMask # 128
    CEPotential : ExtraValueMask # 256
    BipotPotential : ExtraValueMask # 512
    DualEIS : ExtraValueMask # 1024
    WEvsCEPotential : ExtraValueMask # 2048
    REvsGNDPotential : ExtraValueMask # 4096
    SE2vsXPotential : ExtraValueMask # 8192
    Temperature : ExtraValueMask # 16384
    BoardTemperature : ExtraValueMask # 32768


class FixedCurrentRange(Ranging):
    def __init__(self, cr: CurrentRange, supportedRanges: List_1[CurrentRange] = ...) -> None: ...
    @property
    def Autoranging(self) -> bool: ...
    @property
    def CurrentRange(self) -> CurrentRange: ...
    @CurrentRange.setter
    def CurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def MaximumCurrentRange(self) -> CurrentRange: ...
    @MaximumCurrentRange.setter
    def MaximumCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def MinimumCurrentRange(self) -> CurrentRange: ...
    @MinimumCurrentRange.setter
    def MinimumCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def StartCurrentRange(self) -> CurrentRange: ...
    @StartCurrentRange.setter
    def StartCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def SupportedCurrentRanges(self) -> List_1[CurrentRange]: ...
    @SupportedCurrentRanges.setter
    def SupportedCurrentRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...


class FixedPotentialRange(RangingPotential):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pr: PotentialRange, supportedRanges: List_1[PotentialRange] = ...) -> None: ...
    PotentialRange : PotentialRange
    @property
    def Autoranging(self) -> bool: ...
    @property
    def MaximumPotentialRange(self) -> PotentialRange: ...
    @MaximumPotentialRange.setter
    def MaximumPotentialRange(self, value: PotentialRange) -> PotentialRange: ...
    @property
    def MinimumPotentialRange(self) -> PotentialRange: ...
    @MinimumPotentialRange.setter
    def MinimumPotentialRange(self, value: PotentialRange) -> PotentialRange: ...
    @property
    def StartPotentialRange(self) -> PotentialRange: ...
    @StartPotentialRange.setter
    def StartPotentialRange(self, value: PotentialRange) -> PotentialRange: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(self, value: List_1[PotentialRange]) -> List_1[PotentialRange]: ...


class FunctionScriptLine(ScriptLine):
    def __init__(self, command: MethodScriptDeviceCapabilities.MSCommands, value: str, indentation: int) -> None: ...
    Args : IEnumerable_1[str]
    Command : MethodScriptDeviceCapabilities.MSCommands
    @property
    def Function(self) -> str: ...
    @Function.setter
    def Function(self, value: str) -> str: ...
    @property
    def Indentation(self) -> str: ...


class GetCurrentThreadFunc(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> IThreadWrapper: ...
    def Invoke(self) -> IThreadWrapper: ...


class ICalibrationMethod(typing.Protocol):
    @abc.abstractmethod
    def CalculateSignal(self, c: Curve) -> float: ...


class ILevelPeakSignal(typing.Protocol):
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...


class INPointsMethod(typing.Protocol):
    @property
    def nPoints(self) -> int: ...
    @abc.abstractmethod
    def GetNPoints(self, capabilities: DeviceCapabilities) -> int: ...


class IRange(typing.Protocol):
    @property
    def Description(self) -> str: ...
    @property
    def Factor(self) -> float: ...


class IThreadWrapper(typing.Protocol):
    @property
    def InternalThead(self) -> typing.Any: ...
    @property
    def IsAlive(self) -> bool: ...
    @property
    def IsBackground(self) -> bool: ...
    @IsBackground.setter
    def IsBackground(self, value: bool) -> bool: ...
    @property
    def Priority(self) -> int: ...
    @Priority.setter
    def Priority(self, value: int) -> int: ...
    @property
    def ThreadId(self) -> int: ...
    @abc.abstractmethod
    def Abort(self) -> None: ...
    @abc.abstractmethod
    def Start(self) -> None: ...


class MeasType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    New : MeasType # 0
    Overlay : MeasType # 1
    Blank : MeasType # 2
    Sample : MeasType # 3
    Standard_1 : MeasType # 4
    Standard_2 : MeasType # 5
    Standard_3 : MeasType # 6
    Standard_4 : MeasType # 7


class Measurement(IDisposable, IEnumerable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, coreVersion: Version) -> None: ...
    @typing.overload
    def __init__(self, m: Method) -> None: ...

    class CurveCollectionChangedEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, curves: Array_1[Curve], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, curves: Array_1[Curve]) -> None: ...


    class EISDataCollectionChangedEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, eisData: EISData, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, eisData: EISData) -> None: ...


    class SingleCurveChangedEventHandler(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, sender: typing.Any, curve: Curve, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(self, sender: typing.Any, curve: Curve) -> None: ...

    Channel : int
    @property
    def BlankCurve(self) -> Curve: ...
    @BlankCurve.setter
    def BlankCurve(self, value: Curve) -> Curve: ...
    @property
    def ContainsBlankSubtractedCurves(self) -> bool: ...
    @property
    def ContainsEISdata(self) -> bool: ...
    @property
    def DataSet(self) -> DataSetCommon: ...
    @property
    def DeviceUsed(self) -> enumDeviceType: ...
    @property
    def DeviceUsedFW(self) -> str: ...
    @property
    def DeviceUsedSerial(self) -> str: ...
    @property
    def EISdata(self) -> List_1[EISData]: ...
    @EISdata.setter
    def EISdata(self, value: List_1[EISData]) -> List_1[EISData]: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def Item(self) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Item(self) -> Curve: ...
    @Item.setter
    def Item(self, value: Curve) -> Curve: ...
    @property
    def Method(self) -> Method: ...
    @Method.setter
    def Method(self, value: Method) -> Method: ...
    @property
    def nCurves(self) -> int: ...
    @property
    def nEISdata(self) -> int: ...
    @property
    def OcpValue(self) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @TimeStamp.setter
    def TimeStamp(self, value: DateTime) -> DateTime: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    def AddCurve(self, c: Curve) -> Curve: ...
    def AddCurves(self, ccol: Array_1[Curve]) -> None: ...
    def AddCurveSilent(self, c: Curve) -> None: ...
    def AddEISdata(self, eis: EISData, silent: bool = ...) -> None: ...
    def AddEISdataForGraphView(self) -> None: ...
    def ClearAllLevels(self) -> None: ...
    def ClearAllPeaks(self) -> None: ...
    def ClearCurves(self) -> None: ...
    def ClearCurvesSilent(self) -> None: ...
    def Clone(self) -> Measurement: ...
    def ContainsBlank(self) -> bool: ...
    def ContainsCurve(self, c: Curve) -> bool: ...
    def Dispose(self) -> None: ...
    def FilterPeakForAnalyte(self, pl: PeakList, c: Curve, m: ScanMethod, iAnalyte: int) -> None: ...
    def FindPeaks(self, peakShoulders: bool = ..., mergeOverlappingPeaks: bool = ...) -> None: ...
    def FindPeaksAllAnalytesAllCurves(self, peakShoulders: bool = ...) -> None: ...
    def FindPeaksAllAnalytesSingleCurve(self, c: Curve, peakShoulders: bool = ...) -> None: ...
    def FindPeaksSingleAnalyte(self, iAnalyte: int) -> None: ...
    def FindPeaksSingleAnalyteSingleCurve(self, iAnalyte: int, c: Curve, peakShoulders: bool = ...) -> None: ...
    def GetCurveArray(self) -> Array_1[Curve]: ...
    def GetEISDataArray(self) -> Array_1[EISData]: ...
    @staticmethod
    def MeasurementFromJson(jr: JsonReader, coreVersion: Version, cancellationToken: CancellationToken) -> Task_1[Measurement]: ...
    def OnPropertyChanged(self, e: PropertyChangedEventArgs) -> None: ...
    def RemoveCurve(self, c: Curve) -> None: ...
    def RemoveCurveSilent(self, c: Curve) -> None: ...
    def RemoveEISdata(self, eis: EISData) -> None: ...
    def RemoveEISdataSilent(self, eis: EISData) -> None: ...
    def SetManualPeakForAnalyte(self, iAnalyte: int, c: Curve) -> None: ...
    def SortCurves(self) -> None: ...
    def ToJsonBag(self) -> JsonBag: ...
    def ToJsonWriterAsync(self, jw: JsonWriter, cancellationToken: CancellationToken) -> Task: ...
    def ToString(self) -> str: ...


class Method(INotifyPropertyChanged, abc.ABC):

    class EnumPalmSensBipotMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        constant : Method.EnumPalmSensBipotMode # 0
        offset : Method.EnumPalmSensBipotMode # 1


    class InvalidEBiPotOffsetException(Exception):
        @property
        def Data(self) -> IDictionary: ...
        @property
        def HelpLink(self) -> str: ...
        @HelpLink.setter
        def HelpLink(self, value: str) -> str: ...
        @property
        def HResult(self) -> int: ...
        @HResult.setter
        def HResult(self, value: int) -> int: ...
        @property
        def InnerException(self) -> Exception: ...
        @property
        def Message(self) -> str: ...
        @property
        def Source(self) -> str: ...
        @Source.setter
        def Source(self, value: str) -> str: ...
        @property
        def StackTrace(self) -> str: ...
        @property
        def TargetSite(self) -> MethodBase: ...


    class InvalidPowerFreqException(Exception):
        @property
        def Data(self) -> IDictionary: ...
        @property
        def HelpLink(self) -> str: ...
        @HelpLink.setter
        def HelpLink(self, value: str) -> str: ...
        @property
        def HResult(self) -> int: ...
        @HResult.setter
        def HResult(self, value: int) -> int: ...
        @property
        def InnerException(self) -> Exception: ...
        @property
        def Message(self) -> str: ...
        @property
        def Source(self) -> str: ...
        @Source.setter
        def Source(self, value: str) -> str: ...
        @property
        def StackTrace(self) -> str: ...
        @property
        def TargetSite(self) -> MethodBase: ...


    class MuxSettings:
        def __init__(self, OCPMode: bool) -> None: ...

        class UnselWESetting(typing.SupportsInt):
            @typing.overload
            def __init__(self, value : int) -> None: ...
            @typing.overload
            def __init__(self, value : int, force_if_true: bool) -> None: ...
            def __int__(self) -> int: ...

            # Values:
            FLOAT : Method.MuxSettings.UnselWESetting # 0
            GND : Method.MuxSettings.UnselWESetting # 1
            VSTDBY : Method.MuxSettings.UnselWESetting # 2

        CommonCERE : bool
        ConnectCERE : bool
        ConnSEWE : bool
        OCPMode : bool
        SwitchBoxOn : bool
        UnselWE : Method.MuxSettings.UnselWESetting
        @staticmethod
        def FromString(muxSettings: str) -> Method.MuxSettings: ...
        def GetBits(self, muxType: MuxType) -> int: ...
        def GetMuxProtocolSettingsBitsMS(self) -> int: ...
        def ToString(self) -> str: ...
        # Skipped ParseString due to it being static, abstract and generic.

        ParseString : ParseString_MethodGroup
        class ParseString_MethodGroup:
            @typing.overload
            def __call__(self, muxSettings: str) -> None:...
            @typing.overload
            def __call__(self, settings: Method.MuxSettings, muxSettings: str) -> None:...



    class RangingTypes(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        None_ : Method.RangingTypes # 0
        Current : Method.RangingTypes # 1
        Potential : Method.RangingTypes # 2
        Both : Method.RangingTypes # 3


    class TechniqueIds(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        LinearSweep : Method.TechniqueIds # 0
        DifferentialPulse : Method.TechniqueIds # 1
        SquareWave : Method.TechniqueIds # 2
        NormalPulse : Method.TechniqueIds # 3
        ACVoltammetry : Method.TechniqueIds # 4
        CyclicVoltammetry : Method.TechniqueIds # 5
        ChronoPotStripping : Method.TechniqueIds # 6
        AmperometricDetection : Method.TechniqueIds # 7
        PulsedAmpDetection : Method.TechniqueIds # 8
        FastAmperometry : Method.TechniqueIds # 9
        Potentiometry : Method.TechniqueIds # 10
        MultiplePulseAmperometry : Method.TechniqueIds # 11
        MultistepAmperometry : Method.TechniqueIds # 12
        MultistepPotentiometry : Method.TechniqueIds # 13
        ImpedimetricMethod : Method.TechniqueIds # 14
        MixedMode : Method.TechniqueIds # 15
        LinearSweepPotentiometry : Method.TechniqueIds # 17
        ImpedimetricGstatMethod : Method.TechniqueIds # 18
        MethodScriptSandbox : Method.TechniqueIds # 19

    DefaultXAxis : DataArrayType
    DefaultYAxis : DataArrayType
    FILTERBYTE : int
    MethodIds : List_1[str]
    MethodIdsByTechniqueId : Dictionary_2[int, Array_1[str]]
    MethodIsGalvanostatic : bool
    MuxSett : Method.MuxSettings
    OPTIONSINT : int
    PeakOverlap : float
    PGAGAINBYTE : int
    PolyEmStat : PolyEmStatMethodEx
    RecordCE : bool
    SE2ExtraValueChannelNames : IReadOnlyDictionary_2[int, str]
    SE2VersusXChannelNames : IReadOnlyDictionary_2[int, str]
    SmoothLevel : int
    Technique : int
    UseMuxChannel : BitArray
    UseStirrer : bool
    ViewBottom : float
    ViewLeft : float
    ViewRight : float
    ViewTop : float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(self, value: EnumPalmSensBipotMode) -> EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @classmethod
    @property
    def PowerFreq(cls) -> int: ...
    @classmethod
    @PowerFreq.setter
    def PowerFreq(cls, value: int) -> int: ...
    @classmethod
    @property
    def PowerLinePeriod(cls) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(self, value: PotentionstatChannels) -> PotentionstatChannels: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    @staticmethod
    def ConvertRiseTimeToBandwidth(riseTime: float) -> float: ...
    @staticmethod
    def CopyMethod(mSource: Method, mDestination: clr.Reference[Method]) -> None: ...
    def Deserialize(self, contents: str) -> None: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def DeterminePGStatMode(self, capabilities: DeviceCapabilities, isVersusOCPStep: bool = ...) -> None: ...
    def Dispose(self) -> None: ...
    def Equals(self, o: typing.Any) -> bool: ...
    @staticmethod
    def FromMethodID(methodID: str) -> Method: ...
    @staticmethod
    def FromTechniqueNumber(i: int) -> Method: ...
    def GetBandwidth(self, capabilities: DeviceCapabilities) -> float: ...
    def GetExpectedPotentialRange(self, capabilities: DeviceCapabilities, min: clr.Reference[float], max: clr.Reference[float], isVersusOCPStep: bool = ...) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetIntervalTime(self, capab: DeviceCapabilities) -> float: ...
    def GetMaximumEstimatedMeasurementDuration(self, capab: DeviceCapabilities, withLevelStageOverhead: bool = ...) -> float: ...
    @abc.abstractmethod
    def GetMethodID(self) -> str: ...
    @abc.abstractmethod
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetNextSelectedMuxChannel(self, iLastChannel: int) -> int: ...
    @abc.abstractmethod
    def GetPointsPerSecond(self, capabilities: DeviceCapabilities = ...) -> float: ...
    def HasValidationErrors(self, c: DeviceCapabilities) -> bool: ...
    def OCPGetEValue(self, i: int) -> float: ...
    def OCPGetLabelIndexedPar(self, i: int) -> str: ...
    def OCPGetOCPCorrectedEvalue(self, i: int) -> float: ...
    def OCPSetEValue(self, i: int, value: float) -> None: ...
    def OCPUseIndexedPar(self, i: int) -> bool: ...
    def ReceiveMeasurement(self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...) -> ActiveMeasurement: ...
    def ReceiveMeasurementAsync(self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ..., taskBarrier: TaskBarrier = ...) -> Task_1[ActiveMeasurement]: ...
    @abc.abstractmethod
    def ReceiveMeasurementMS(self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...) -> ActiveMeasurement: ...
    @abc.abstractmethod
    def ReceiveMeasurementMSAsync(self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ..., taskBarrier: TaskBarrier = ...) -> Task_1[ActiveMeasurement]: ...
    def ResetView(self) -> None: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SupportedRangingType(self, capabilities: DeviceCapabilities) -> Method.RangingTypes: ...
    def SupportsDeviceStorage(self, deviceCapabilities: DeviceCapabilities) -> bool: ...
    @abc.abstractmethod
    def SupportsHWSync(self, capabilities: DeviceCapabilities) -> bool: ...
    def ToHex(self, rev: int, capabilities: DeviceCapabilities) -> EncodedMethod: ...
    @abc.abstractmethod
    def ToShortString(self) -> str: ...
    def Validate(self, capab: DeviceCapabilities) -> List_1[MethodError]: ...
    def ValidateResponseTime(self, capab: DeviceCapabilities) -> str: ...
    def ValidateVsOCPStep(self, capab: DeviceCapabilities) -> List_1[MethodError]: ...
    def ValidationErrors(self, c: DeviceCapabilities, isVersusOCPStep: bool = ...) -> str: ...
    # Skipped OCPUsePar due to it being static, abstract and generic.

    OCPUsePar : OCPUsePar_MethodGroup
    class OCPUsePar_MethodGroup:
        def __getitem__(self, t:typing.Type[OCPUsePar_1_T1]) -> OCPUsePar_1[OCPUsePar_1_T1]: ...

        OCPUsePar_1_T1 = typing.TypeVar('OCPUsePar_1_T1')
        class OCPUsePar_1(typing.Generic[OCPUsePar_1_T1]):
            OCPUsePar_1_T = Method.OCPUsePar_MethodGroup.OCPUsePar_1_T1
            def __call__(self, propertyExpression: Expression_1[Func_1[OCPUsePar_1_T]]) -> bool:...


    # Skipped OnPropertyChanged due to it being static, abstract and generic.

    OnPropertyChanged : OnPropertyChanged_MethodGroup
    class OnPropertyChanged_MethodGroup:
        @typing.overload
        def __call__(self, e: PropertyChangedEventArgs) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...

    # Skipped ToHex1TechniqueSpecific due to it being static, abstract and generic.

    ToHex1TechniqueSpecific : ToHex1TechniqueSpecific_MethodGroup
    class ToHex1TechniqueSpecific_MethodGroup:
        @typing.overload
        def __call__(self, m: EncodedMethodV1) -> None:...
        @typing.overload
        def __call__(self, capabilities: DeviceCapabilities) -> EncodedMethodV1:...

    # Skipped ToMethodScript due to it being static, abstract and generic.

    ToMethodScript : ToMethodScript_MethodGroup
    class ToMethodScript_MethodGroup:
        @typing.overload
        def __call__(self, capabilities: MethodScriptDeviceCapabilities, connMS: ClientConnectionMS = ...) -> MethodScript:...
        @typing.overload
        def __call__(self, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> MethodScript:...



class MethodScript(EncodedMethod):
    def __init__(self, script: IEnumerable_1[ScriptLine], capabilities: MethodScriptDeviceCapabilities) -> None: ...

    class LimitAction(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        Break : MethodScript.LimitAction # 0
        Abort : MethodScript.LimitAction # 1
        Reverse : MethodScript.LimitAction # 2


    class PGStatModes(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        DACOff : MethodScript.PGStatModes # 0
        OCP : MethodScript.PGStatModes # 2
        LowSpeed : MethodScript.PGStatModes # 4
        HighSpeed : MethodScript.PGStatModes # 8
        Combined : MethodScript.PGStatModes # 16
        PolyWE : MethodScript.PGStatModes # 32
        GalvanoStatic : MethodScript.PGStatModes # 64

    Capabilities : MethodScriptDeviceCapabilities
    DefaultIntervalTime : float
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...
    def checksum(self) -> int: ...
    @staticmethod
    def ConsecutiveMuxOnFinishedScript(method: Method, capabilities: MethodScriptDeviceCapabilities) -> MethodScript: ...
    @staticmethod
    def ConvertToMethodSCRIPTPrecision(value: float) -> float: ...
    def OverrideFileName(self, fileName: str) -> None: ...
    def RebuildScript(self) -> None: ...
    def ToString(self) -> str: ...
    @staticmethod
    def VersusOCPScript(method: Method, capabilities: MethodScriptDeviceCapabilities, connMS: ClientConnectionMS) -> MethodScript: ...
    # Skipped ConvertValue due to it being static, abstract and generic.

    ConvertValue : ConvertValue_MethodGroup
    class ConvertValue_MethodGroup:
        @typing.overload
        def __call__(self, value: str) -> float:...
        @typing.overload
        def __call__(self, value: float, valueMagnitudeSI: int = ...) -> str:...
        @typing.overload
        def __call__(self, cr: float, acr: CurrentRange) -> str:...



class MethodScriptACV(MethodScriptPotentialScanMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptCA(MethodScriptPotentialTimeMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptCP(MethodScriptCurrentTimeMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptCurrentScanMethod(MethodScriptScanMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptCurrentTimeMethod(MethodScriptTimeMethod):
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptCV(MethodScriptPotentialScanMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptDPV(MethodScriptPotentialScanMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptEIS(MethodScriptISBase):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptFA(MethodScriptCA):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptFCV(MethodScriptCV):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptFGIS(MethodScriptGEIS):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptFIS(MethodScriptEIS):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptGEIS(MethodScriptISBase):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptISBase(MethodScript):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptLSP(MethodScriptCurrentScanMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptLSV(MethodScriptPotentialScanMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptMM(MethodScript):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...
    def GetPckVariables(self, mm: MixedMode, hasPretreatment: bool) -> List_1[str]: ...


class MethodScriptMSA(MethodScriptPotentialTimeMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptMSP(MethodScriptCurrentTimeMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptNPV(MethodScriptPotentialScanMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptOCP(MethodScriptPotentialTimeMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptPAD(MethodScriptPotentialTimeMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptParameters:
    def __init__(self, capabilities: MethodScriptDeviceCapabilities) -> None: ...
    AdditionalTimeDomainArray : str
    MuxChannelArray : str
    @property
    def ACAdditionalVariable(self) -> str: ...
    @property
    def ACCurrentVariable(self) -> str: ...
    @property
    def ACPotentialVariable(self) -> str: ...
    @property
    def AuxiliaryVariable(self) -> str: ...
    @property
    def BipotCurrentVarialble(self) -> str: ...
    @property
    def CEPotentialVariable(self) -> str: ...
    @property
    def ChargeVariable(self) -> str: ...
    @property
    def CurrentArray(self) -> str: ...
    @property
    def CurrentVariable(self) -> str: ...
    @property
    def DCAdditionalVariable(self) -> str: ...
    @property
    def DCCurrentVariable(self) -> str: ...
    @property
    def DCPotentialVariable(self) -> str: ...
    @property
    def ExtraVariable(self) -> str: ...
    @property
    def ExtraVariable2(self) -> str: ...
    @property
    def ExtraVariable3(self) -> str: ...
    @property
    def ExtraVariable4(self) -> str: ...
    @property
    def ForwardCurrentVariable(self) -> str: ...
    @property
    def FrequencyVariable(self) -> str: ...
    @property
    def ImaginaryImpedanceVariable(self) -> str: ...
    @property
    def ImaginaryImpedanceVariable2(self) -> str: ...
    @property
    def Index2Variable(self) -> str: ...
    @property
    def IndexVariable(self) -> str: ...
    @property
    def OCPPotentialVariable(self) -> str: ...
    @property
    def PinVariable(self) -> str: ...
    @property
    def PotentialArray(self) -> str: ...
    @property
    def PotentialVariable(self) -> str: ...
    @property
    def PreviousCurrentValue(self) -> str: ...
    @property
    def RealImpedanceVariable(self) -> str: ...
    @property
    def RealImpedanceVariable2(self) -> str: ...
    @property
    def REPotentialVariable(self) -> str: ...
    @property
    def ReverseCurrentVariable(self) -> str: ...
    @property
    def REvsSE2PotentialVariable(self) -> str: ...
    @property
    def SEvsSE2PotentialVariable(self) -> str: ...
    @property
    def Temp2Variable(self) -> str: ...
    @property
    def Temp3Variable(self) -> str: ...
    @property
    def TempVariable(self) -> str: ...
    @property
    def TimeVariable(self) -> str: ...
    @property
    def VsOCPVariables(self) -> Array_1[str]: ...
    @property
    def WECurrentVariable(self) -> str: ...


class MethodScriptPotentialScanMethod(MethodScriptScanMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptPotentialTimeMethod(MethodScriptTimeMethod):
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptScanMethod(MethodScript):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptSWV(MethodScriptPotentialScanMethod):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS = ...) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MethodScriptTimeMethod(MethodScript):
    def __init__(self, method: Method, capabilities: MethodScriptDeviceCapabilities, forEditor: bool, connMS: ClientConnectionMS) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...


class MuxMethod(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Sequentially : MuxMethod # 0
    Alternatingly : MuxMethod # 1
    None_ : MuxMethod # -1


class MuxModel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    MUX8 : MuxModel # 0
    MUX16 : MuxModel # 1
    MUX8R2 : MuxModel # 2
    PicoMUX16 : MuxModel # 3
    PicoMUX256 : MuxModel # 4


class Plottable(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, coreVersion: Version) -> None: ...

    class FinishedEventArgs(EventArgs):
        def __init__(self, redraw: bool) -> None: ...
        Redraw : bool

    Hash : Array_1[int]
    @property
    def Appearance(self) -> VisualSettings: ...
    @Appearance.setter
    def Appearance(self, value: VisualSettings) -> VisualSettings: ...
    @property
    def Error(self) -> str: ...
    @Error.setter
    def Error(self, value: str) -> str: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsInPlot(self) -> bool: ...
    @IsInPlot.setter
    def IsInPlot(self, value: bool) -> bool: ...
    @property
    def MuxChannel(self) -> int: ...
    @MuxChannel.setter
    def MuxChannel(self, value: int) -> int: ...
    @property
    def OCPValue(self) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def SuspendSavedToFileChangedEvent(self) -> bool: ...
    @SuspendSavedToFileChangedEvent.setter
    def SuspendSavedToFileChangedEvent(self, value: bool) -> bool: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def ValidHash(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    def Dispose(self) -> None: ...
    def NewHash(self, pass: Array_1[str]) -> None: ...
    def OnFinished(self, redraw: bool = ...) -> None: ...
    def SetVisibilityNoEvents(self, visible: bool) -> None: ...
    def ToJsonBag(self) -> JsonBag: ...
    def ToJsonWriterAsync(self, jw: JsonWriter, cancellationToken: CancellationToken) -> Task: ...


class PolyEmStatMethodEx:
    def __init__(self, parent: Method) -> None: ...

    class CalibrationCurveValues:
        a : float
        b : float
        c : float


    class enumEMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        constant : PolyEmStatMethodEx.enumEMode # 0
        offset : PolyEmStatMethodEx.enumEMode # 1

    CalibrationValues : Array_1[PolyEmStatMethodEx.CalibrationCurveValues]
    N_BIPOT_CHANNELS : int
    PolyStatMode : Array_1[PolyEmStatMethodEx.enumEMode]
    SelectedRange : Array_1[AutoRanging]
    WEPotential : Array_1[float]
    def GetBipotMethod(self, iBP: int, capabilities: DeviceCapabilities) -> Method: ...
    def SetEMode(self, iChannel: int, mode: PolyEmStatMethodEx.enumEMode) -> None: ...
    def SetWEPotential(self, index: int, value: float) -> None: ...


class PotentialMethod(ScanMethod, IMixedModeStageMethod, IFastMeasurement, INPointsMethod):
    def __init__(self, t: int) -> None: ...
    DefaultXAxis : DataArrayType
    DefaultYAxis : DataArrayType
    EPretreat : Array_1[float]
    MethodIsGalvanostatic : bool
    MuxSett : Method.MuxSettings
    PeakOverlap : float
    PolyEmStat : PolyEmStatMethodEx
    RecordCE : bool
    SmoothLevel : int
    Technique : int
    tPretreat : Array_1[float]
    UseMuxChannel : BitArray
    UseStirrer : bool
    ViewBottom : float
    ViewLeft : float
    ViewRight : float
    ViewTop : float
    @property
    def AnalyteName(self) -> Array_1[str]: ...
    @AnalyteName.setter
    def AnalyteName(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def AnalytePeakAutodetect(self) -> Array_1[bool]: ...
    @AnalytePeakAutodetect.setter
    def AnalytePeakAutodetect(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(self, value: Method.EnumPalmSensBipotMode) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def BlankType(self) -> enumBlankType: ...
    @BlankType.setter
    def BlankType(self, value: enumBlankType) -> enumBlankType: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def CellVolume(self) -> float: ...
    @CellVolume.setter
    def CellVolume(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Determination(self) -> enumDetermination: ...
    @Determination.setter
    def Determination(self, value: enumDetermination) -> enumDetermination: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EPeakLeft(self) -> Array_1[float]: ...
    @EPeakLeft.setter
    def EPeakLeft(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeakRight(self) -> Array_1[float]: ...
    @EPeakRight.setter
    def EPeakRight(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeaks(self) -> Array_1[float]: ...
    @EPeaks.setter
    def EPeaks(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakValue(self) -> enumUsePeakValue: ...
    @PeakValue.setter
    def PeakValue(self, value: enumUsePeakValue) -> enumUsePeakValue: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SampleVolume(self) -> float: ...
    @SampleVolume.setter
    def SampleVolume(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(self, value: PotentionstatChannels) -> PotentionstatChannels: ...
    @property
    def SolutionNr(self) -> Array_1[int]: ...
    @SolutionNr.setter
    def SolutionNr(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StandardConcentration(self) -> Array_1[float]: ...
    @property
    def StandardsValues(self) -> enumStandardsValues: ...
    @StandardsValues.setter
    def StandardsValues(self, value: enumStandardsValues) -> enumStandardsValues: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepPotential(self) -> float: ...
    @StepPotential.setter
    def StepPotential(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsDetermination(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPBeginPotential(self) -> float: ...
    @VersusOCPBeginPotential.setter
    def VersusOCPBeginPotential(self, value: float) -> float: ...
    @property
    def VersusOCPEndPotential(self) -> float: ...
    @VersusOCPEndPotential.setter
    def VersusOCPEndPotential(self, value: float) -> float: ...
    @property
    def VolumeConcentration(self) -> Array_1[float]: ...
    @VolumeConcentration.setter
    def VolumeConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def GetNPoints(self, capabilities: DeviceCapabilities) -> int: ...
    def GetRealNPoints(self, capabilities: DeviceCapabilities) -> int: ...
    def GetRealStepPotential(self, capabilities: DeviceCapabilities) -> float: ...
    def IsFastMeasurement(self, capab: DeviceCapabilities) -> bool: ...
    def ReceiveMeasurementMS(self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ..., taskBarrier: TaskBarrier = ...) -> Task_1[ActiveMeasurement]: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...


class PotentialRange(IRange, IComparable):
    @typing.overload
    def __init__(self, bag: JsonBag, coreVersion: Version) -> None: ...
    @typing.overload
    def __init__(self, pr: PotentialRanges) -> None: ...

    class InvalidCRByte(Exception):
        def __init__(self, b: int) -> None: ...
        @property
        def Data(self) -> IDictionary: ...
        @property
        def HelpLink(self) -> str: ...
        @HelpLink.setter
        def HelpLink(self, value: str) -> str: ...
        @property
        def HResult(self) -> int: ...
        @HResult.setter
        def HResult(self, value: int) -> int: ...
        @property
        def InnerException(self) -> Exception: ...
        @property
        def Message(self) -> str: ...
        @property
        def Source(self) -> str: ...
        @Source.setter
        def Source(self, value: str) -> str: ...
        @property
        def StackTrace(self) -> str: ...
        @property
        def TargetSite(self) -> MethodBase: ...

    AvailablePotentialRanges : Array_1[PotentialRange]
    @property
    def Description(self) -> str: ...
    @property
    def Factor(self) -> float: ...
    @property
    def PR(self) -> PotentialRanges: ...
    def CompareTo(self, that: typing.Any) -> int: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    def Format(self, potential: float) -> str: ...
    def Format2(self, potential: float) -> str: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def GetPRFactor(cr: PotentialRanges) -> float: ...
    @staticmethod
    def GetPRString(cr: PotentialRanges) -> str: ...
    @staticmethod
    def GetRanges(pranges: Array_1[PotentialRanges]) -> List_1[PotentialRange]: ...
    def Higher(self, range: RangingPotential) -> PotentialRange: ...
    def Lower(self, range: RangingPotential) -> PotentialRange: ...
    def __eq__(self, a: PotentialRange, b: PotentialRange) -> bool: ...
    def __gt__(self, a: PotentialRange, b: PotentialRange) -> bool: ...
    def __ge__(self, a: PotentialRange, b: PotentialRange) -> bool: ...
    def __ne__(self, a: PotentialRange, b: PotentialRange) -> bool: ...
    def __lt__(self, a: PotentialRange, b: PotentialRange) -> bool: ...
    def __le__(self, a: PotentialRange, b: PotentialRange) -> bool: ...
    def ToJsonBag(self) -> JsonBag: ...
    def ToString(self) -> str: ...
    # Skipped Nearest due to it being static, abstract and generic.

    Nearest : Nearest_MethodGroup
    class Nearest_MethodGroup:
        @typing.overload
        def __call__(self, ranges: List_1[PotentialRange]) -> PotentialRange:...
        @typing.overload
        def __call__(self, ranges: List_1[PotentialRange], factor: float) -> PotentialRange:...



class PotentialRanges(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    pr1mV : PotentialRanges # 0
    pr10mV : PotentialRanges # 1
    pr20mV : PotentialRanges # 2
    pr50mV : PotentialRanges # 3
    pr100mV : PotentialRanges # 4
    pr200mV : PotentialRanges # 5
    pr500mV : PotentialRanges # 6
    pr1V : PotentialRanges # 7


class PotentionstatChannels(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Default : PotentionstatChannels # 0
    Ch0 : PotentionstatChannels # 2
    Ch1 : PotentionstatChannels # 4


class PowerManagement(abc.ABC):
    @staticmethod
    def AllowSleep() -> None: ...
    @staticmethod
    def Init(preventSleepFunc: Action, allowSleepFunc: Action) -> None: ...
    @staticmethod
    def PreventSleep() -> None: ...


class PSRun(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class PSThread:
    @typing.overload
    def __init__(self, thread: IThreadWrapper) -> None: ...
    @typing.overload
    def __init__(self, threadStart: PSRun) -> None: ...

    class ThreadPriorities(abc.ABC):
        @classmethod
        @property
        def AboveNormal(cls) -> int: ...
        @classmethod
        @property
        def BelowNormal(cls) -> int: ...
        @classmethod
        @property
        def Highest(cls) -> int: ...
        @classmethod
        @property
        def Lowest(cls) -> int: ...
        @classmethod
        @property
        def Normal(cls) -> int: ...

    @classmethod
    @property
    def CurrentThread(cls) -> PSThread: ...
    @property
    def InternalThead(self) -> typing.Any: ...
    @property
    def IsAlive(self) -> bool: ...
    @property
    def IsBackground(self) -> bool: ...
    @IsBackground.setter
    def IsBackground(self, value: bool) -> bool: ...
    @property
    def Priority(self) -> int: ...
    @Priority.setter
    def Priority(self, value: int) -> int: ...
    @property
    def ThreadId(self) -> int: ...
    def Abort(self) -> None: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def Init(createThreadFunc: CreateThreadFunc, sleepFunc: SleepFunc, spinWaitFunc: SpinWaitFunc, threadPriorities: Array_1[int], getCurThreadFunc: GetCurrentThreadFunc) -> None: ...
    def __eq__(self, a: PSThread, b: PSThread) -> bool: ...
    def __ne__(self, a: PSThread, b: PSThread) -> bool: ...
    @staticmethod
    def Sleep(ms: int) -> None: ...
    @staticmethod
    def SpinWait(iterations: int) -> None: ...
    def Start(self) -> None: ...


class Ranging(abc.ABC):
    @property
    def Autoranging(self) -> bool: ...
    @property
    def CurrentRange(self) -> CurrentRange: ...
    @CurrentRange.setter
    def CurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def MaximumCurrentRange(self) -> CurrentRange: ...
    @MaximumCurrentRange.setter
    def MaximumCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def MinimumCurrentRange(self) -> CurrentRange: ...
    @MinimumCurrentRange.setter
    def MinimumCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def StartCurrentRange(self) -> CurrentRange: ...
    @StartCurrentRange.setter
    def StartCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def SupportedCurrentRanges(self) -> List_1[CurrentRange]: ...
    @SupportedCurrentRanges.setter
    def SupportedCurrentRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @staticmethod
    def CheckRange(cr: CurrentRange, factor: float, supportedCurrentRanges: IEnumerable_1[CurrentRange]) -> CurrentRange: ...
    def GetOptimalRangeForCurrent(self, current: float, capab: DeviceCapabilities) -> int: ...


class RangingPotential(abc.ABC):
    PotentialRange : PotentialRange
    @property
    def Autoranging(self) -> bool: ...
    @property
    def MaximumPotentialRange(self) -> PotentialRange: ...
    @MaximumPotentialRange.setter
    def MaximumPotentialRange(self, value: PotentialRange) -> PotentialRange: ...
    @property
    def MinimumPotentialRange(self) -> PotentialRange: ...
    @MinimumPotentialRange.setter
    def MinimumPotentialRange(self, value: PotentialRange) -> PotentialRange: ...
    @property
    def StartPotentialRange(self) -> PotentialRange: ...
    @StartPotentialRange.setter
    def StartPotentialRange(self, value: PotentialRange) -> PotentialRange: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(self, value: List_1[PotentialRange]) -> List_1[PotentialRange]: ...
    @staticmethod
    def GetOptimalRangeForPotential(potential: float, capab: DeviceCapabilities) -> PotentialRange: ...


class RawMethodScript(MethodScript):
    @typing.overload
    def __init__(self, capabilities: MethodScriptDeviceCapabilities, methodScript: str) -> None: ...
    @typing.overload
    def __init__(self, capabilities: MethodScriptDeviceCapabilities, methodScript: str, forEditor: bool) -> None: ...
    Capabilities : MethodScriptDeviceCapabilities
    Parameters : MethodScriptParameters
    SendDataDuringPretreatment : bool
    @property
    def AddTimeData(self) -> bool: ...
    @AddTimeData.setter
    def AddTimeData(self, value: bool) -> bool: ...
    @property
    def ConnMS(self) -> ClientConnectionMS: ...
    @property
    def DeviceFileName(self) -> str: ...
    @property
    def ForEditor(self) -> bool: ...
    @property
    def Hibernate(self) -> bool: ...
    @Hibernate.setter
    def Hibernate(self, value: bool) -> bool: ...
    @property
    def HibernateForSeconds(self) -> float: ...
    @HibernateForSeconds.setter
    def HibernateForSeconds(self, value: float) -> float: ...
    @property
    def HibernateWakeOnTriggers(self) -> WakeOnTriggers: ...
    @HibernateWakeOnTriggers.setter
    def HibernateWakeOnTriggers(self, value: WakeOnTriggers) -> WakeOnTriggers: ...
    @property
    def Method(self) -> Method: ...
    @property
    def MethodScript(self) -> str: ...
    @property
    def SaveToDeviceEnabled(self) -> bool: ...
    @property
    def SaveToDeviceFileName(self) -> str: ...
    @SaveToDeviceFileName.setter
    def SaveToDeviceFileName(self, value: str) -> str: ...
    @property
    def SaveToNVM(self) -> bool: ...
    @SaveToNVM.setter
    def SaveToNVM(self, value: bool) -> bool: ...
    @property
    def SendDataDuringMeasurement(self) -> bool: ...
    def ToString(self) -> str: ...


class RichTextConversions:
    def __init__(self) -> None: ...
    @staticmethod
    def ConvertLoadedStringToRichText(stringToConvert: str) -> str: ...
    @staticmethod
    def ConvertRichTextToSaveString(stringToConvert: str) -> str: ...


class RunOnUserThreadFunc(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, action: PSRun, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, action: PSRun) -> None: ...


class ScanMethod(Method, IDisposable):
    def __init__(self, t: int) -> None: ...
    DefaultXAxis : DataArrayType
    DefaultYAxis : DataArrayType
    EPretreat : Array_1[float]
    MethodIsGalvanostatic : bool
    MuxSett : Method.MuxSettings
    PeakOverlap : float
    PolyEmStat : PolyEmStatMethodEx
    RecordCE : bool
    SmoothLevel : int
    Technique : int
    tPretreat : Array_1[float]
    UseMuxChannel : BitArray
    UseStirrer : bool
    ViewBottom : float
    ViewLeft : float
    ViewRight : float
    ViewTop : float
    @property
    def AnalyteName(self) -> Array_1[str]: ...
    @AnalyteName.setter
    def AnalyteName(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def AnalytePeakAutodetect(self) -> Array_1[bool]: ...
    @AnalytePeakAutodetect.setter
    def AnalytePeakAutodetect(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(self, value: Method.EnumPalmSensBipotMode) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def BlankType(self) -> enumBlankType: ...
    @BlankType.setter
    def BlankType(self, value: enumBlankType) -> enumBlankType: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def CellVolume(self) -> float: ...
    @CellVolume.setter
    def CellVolume(self, value: float) -> float: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Determination(self) -> enumDetermination: ...
    @Determination.setter
    def Determination(self, value: enumDetermination) -> enumDetermination: ...
    @property
    def EPeakLeft(self) -> Array_1[float]: ...
    @EPeakLeft.setter
    def EPeakLeft(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeakRight(self) -> Array_1[float]: ...
    @EPeakRight.setter
    def EPeakRight(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EPeaks(self) -> Array_1[float]: ...
    @EPeaks.setter
    def EPeaks(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakValue(self) -> enumUsePeakValue: ...
    @PeakValue.setter
    def PeakValue(self, value: enumUsePeakValue) -> enumUsePeakValue: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def SampleVolume(self) -> float: ...
    @SampleVolume.setter
    def SampleVolume(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(self, value: PotentionstatChannels) -> PotentionstatChannels: ...
    @property
    def SolutionNr(self) -> Array_1[int]: ...
    @SolutionNr.setter
    def SolutionNr(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StandardConcentration(self) -> Array_1[float]: ...
    @StandardConcentration.setter
    def StandardConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def StandardsValues(self) -> enumStandardsValues: ...
    @StandardsValues.setter
    def StandardsValues(self, value: enumStandardsValues) -> enumStandardsValues: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsDetermination(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VolumeConcentration(self) -> Array_1[float]: ...
    @VolumeConcentration.setter
    def VolumeConcentration(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def Equals(self, o: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SetAnalyteName(self, iAnalyte: int, name: str) -> None: ...
    def SetAnalytePeakAutodetect(self, iAnalyte: int, value: bool) -> None: ...
    def SetEPeakLeft(self, iAnalyte: int, EPeakLeftNew: float) -> None: ...
    def SetEPeakRight(self, iAnalyte: int, EPeakRightNew: float) -> None: ...
    def SetEPeaks(self, iAnalyte: int, EPeak: float) -> None: ...
    def SetSolutionNr(self, index: int, value: int) -> None: ...
    def SetStandardConcentration(self, index: int, value: float) -> None: ...
    def SetVolumeConcentration(self, row: int, col: int, value: float) -> None: ...


class ScriptLine:
    @typing.overload
    def __init__(self, command: MethodScriptDeviceCapabilities.MSCommands) -> None: ...
    @typing.overload
    def __init__(self, command: MethodScriptDeviceCapabilities.MSCommands, arg: str) -> None: ...
    @typing.overload
    def __init__(self, command: MethodScriptDeviceCapabilities.MSCommands, arg: str, indentation: int) -> None: ...
    @typing.overload
    def __init__(self, command: MethodScriptDeviceCapabilities.MSCommands, arg: int, indentation: int) -> None: ...
    @typing.overload
    def __init__(self, command: MethodScriptDeviceCapabilities.MSCommands, args: IEnumerable_1[str]) -> None: ...
    @typing.overload
    def __init__(self, command: MethodScriptDeviceCapabilities.MSCommands, args: IEnumerable_1[str], indentation: int) -> None: ...
    @typing.overload
    def __init__(self, command: MethodScriptDeviceCapabilities.MSCommands, indentation: int) -> None: ...
    Args : IEnumerable_1[str]
    Command : MethodScriptDeviceCapabilities.MSCommands
    @property
    def Function(self) -> str: ...
    @Function.setter
    def Function(self, value: str) -> str: ...
    @property
    def Indentation(self) -> str: ...
    def SetIndentation(self, indentation: int) -> None: ...
    # Skipped SetPGStatMode due to it being static, abstract and generic.

    SetPGStatMode : SetPGStatMode_MethodGroup
    class SetPGStatMode_MethodGroup:
        @typing.overload
        def __call__(self, pgStatMode: MethodScript.PGStatModes) -> ScriptLine:...
        @typing.overload
        def __call__(self, pgStatMode: MethodScript.PGStatModes, indentation: int) -> ScriptLine:...



class SE2vsXChannels(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    REvsSE2 : SE2vsXChannels # 0
    SEvsSE2 : SE2vsXChannels # 1


class SineCurve(Curve):
    def __init__(self, m: ImpedimetricIterationMethodBase, xData: DataArray, yData: DataArray, frequency: float = ..., sineDuration: float = ...) -> None: ...

    class EnumSine(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        SineE : SineCurve.EnumSine # 0
        SineI : SineCurve.EnumSine # 1

    ErrorMessage : str
    Frequency : float
    Hash : Array_1[int]
    Levels : CFALevelList
    Method : ImpedimetricIterationMethodBase
    ShowInvertedY : bool
    SineDuration : float
    @property
    def Appearance(self) -> VisualSettings: ...
    @Appearance.setter
    def Appearance(self, value: VisualSettings) -> VisualSettings: ...
    @property
    def CorrosionButlerVolmer(self) -> Array_1[int]: ...
    @CorrosionButlerVolmer.setter
    def CorrosionButlerVolmer(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def CorrosionTafel(self) -> Array_1[int]: ...
    @CorrosionTafel.setter
    def CorrosionTafel(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def DC(self) -> IDataValue: ...
    @DC.setter
    def DC(self, value: IDataValue) -> IDataValue: ...
    @property
    def Error(self) -> str: ...
    @Error.setter
    def Error(self, value: str) -> str: ...
    @property
    def HasMultipleDirections(self) -> bool: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def IsInPlot(self) -> bool: ...
    @IsInPlot.setter
    def IsInPlot(self, value: bool) -> bool: ...
    @property
    def MaxX(self) -> float: ...
    @property
    def MaxY(self) -> float: ...
    @property
    def MeasType(self) -> MeasType: ...
    @MeasType.setter
    def MeasType(self, value: MeasType) -> MeasType: ...
    @property
    def MeasuredStepStartIndex(self) -> DataArray: ...
    @MeasuredStepStartIndex.setter
    def MeasuredStepStartIndex(self, value: DataArray) -> DataArray: ...
    @property
    def MinX(self) -> float: ...
    @property
    def MinY(self) -> float: ...
    @property
    def MuxChannel(self) -> int: ...
    @MuxChannel.setter
    def MuxChannel(self, value: int) -> int: ...
    @property
    def NPoints(self) -> int: ...
    @property
    def OCPValue(self) -> float: ...
    @property
    def Peaks(self) -> PeakList: ...
    @Peaks.setter
    def Peaks(self, value: PeakList) -> PeakList: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodePotential(self) -> float: ...
    @ReferenceElectrodePotential.setter
    def ReferenceElectrodePotential(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SavedToFilePath(self) -> str: ...
    @SavedToFilePath.setter
    def SavedToFilePath(self, value: str) -> str: ...
    @property
    def SaveToSession(self) -> bool: ...
    @SaveToSession.setter
    def SaveToSession(self, value: bool) -> bool: ...
    @property
    def SelectedPoints(self) -> Array_1[bool]: ...
    @SelectedPoints.setter
    def SelectedPoints(self, value: Array_1[bool]) -> Array_1[bool]: ...
    @property
    def SupportsPowerPlot(self) -> bool: ...
    @property
    def SuspendSavedToFileChangedEvent(self) -> bool: ...
    @SuspendSavedToFileChangedEvent.setter
    def SuspendSavedToFileChangedEvent(self, value: bool) -> bool: ...
    @property
    def Time(self) -> float: ...
    @Time.setter
    def Time(self, value: float) -> float: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def ValidHash(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    @property
    def XArrayType(self) -> DataArrayType: ...
    @property
    def XAxis(self) -> Curve.EnumXAxis: ...
    @XAxis.setter
    def XAxis(self, value: Curve.EnumXAxis) -> Curve.EnumXAxis: ...
    @property
    def XAxisDataArray(self) -> DataArray: ...
    @property
    def XOffset(self) -> float: ...
    @XOffset.setter
    def XOffset(self, value: float) -> float: ...
    @property
    def XUnit(self) -> Unit: ...
    @property
    def YArrayType(self) -> DataArrayType: ...
    @property
    def YAxis(self) -> Curve.EnumYAxis: ...
    @YAxis.setter
    def YAxis(self, value: Curve.EnumYAxis) -> Curve.EnumYAxis: ...
    @property
    def YAxisDataArray(self) -> DataArray: ...
    @property
    def Ymean(self) -> float: ...
    @property
    def YUnit(self) -> Unit: ...
    @property
    def ZUnit(self) -> Unit: ...
    @ZUnit.setter
    def ZUnit(self, value: Unit) -> Unit: ...
    def CalcYMean(self) -> None: ...
    def GetPercentageOfResolution(self, maxDigital: float) -> float: ...
    def GetSineXPointsShift(self) -> int: ...
    def ShiftCurve(self, iShift: int) -> SineCurve: ...


class SingleThreadSyncContext(SynchronizationContext):
    def __init__(self) -> None: ...
    def Complete(self) -> None: ...
    def IsEmpty(self) -> bool: ...
    def Post(self, d: SendOrPostCallback, state: typing.Any) -> None: ...
    def RunAllOnCurrentThread(self) -> None: ...
    def RunOneOnCurrentThread(self) -> None: ...
    def Send(self, d: SendOrPostCallback, state: typing.Any) -> None: ...


class SleepFunc(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, ms: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, ms: int) -> None: ...


class SpinWaitFunc(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, iterations: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, iterations: int) -> None: ...


class SynchronizationContextRemover(INotifyCompletion):
    @property
    def IsCompleted(self) -> bool: ...
    def GetAwaiter(self) -> SynchronizationContextRemover: ...
    def GetResult(self) -> None: ...
    @staticmethod
    def Init(maxThreads: int) -> None: ...
    def OnCompleted(self, continuation: Action) -> None: ...


class TaskBarrier(INotifyCompletion):
    def __init__(self, n: int) -> None: ...
    @property
    def IsCompleted(self) -> bool: ...
    def GetAwaiter(self) -> TaskBarrier: ...
    def GetResult(self) -> None: ...
    def OnCompleted(self, continuation: Action) -> None: ...
    def SignalAwait(self) -> TaskBarrier: ...


class TaskExtensions(abc.ABC):
    @staticmethod
    def TimeoutExceptionAfter(task: Task, millisecondsTimeout: int) -> Task: ...
    # Skipped TimeoutAfter due to it being static, abstract and generic.

    TimeoutAfter : TimeoutAfter_MethodGroup
    class TimeoutAfter_MethodGroup:
        @typing.overload
        def __call__(self, task: Task_1[bool], millisecondsTimeout: int) -> Task_1[bool]:...
        @typing.overload
        def __call__(self, task: Task, timeoutMilliseconds: int) -> Task_1[bool]:...



class TimeMethod(Method, ILevelPeakSignal, IDisposable, IMixedModeStageMethod, INPointsMethod):
    AnalyteName : str
    DefaultXAxis : DataArrayType
    DefaultYAxis : DataArrayType
    MethodIsGalvanostatic : bool
    MUX_DELAY : float
    MuxSett : Method.MuxSettings
    PeakOverlap : float
    PolyEmStat : PolyEmStatMethodEx
    RecordCE : bool
    SmoothLevel : int
    Standard : Array_1[float]
    Technique : int
    UseMuxChannel : BitArray
    UseStirrer : bool
    ViewBottom : float
    ViewLeft : float
    ViewRight : float
    ViewTop : float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(self, value: Method.EnumPalmSensBipotMode) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @nPoints.setter
    def nPoints(self, value: int) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(self, value: PotentionstatChannels) -> PotentionstatChannels: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def Deserialize(self, contents: str) -> None: ...
    def DeSerializeTechniqueSpecific(self, contents: str) -> None: ...
    def Equals(self, o: typing.Any) -> bool: ...
    def GetIntervalTime(self, capab: DeviceCapabilities) -> float: ...
    def GetMinimumEstimatedMeasurementDuration(self, capab: DeviceCapabilities) -> float: ...
    def GetNPoints(self, capabilities: DeviceCapabilities) -> int: ...
    def ReceiveMeasurement(self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...) -> ActiveMeasurement: ...
    def ReceiveMeasurementAsync(self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ..., taskBarrier: TaskBarrier = ...) -> Task_1[ActiveMeasurement]: ...
    def ReceiveMeasurementMS(self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ..., taskBarrier: TaskBarrier = ...) -> Task_1[ActiveMeasurement]: ...
    def Serialize(self, tw: TextWriter) -> None: ...
    def SerializeTechniqueSpecific(self, tw: TextWriter) -> None: ...
    def SupportsDeviceStorage(self, deviceCapabilities: DeviceCapabilities) -> bool: ...
