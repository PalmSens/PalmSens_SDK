import abc
import typing

import clr
from PalmSens import (
    CurrentRange,
    ExtraValueMask,
    Method,
    MethodScript,
    MuxModel,
    PotentialRange,
    PotentialRanges,
    PotentionstatChannels,
)
from PalmSens.Calibration import EISCalibration, PalmSensBiPotCalibration
from PalmSens.Comm import EnumMode, FirmwareUploader, MuxType, ReadingStatus, enumDeviceType
from PalmSens.Techniques import ImpedimetricMethodBase
from PalmSens.Techniques.Impedance import DualEISModes
from System import (
    Action_1,
    Array_1,
    AsyncCallback,
    DateTime,
    Exception,
    IAsyncResult,
    MulticastDelegate,
    ValueTuple_2,
)
from System.Collections import IDictionary
from System.Collections.Generic import Dictionary_2, IReadOnlyList_1, List_1
from System.Reflection import MethodBase, MethodInfo
from System.Threading import SemaphoreSlim, Thread
from System.Threading.Tasks import Task, Task_1

class AnalogComponent:
    def __init__(
        self,
        bits: int,
        vRange: float,
        offset: float,
        gain: float,
        isMethodSCRIPTInstrument: bool = ...,
    ) -> None: ...
    @property
    def Bits(self) -> int: ...
    @property
    def Gain(self) -> float: ...
    @Gain.setter
    def Gain(self, value: float) -> float: ...
    @property
    def MaxRawValue(self) -> int: ...
    @property
    def MaxValue(self) -> float: ...
    @property
    def MinValue(self) -> float: ...
    @property
    def Offset(self) -> float: ...
    @Offset.setter
    def Offset(self, value: float) -> float: ...
    @property
    def Resolution(self) -> float: ...
    @property
    def StepSize(self) -> float: ...
    @property
    def VRange(self) -> float: ...
    def GetStatusFast(self, rawVal: int) -> ReadingStatus: ...
    def ToRaw(self, val: float, useOffset: bool = ...) -> int: ...
    def ToRawBiPolar(self, val: float) -> int: ...
    # Skipped FromRaw due to it being static, abstract and generic.

    FromRaw: FromRaw_MethodGroup
    class FromRaw_MethodGroup:
        def __call__(self, val: float, useOffset: bool = ...) -> float: ...
        # Method FromRaw(val : Single, useOffset : Boolean) was skipped since it collides with above method
        # Method FromRaw(val : Int32, useOffset : Boolean) was skipped since it collides with above method

class DefaultCapabilities(DeviceCapabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @DefaultSignalTrainConfiguration.setter
    def DefaultSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    def CanSendDuringMeasurement(self, tbase: float) -> bool: ...
    def PotentialRangeToGainSetting(self, range: PotentialRanges) -> int: ...
    def ToString(self) -> str: ...

class Device(abc.ABC):
    def __init__(self) -> None: ...

    class PossibleBaudRates(typing.SupportsInt):
        @typing.overload
        def __init__(self, value: int) -> None: ...
        @typing.overload
        def __init__(self, value: int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        BAUD_9600: Device.PossibleBaudRates  # 9600
        BAUD_19200: Device.PossibleBaudRates  # 19200
        BAUD_38400: Device.PossibleBaudRates  # 38400
        BAUD_57600: Device.PossibleBaudRates  # 57600
        BAUD_230400: Device.PossibleBaudRates  # 230400
        BAUD_460800: Device.PossibleBaudRates  # 460800
        BAUD_921600: Device.PossibleBaudRates  # 921600
        BAUD_2000000: Device.PossibleBaudRates  # 2000000

    _queueThread: Thread
    @property
    def Baudrate(self) -> int: ...
    @property
    def ClearBufferTime(self) -> int: ...
    @ClearBufferTime.setter
    def ClearBufferTime(self, value: int) -> int: ...
    @property
    def IsProgramPortOnly(self) -> bool: ...
    @property
    def IsWireless(self) -> bool: ...
    @property
    def MaxIncomingRate(self) -> int: ...
    @MaxIncomingRate.setter
    def MaxIncomingRate(self, value: int) -> int: ...
    @property
    def MaxSamplingRateMS(self) -> int: ...
    @MaxSamplingRateMS.setter
    def MaxSamplingRateMS(self, value: int) -> int: ...
    @property
    def OutgoingMessageBlockSize(self) -> int: ...
    @OutgoingMessageBlockSize.setter
    def OutgoingMessageBlockSize(self, value: int) -> int: ...
    @property
    def OutgoingMessageDelay(self) -> int: ...
    @OutgoingMessageDelay.setter
    def OutgoingMessageDelay(self, value: int) -> int: ...
    @property
    def ShortName(self) -> str: ...
    @property
    def SupportsDownloading(self) -> bool: ...
    @property
    def TimeOut(self) -> int: ...
    def ClearBuffer(self) -> None: ...
    def ClearBufferAsync(self) -> Task: ...
    @abc.abstractmethod
    def Close(self) -> None: ...
    def CloseAsync(self) -> Task: ...
    @staticmethod
    def DisposeAsyncQueues() -> None: ...
    def EnterDownloadMode(self) -> None: ...
    def GetFirmwareUploader(self) -> FirmwareUploader: ...
    def GetLicenseInfo(self) -> DeviceLicenseInfo: ...
    def GetVersionString(self, timeOutInMilliSeconds: int = ...) -> Array_1[str]: ...
    def GetVersionStringAsync(
        self, timeOutInMilliSeconds: int = ...
    ) -> Task_1[Array_1[str]]: ...
    @staticmethod
    def InitAsyncQueues() -> None: ...
    def LeaveDownloadMode(self) -> None: ...
    @abc.abstractmethod
    def Read(self) -> str: ...
    def ReadAsync(self) -> Task_1[str]: ...
    def Reconnect(self, timeout: int = ...) -> None: ...
    def ReconnectAsync(self, timeout: int = ..., semaphore: SemaphoreSlim = ...) -> Task: ...
    # Skipped Open due to it being static, abstract and generic.

    Open: Open_MethodGroup
    class Open_MethodGroup:
        @typing.overload
        def __call__(self) -> None: ...
        @typing.overload
        def __call__(self, baudrate: int) -> None: ...

    # Skipped OpenAsync due to it being static, abstract and generic.

    OpenAsync: OpenAsync_MethodGroup
    class OpenAsync_MethodGroup:
        @typing.overload
        def __call__(self) -> Task: ...
        @typing.overload
        def __call__(self, baudrate: int) -> Task: ...

    # Skipped Write due to it being static, abstract and generic.

    Write: Write_MethodGroup
    class Write_MethodGroup:
        @typing.overload
        def __call__(self, s: str) -> None: ...
        @typing.overload
        def __call__(self, s: str, delayBetweenBlocks: int) -> None: ...

    # Skipped WriteAsync due to it being static, abstract and generic.

    WriteAsync: WriteAsync_MethodGroup
    class WriteAsync_MethodGroup:
        @typing.overload
        def __call__(self, s: str) -> Task: ...
        @typing.overload
        def __call__(self, s: str, delayBetweenBlocks: int) -> Task: ...

class DeviceCapabilities(abc.ABC):
    class EnumEmStatBipotMode(typing.SupportsInt):
        @typing.overload
        def __init__(self, value: int) -> None: ...
        @typing.overload
        def __init__(self, value: int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        constant: DeviceCapabilities.EnumEmStatBipotMode  # 0
        offset: DeviceCapabilities.EnumEmStatBipotMode  # 1
        control: DeviceCapabilities.EnumEmStatBipotMode  # 2
        none: DeviceCapabilities.EnumEmStatBipotMode  # 3
        undefined: DeviceCapabilities.EnumEmStatBipotMode  # 255

    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    DefaultSupportedBipotRanges: List_1[CurrentRange]
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @DefaultSignalTrainConfiguration.setter
    def DefaultSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    @abc.abstractmethod
    def CanSendDuringMeasurement(self, f: float) -> bool: ...
    def GetEstimatedFrequencyDuration(
        self, frequency: float, method: ImpedimetricMethodBase
    ) -> float: ...
    def GetEstimatedFrequencyScanDuration(self, method: ImpedimetricMethodBase) -> float: ...
    def GetRangeFromCRByte(self, crByte: int) -> CurrentRange: ...
    def GetSupportedExtraValues(self, method: Method) -> ExtraValueMask: ...
    @abc.abstractmethod
    def PotentialRangeToGainSetting(self, range: PotentialRanges) -> int: ...
    def SupportsRange(self, range: CurrentRange) -> bool: ...
    def SupportsRangePotential(self, range: PotentialRange) -> bool: ...
    # Skipped SupportsMethod due to it being static, abstract and generic.

    SupportsMethod: SupportsMethod_MethodGroup
    class SupportsMethod_MethodGroup:
        @typing.overload
        def __call__(self, technique: int) -> bool: ...
        @typing.overload
        def __call__(self, method: Method) -> bool: ...

class DeviceLicenseInfo(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    SDK: DeviceLicenseInfo  # 1
    AnalyticalMode: DeviceLicenseInfo  # 2

class DeviceList:
    @typing.overload
    def __init__(
        self, discoverDevicesFuncs: List_1[DeviceList.DiscoverDevicesFunc]
    ) -> None: ...
    @typing.overload
    def __init__(self, discoverDevicesFuncsAsync: List_1[Task_1[List_1[Device]]]) -> None: ...

    class DiscoverDevicesFunc(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(
            self, errors: clr.Reference[str], callback: AsyncCallback, object: typing.Any
        ) -> IAsyncResult: ...
        def EndInvoke(
            self, errors: clr.Reference[str], result: IAsyncResult
        ) -> List_1[Device]: ...
        def Invoke(self, errors: clr.Reference[str]) -> List_1[Device]: ...

    DiscoverDevicesFuncAsync: Task_1[List_1[Device]]
    def GetAvailableDevices(
        self,
        errors: clr.Reference[str],
        includeWireless: bool = ...,
        includeProgramPort: bool = ...,
    ) -> Array_1[Device]: ...
    def GetAvailableDevicesAsync(
        self, includeWireless: bool = ..., includeProgramPort: bool = ...
    ) -> Task_1[Array_1[Device]]: ...

class DeviceProtocol(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    PalmSens: DeviceProtocol  # 0
    MethodSCRIPT: DeviceProtocol  # 1
    SAMBA: DeviceProtocol  # 2
    HVGA: DeviceProtocol  # 3

class EISSettings(abc.ABC):
    @property
    def acCoupledMinFreq(self) -> float: ...
    @property
    def CalibFreq0MaxPhaseshift(self) -> float: ...
    @property
    def CalibFreq0MinPhaseshift(self) -> float: ...
    @property
    def HighResolutionADC(self) -> float: ...
    @property
    def HSTABMaxFreqA(self) -> float: ...
    @property
    def HSTABMaxFreqB(self) -> float: ...
    @property
    def LowResolutionADC(self) -> float: ...
    @property
    def MaxAmpMDAC(self) -> float: ...
    @property
    def MaxEquilSines(self) -> int: ...
    @property
    def MaxEquilTime(self) -> int: ...
    @property
    def MaxFreqCFFilter(self) -> Array_1[float]: ...
    @property
    def MaxFreqCFFilterADC(self) -> Array_1[float]: ...
    @property
    def MaxFreqForRange(self) -> Array_1[float]: ...
    @property
    def MaxFreqPGAgain(self) -> Array_1[float]: ...
    @property
    def MaxPointsac(self) -> int: ...
    @property
    def MinEquilSines(self) -> int: ...
    @property
    def MinPointsac(self) -> int: ...
    def GetCurrentRangeForFreq(self, frequency: float) -> int: ...
    def GetFilterCFByte(self, frequency: float, crByte: int, adcEIS: bool = ...) -> int: ...
    def GetMaxFreqForRange(self, cr: int) -> float: ...
    def GetMaxPGAgain(self, frequency: float, cr: CurrentRange) -> int: ...
    @abc.abstractmethod
    def GetSamplingRate(self, frequency: float) -> int: ...
    @abc.abstractmethod
    def UseHSTAB(self, frequency: float, CRbyte: int) -> bool: ...

class EISSettingsPS3(EISSettings):
    def __init__(self) -> None: ...
    @property
    def acCoupledMinFreq(self) -> float: ...
    @property
    def CalibAcCoupledFreq0Default(self) -> float: ...
    @property
    def CalibFilterAcFreq0Defaults(self) -> Array_1[float]: ...
    @property
    def CalibFilterCFFreq0Defaults(self) -> Array_1[float]: ...
    @property
    def CalibFreq0MaxPhaseshift(self) -> float: ...
    @property
    def CalibFreq0MinPhaseshift(self) -> float: ...
    @property
    def CalibHSTABFreq0Default(self) -> float: ...
    @property
    def CalibPGAGainFreq0Defaults(self) -> Array_1[float]: ...
    @property
    def HighResolutionADC(self) -> float: ...
    @property
    def HSTABMaxFreqA(self) -> float: ...
    @property
    def HSTABMaxFreqB(self) -> float: ...
    @property
    def IdleFraction(self) -> float: ...
    @property
    def LowResolutionADC(self) -> float: ...
    @property
    def MaxAmpMDAC(self) -> float: ...
    @property
    def MaxEquilSines(self) -> int: ...
    @property
    def MaxEquilTime(self) -> int: ...
    @property
    def MaxFreqAD16(self) -> int: ...
    @property
    def MaxFreqCFFilter(self) -> Array_1[float]: ...
    @property
    def MaxFreqCFFilterADC(self) -> Array_1[float]: ...
    @property
    def MaxFreqForRange(self) -> Array_1[float]: ...
    @property
    def MaxFreqPGAgain(self) -> Array_1[float]: ...
    @property
    def MaxLowFreqPhaseDelayCorrection(self) -> float: ...
    @property
    def MaxPointsac(self) -> int: ...
    @property
    def MaxRateAD12(self) -> int: ...
    @MaxRateAD12.setter
    def MaxRateAD12(self, value: int) -> int: ...
    @property
    def MaxRateAD16(self) -> int: ...
    @property
    def MinEquilSines(self) -> int: ...
    @property
    def MinPointsac(self) -> int: ...
    @property
    def tDAOverhead12(self) -> float: ...
    @property
    def tDAOverhead16(self) -> float: ...
    @property
    def tpdOffset12(self) -> Array_1[float]: ...
    @tpdOffset12.setter
    def tpdOffset12(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def tpdOffset16(self) -> Array_1[float]: ...
    @tpdOffset16.setter
    def tpdOffset16(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def tpdOffset16LowFreq(self) -> float: ...
    @tpdOffset16LowFreq.setter
    def tpdOffset16LowFreq(self, value: float) -> float: ...
    @property
    def tpdSlope12(self) -> Array_1[float]: ...
    @tpdSlope12.setter
    def tpdSlope12(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def tpdSlope16(self) -> Array_1[float]: ...
    @tpdSlope16.setter
    def tpdSlope16(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def tpdSlope16LowFreq(self) -> float: ...
    @tpdSlope16LowFreq.setter
    def tpdSlope16LowFreq(self, value: float) -> float: ...
    @property
    def tSingleAD12A(self) -> float: ...
    @property
    def tSingleAD12B(self) -> float: ...
    @property
    def tSingleAD16A(self) -> float: ...
    @property
    def tSingleAD16B(self) -> float: ...
    @property
    def UseCorrectionPhaseDelay(self) -> bool: ...
    @UseCorrectionPhaseDelay.setter
    def UseCorrectionPhaseDelay(self, value: bool) -> bool: ...
    @property
    def UseFreq0ACcoupled(self) -> bool: ...
    @UseFreq0ACcoupled.setter
    def UseFreq0ACcoupled(self, value: bool) -> bool: ...
    @property
    def UseFreq0FilterAc(self) -> bool: ...
    @UseFreq0FilterAc.setter
    def UseFreq0FilterAc(self, value: bool) -> bool: ...
    @property
    def UseFreq0FilterCF(self) -> bool: ...
    @UseFreq0FilterCF.setter
    def UseFreq0FilterCF(self, value: bool) -> bool: ...
    @property
    def UseFreq0HSTAB(self) -> bool: ...
    @UseFreq0HSTAB.setter
    def UseFreq0HSTAB(self, value: bool) -> bool: ...
    @property
    def UseFreq0PGAgain(self) -> bool: ...
    @UseFreq0PGAgain.setter
    def UseFreq0PGAgain(self, value: bool) -> bool: ...
    def GetDAOverhead(self, frequency: float) -> float: ...
    def GetFilterACByte(self, frequency: float) -> int: ...
    def GetNadc(self, frequency: float, tIntac: float) -> int: ...
    def GetSamplingRate(self, frequency: float) -> int: ...
    def GettSingleADConversion(self, frequency: float) -> float: ...
    def UseHSTAB(self, frequency: float, CRbyte: int) -> bool: ...

class EISSettingsPS4(EISSettings):
    def __init__(self) -> None: ...
    @property
    def acCoupledMinFreq(self) -> float: ...
    @property
    def CalibFreq0MaxPhaseshift(self) -> float: ...
    @property
    def CalibFreq0MinPhaseshift(self) -> float: ...
    @property
    def HighResolutionADC(self) -> float: ...
    @property
    def HSTABMaxFreqA(self) -> float: ...
    @property
    def HSTABMaxFreqB(self) -> float: ...
    @property
    def LowResolutionADC(self) -> float: ...
    @property
    def MaxAmpMDAC(self) -> float: ...
    @property
    def MaxEquilSines(self) -> int: ...
    @property
    def MaxEquilTime(self) -> int: ...
    @property
    def MaxFreqCFFilter(self) -> Array_1[float]: ...
    @property
    def MaxFreqCFFilterADC(self) -> Array_1[float]: ...
    @property
    def MaxFreqForRange(self) -> Array_1[float]: ...
    @property
    def MaxFreqPGAgain(self) -> Array_1[float]: ...
    @property
    def MaxPointsac(self) -> int: ...
    @property
    def MinEquilSines(self) -> int: ...
    @property
    def MinPointsac(self) -> int: ...
    @property
    def UseCorrectionCable(self) -> bool: ...
    @UseCorrectionCable.setter
    def UseCorrectionCable(self, value: bool) -> bool: ...
    @property
    def UseCorrectionCurrentRange(self) -> bool: ...
    @UseCorrectionCurrentRange.setter
    def UseCorrectionCurrentRange(self, value: bool) -> bool: ...
    def GetSamplingRate(self, frequency: float) -> int: ...
    def UseHSTAB(self, frequency: float, CRbyte: int) -> bool: ...

class Emstat2Capabilities(EmstatCapabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MIN_FIRMWARE_REQUIRED: float
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @DefaultSignalTrainConfiguration.setter
    def DefaultSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    def ToString(self) -> str: ...

class Emstat3BPCapabilities(Emstat3Capabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @DefaultSignalTrainConfiguration.setter
    def DefaultSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    def ToString(self) -> str: ...

class Emstat3Capabilities(Emstat2Capabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MIN_FIRMWARE_DATE: DateTime
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @DefaultSignalTrainConfiguration.setter
    def DefaultSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    def ToString(self) -> str: ...

class Emstat3PCapabilities(Emstat2Capabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MIN_FIRMWARE_DATE: DateTime
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @DefaultSignalTrainConfiguration.setter
    def DefaultSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    def ToString(self) -> str: ...

class Emstat3TSCapabilities(Emstat3Capabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @DefaultSignalTrainConfiguration.setter
    def DefaultSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    def ToString(self) -> str: ...

class EmStat4BLCapabilities(EmStat4CommonCapabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MSSupportedCommands: List_1[MethodScriptDeviceCapabilities.MSCommands]
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def ConnDescription(self) -> str: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def EnhancedFSCapabilities(self) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MethodSCRIPTVersion(self) -> str: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumOfflineEISIntervalTime(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedDigitalInputLineMask(self) -> int: ...
    @property
    def SupportedDigitalOutputLineMask(self) -> int: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBipotAutoranging(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsEISTDD(self) -> bool: ...
    @property
    def SupportsExplicitVariableNames(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    @property
    def TechniqueNumberMethodSCRIPTCommandMapping(self) -> Dictionary_2[int, int]: ...
    def RangeToInputRange(self, pr: PotentialRange) -> float: ...

class EmStat4CommonCapabilities(MethodScriptDeviceCapabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MIN_FIRMWARE_DATE: DateTime
    MIN_FIRMWARE_REQUIRED: float
    MSSupportedCommands: List_1[MethodScriptDeviceCapabilities.MSCommands]
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def ConnDescription(self) -> str: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def EnhancedFSCapabilities(self) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MethodSCRIPTVersion(self) -> str: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumOfflineEISIntervalTime(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedDigitalInputLineMask(self) -> int: ...
    @property
    def SupportedDigitalOutputLineMask(self) -> int: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBipotAutoranging(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsEISTDD(self) -> bool: ...
    @property
    def SupportsExplicitVariableNames(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    @property
    def TechniqueNumberMethodSCRIPTCommandMapping(self) -> Dictionary_2[int, int]: ...
    def CanSendDuringMeasurement(self, tbase: float) -> bool: ...
    def GetEstimatedFrequencyDuration(
        self, frequency: float, method: ImpedimetricMethodBase
    ) -> float: ...
    def GetEstimatedFrequencyScanDuration(self, method: ImpedimetricMethodBase) -> float: ...
    def MinSampleProcessingWindow(self, nVars: int) -> ValueTuple_2[float, float]: ...
    def MinSampleProcessingWindowInternalStorage(self, nVars: int) -> float: ...
    def PotentialRangeToGainSetting(self, range: PotentialRanges) -> int: ...
    def RangeToInputRange(self, cr: CurrentRange) -> float: ...
    def ToString(self) -> str: ...

class EmStat4HRCapabilities(EmStat4CommonCapabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MSSupportedCommands: List_1[MethodScriptDeviceCapabilities.MSCommands]
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def ConnDescription(self) -> str: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def EnhancedFSCapabilities(self) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MethodSCRIPTVersion(self) -> str: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumOfflineEISIntervalTime(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedDigitalInputLineMask(self) -> int: ...
    @property
    def SupportedDigitalOutputLineMask(self) -> int: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBipotAutoranging(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsEISTDD(self) -> bool: ...
    @property
    def SupportsExplicitVariableNames(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    @property
    def TechniqueNumberMethodSCRIPTCommandMapping(self) -> Dictionary_2[int, int]: ...
    def RangeToInputRange(self, pr: PotentialRange) -> float: ...

class EmStat4LRCapabilities(EmStat4CommonCapabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MSSupportedCommands: List_1[MethodScriptDeviceCapabilities.MSCommands]
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def ConnDescription(self) -> str: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def EnhancedFSCapabilities(self) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MethodSCRIPTVersion(self) -> str: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumOfflineEISIntervalTime(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedDigitalInputLineMask(self) -> int: ...
    @property
    def SupportedDigitalOutputLineMask(self) -> int: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBipotAutoranging(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsEISTDD(self) -> bool: ...
    @property
    def SupportsExplicitVariableNames(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    @property
    def TechniqueNumberMethodSCRIPTCommandMapping(self) -> Dictionary_2[int, int]: ...
    def RangeToInputRange(self, pr: PotentialRange) -> float: ...

class EmstatCapabilities(DeviceCapabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MIN_FIRMWARE_DATE: DateTime
    MIN_FIRMWARE_REQUIRED: float
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @DefaultSignalTrainConfiguration.setter
    def DefaultSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    def CanSendDuringMeasurement(self, tbase: float) -> bool: ...
    def PotentialRangeToGainSetting(self, range: PotentialRanges) -> int: ...
    def ToString(self) -> str: ...

class EmStatPicoCapabilities(
    MethodScriptDeviceCapabilities,
    IHibernationCapabilities,
    INonVolatileMemoryMETHODScriptCapabilities,
):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MIN_FIRMWARE_DATE: DateTime
    MIN_FIRMWARE_REQUIRED: float
    MSSupportedCommands: List_1[MethodScriptDeviceCapabilities.MSCommands]
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    SupportsStorageSetter: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def ConnDescription(self) -> str: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def EnhancedFSCapabilities(self) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxPotentialRange(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MethodSCRIPTVersion(self) -> str: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumOfflineEISIntervalTime(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedDigitalInputLineMask(self) -> int: ...
    @property
    def SupportedDigitalOutputLineMask(self) -> int: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportedWakeOnTriggers(self) -> WakeOnTriggers: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBipotAutoranging(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsEISTDD(self) -> bool: ...
    @property
    def SupportsExplicitVariableNames(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    @property
    def TechniqueNumberMethodSCRIPTCommandMapping(self) -> Dictionary_2[int, int]: ...
    def CanSendDuringMeasurement(self, tbase: float) -> bool: ...
    def GetEstimatedFrequencyDuration(
        self, frequency: float, method: ImpedimetricMethodBase
    ) -> float: ...
    def GetEstimatedFrequencyScanDuration(self, method: ImpedimetricMethodBase) -> float: ...
    def GetModeSignalTrainCapabilities(
        self, mode: MethodScript.PGStatModes
    ) -> SignalTrainCapabilities: ...
    def MinSampleProcessingWindow(self, nVars: int) -> ValueTuple_2[float, float]: ...
    def MinSampleProcessingWindowInternalStorage(self, nVars: int) -> float: ...
    def PotentialRangeToGainSetting(self, range: PotentialRanges) -> int: ...
    def ToString(self) -> str: ...
    # Skipped RangeToInputRange due to it being static, abstract and generic.

    RangeToInputRange: RangeToInputRange_MethodGroup
    class RangeToInputRange_MethodGroup:
        @typing.overload
        def __call__(self, cr: CurrentRange) -> float: ...
        @typing.overload
        def __call__(self, pr: PotentialRange) -> float: ...

class EmStatPicoCapabilitiesSim(EmStatPicoCapabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MSSupportedCommands: List_1[MethodScriptDeviceCapabilities.MSCommands]
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    SupportsStorageSetter: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def ConnDescription(self) -> str: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def EnhancedFSCapabilities(self) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxPotentialRange(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MethodSCRIPTVersion(self) -> str: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumOfflineEISIntervalTime(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedDigitalInputLineMask(self) -> int: ...
    @property
    def SupportedDigitalOutputLineMask(self) -> int: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportedWakeOnTriggers(self) -> WakeOnTriggers: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBipotAutoranging(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsEISTDD(self) -> bool: ...
    @property
    def SupportsExplicitVariableNames(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    @property
    def TechniqueNumberMethodSCRIPTCommandMapping(self) -> Dictionary_2[int, int]: ...
    def ToString(self) -> str: ...

class GetDeviceCapabilities(abc.ABC):
    class UnknownCapabilitiesException(Exception):
        @property
        def Data(self) -> IDictionary: ...
        @property
        def HelpLink(self) -> str: ...
        @HelpLink.setter
        def HelpLink(self, value: str) -> str: ...
        @property
        def HResult(self) -> int: ...
        @HResult.setter
        def HResult(self, value: int) -> int: ...
        @property
        def InnerException(self) -> Exception: ...
        @property
        def Message(self) -> str: ...
        @property
        def Source(self) -> str: ...
        @Source.setter
        def Source(self, value: str) -> str: ...
        @property
        def StackTrace(self) -> str: ...
        @property
        def TargetSite(self) -> MethodBase: ...

    # Skipped GetCapabilities due to it being static, abstract and generic.

    GetCapabilities: GetCapabilities_MethodGroup
    class GetCapabilities_MethodGroup:
        @typing.overload
        def __call__(
            self, deviceType: enumDeviceType, device: Device
        ) -> DeviceCapabilities: ...
        @typing.overload
        def __call__(self, versionString: str, device: Device) -> DeviceCapabilities: ...

class IAndroidDevice(typing.Protocol):
    @abc.abstractmethod
    def ClearBuffer(self) -> None: ...

class IBLEDevice(typing.Protocol):
    @property
    def ThrowCommError(self) -> None: ...
    @ThrowCommError.setter
    def ThrowCommError(self, value: Action_1[Exception]) -> None: ...

class IDualEISCapabilities(typing.Protocol):
    @property
    def SupportedDualEisModes(self) -> DualEISModes: ...

class IHibernationCapabilities(typing.Protocol):
    @property
    def SupportedWakeOnTriggers(self) -> WakeOnTriggers: ...

class INonVolatileMemoryMETHODScriptCapabilities(typing.Protocol):
    pass

class MethodScriptDeviceCapabilities(DeviceCapabilities):
    def __init__(self) -> None: ...

    class MSCommands(typing.SupportsInt):
        @typing.overload
        def __init__(self, value: int) -> None: ...
        @typing.overload
        def __init__(self, value: int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        FileOpen: MethodScriptDeviceCapabilities.MSCommands  # 0
        FileClose: MethodScriptDeviceCapabilities.MSCommands  # 1
        SetScriptOutput: MethodScriptDeviceCapabilities.MSCommands  # 2
        BeginScript: MethodScriptDeviceCapabilities.MSCommands  # 3
        LoadScript: MethodScriptDeviceCapabilities.MSCommands  # 4
        RunScript: MethodScriptDeviceCapabilities.MSCommands  # 5
        DeclareVariable: MethodScriptDeviceCapabilities.MSCommands  # 6
        SetVariableValue: MethodScriptDeviceCapabilities.MSCommands  # 7
        AddVariable: MethodScriptDeviceCapabilities.MSCommands  # 8
        SubtractVariable: MethodScriptDeviceCapabilities.MSCommands  # 9
        MultiplyVariable: MethodScriptDeviceCapabilities.MSCommands  # 10
        DivideVariable: MethodScriptDeviceCapabilities.MSCommands  # 11
        CopyVariable: MethodScriptDeviceCapabilities.MSCommands  # 12
        SetPGStatMode: MethodScriptDeviceCapabilities.MSCommands  # 13
        SetPGStatChannel: MethodScriptDeviceCapabilities.MSCommands  # 14
        SetMaxBandwidth: MethodScriptDeviceCapabilities.MSCommands  # 15
        SetCellCurrent: MethodScriptDeviceCapabilities.MSCommands  # 16
        SetAutoRanging: MethodScriptDeviceCapabilities.MSCommands  # 17
        SetRangeMinMax: MethodScriptDeviceCapabilities.MSCommands  # 18
        SetCellPotential: MethodScriptDeviceCapabilities.MSCommands  # 19
        SetCellOn: MethodScriptDeviceCapabilities.MSCommands  # 20
        SetCellOff: MethodScriptDeviceCapabilities.MSCommands  # 21
        SetBiPotModeOld: MethodScriptDeviceCapabilities.MSCommands  # 22
        SetBiPotMode: MethodScriptDeviceCapabilities.MSCommands  # 23
        SetBipotPotential: MethodScriptDeviceCapabilities.MSCommands  # 24
        SetGPIO: MethodScriptDeviceCapabilities.MSCommands  # 25
        Wait: MethodScriptDeviceCapabilities.MSCommands  # 26
        MeasureDataPoint: MethodScriptDeviceCapabilities.MSCommands  # 27
        ChronoAmperometry: MethodScriptDeviceCapabilities.MSCommands  # 28
        ChronoPotentiometry: MethodScriptDeviceCapabilities.MSCommands  # 29
        LinearSweepVoltammetry: MethodScriptDeviceCapabilities.MSCommands  # 30
        LinearSweepPotentiometry: MethodScriptDeviceCapabilities.MSCommands  # 31
        CyclicVoltammetry: MethodScriptDeviceCapabilities.MSCommands  # 32
        ACVoltammetry: MethodScriptDeviceCapabilities.MSCommands  # 33
        SquareWaveVoltammetry: MethodScriptDeviceCapabilities.MSCommands  # 34
        DifferentialPulseVoltammetry: MethodScriptDeviceCapabilities.MSCommands  # 35
        NormalPulseVoltammetry: MethodScriptDeviceCapabilities.MSCommands  # 36
        PulsedAmperometricDetection: MethodScriptDeviceCapabilities.MSCommands  # 37
        OpenCircuitPotentiometry: MethodScriptDeviceCapabilities.MSCommands  # 38
        ElectrochemicalImpedanceSpectroscopy: MethodScriptDeviceCapabilities.MSCommands  # 39
        DualElectrochemicalImpedanceSpectroscopy: (
            MethodScriptDeviceCapabilities.MSCommands
        )  # 40
        GalvanostaticElectrochemicalImpedanceSpectroscopy: (
            MethodScriptDeviceCapabilities.MSCommands
        )  # 41
        SaveOnDevice: MethodScriptDeviceCapabilities.MSCommands  # 42
        SendPacketHeader: MethodScriptDeviceCapabilities.MSCommands  # 43
        SendPacketTrailer: MethodScriptDeviceCapabilities.MSCommands  # 44
        SendPacketVariable: MethodScriptDeviceCapabilities.MSCommands  # 45
        BeginLoop: MethodScriptDeviceCapabilities.MSCommands  # 46
        EndLoop: MethodScriptDeviceCapabilities.MSCommands  # 47
        BreakLoop: MethodScriptDeviceCapabilities.MSCommands  # 48
        EndScript: MethodScriptDeviceCapabilities.MSCommands  # 49
        If: MethodScriptDeviceCapabilities.MSCommands  # 50
        Else: MethodScriptDeviceCapabilities.MSCommands  # 51
        ElseIf: MethodScriptDeviceCapabilities.MSCommands  # 52
        EndIf: MethodScriptDeviceCapabilities.MSCommands  # 53
        SendString: MethodScriptDeviceCapabilities.MSCommands  # 54
        OnFinished: MethodScriptDeviceCapabilities.MSCommands  # 55
        Calibrate: MethodScriptDeviceCapabilities.MSCommands  # 56
        ConfigGPIO: MethodScriptDeviceCapabilities.MSCommands  # 57
        GetGPIO: MethodScriptDeviceCapabilities.MSCommands  # 58
        GetTime: MethodScriptDeviceCapabilities.MSCommands  # 59
        TimerStart: MethodScriptDeviceCapabilities.MSCommands  # 60
        TimerGet: MethodScriptDeviceCapabilities.MSCommands  # 61
        SetInterval: MethodScriptDeviceCapabilities.MSCommands  # 62
        SetRange: MethodScriptDeviceCapabilities.MSCommands  # 63
        AwaitInterval: MethodScriptDeviceCapabilities.MSCommands  # 64
        Abort: MethodScriptDeviceCapabilities.MSCommands  # 65
        SetChannelSync: MethodScriptDeviceCapabilities.MSCommands  # 66
        FastCyclicVoltammetry: MethodScriptDeviceCapabilities.MSCommands  # 67
        DeclareArray: MethodScriptDeviceCapabilities.MSCommands  # 68
        ArrayGet: MethodScriptDeviceCapabilities.MSCommands  # 69
        ArraySet: MethodScriptDeviceCapabilities.MSCommands  # 70
        SendPacketHeaderWithMask: MethodScriptDeviceCapabilities.MSCommands  # 71
        SetScanDir: MethodScriptDeviceCapabilities.MSCommands  # 72
        FastAmperometry: MethodScriptDeviceCapabilities.MSCommands  # 73
        SetiRCompensation: MethodScriptDeviceCapabilities.MSCommands  # 74
        SetAuxilliaryAnalogPotential: MethodScriptDeviceCapabilities.MSCommands  # 75
        SetAcquisitionFracAutoAdjust: MethodScriptDeviceCapabilities.MSCommands  # 76
        GetMuxChannelCount: MethodScriptDeviceCapabilities.MSCommands  # 77
        MuxConfig: MethodScriptDeviceCapabilities.MSCommands  # 78
        SetMuxChannel: MethodScriptDeviceCapabilities.MSCommands  # 79
        ChronoAmperometryAlternatingMux: MethodScriptDeviceCapabilities.MSCommands  # 80
        ChronoPotentiometryAlternatingMux: MethodScriptDeviceCapabilities.MSCommands  # 81
        OpenCircuitPotentiometryAlternatingMux: MethodScriptDeviceCapabilities.MSCommands  # 82
        LoadScriptToNVM: MethodScriptDeviceCapabilities.MSCommands  # 83
        Hibernate: MethodScriptDeviceCapabilities.MSCommands  # 84

    class PckIDs(typing.SupportsInt):
        @typing.overload
        def __init__(self, value: int) -> None: ...
        @typing.overload
        def __init__(self, value: int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        UNKNOWN: MethodScriptDeviceCapabilities.PckIDs  # 0
        POTENTIAL_WE_RE: MethodScriptDeviceCapabilities.PckIDs  # 1
        POTENTIAL_CE_GND: MethodScriptDeviceCapabilities.PckIDs  # 2
        POTENTIAL_SE_GND: MethodScriptDeviceCapabilities.PckIDs  # 3
        POTENTIAL_RE_GND: MethodScriptDeviceCapabilities.PckIDs  # 4
        POTENTIAL_WE_GND: MethodScriptDeviceCapabilities.PckIDs  # 5
        POTENTIAL_WE_CE: MethodScriptDeviceCapabilities.PckIDs  # 6
        POTENTIAL_RE_SE2: MethodScriptDeviceCapabilities.PckIDs  # 7
        POTENTIAL_SE_SE2: MethodScriptDeviceCapabilities.PckIDs  # 8
        AIN0: MethodScriptDeviceCapabilities.PckIDs  # 9
        AIN1: MethodScriptDeviceCapabilities.PckIDs  # 10
        AIN2: MethodScriptDeviceCapabilities.PckIDs  # 11
        CURRENT: MethodScriptDeviceCapabilities.PckIDs  # 12
        CURRENT_BIPOT_OLD: MethodScriptDeviceCapabilities.PckIDs  # 13
        CURRENT_FORWARD: MethodScriptDeviceCapabilities.PckIDs  # 14
        CURRENT_REVERSE: MethodScriptDeviceCapabilities.PckIDs  # 15
        CURRENT_BIPOT_NEW: MethodScriptDeviceCapabilities.PckIDs  # 16
        CURRENT_BIPOT: MethodScriptDeviceCapabilities.PckIDs  # 17
        PHASE: MethodScriptDeviceCapabilities.PckIDs  # 18
        Z: MethodScriptDeviceCapabilities.PckIDs  # 19
        ZREAL: MethodScriptDeviceCapabilities.PckIDs  # 20
        ZIMAG: MethodScriptDeviceCapabilities.PckIDs  # 21
        POTENTIAL_EIS_TDD: MethodScriptDeviceCapabilities.PckIDs  # 22
        CURRENT_EIS_TDD: MethodScriptDeviceCapabilities.PckIDs  # 23
        SAMPLING_RATE_TDD: MethodScriptDeviceCapabilities.PckIDs  # 24
        POTENTIAL_EIS_AC: MethodScriptDeviceCapabilities.PckIDs  # 25
        POTENTIAL_EIS_DC: MethodScriptDeviceCapabilities.PckIDs  # 26
        CURRENT_EIS_AC: MethodScriptDeviceCapabilities.PckIDs  # 27
        CURRENT_EIS_DC: MethodScriptDeviceCapabilities.PckIDs  # 28
        BIPOT_ZREAL: MethodScriptDeviceCapabilities.PckIDs  # 29
        BIPOT_ZIMAG: MethodScriptDeviceCapabilities.PckIDs  # 30
        REVSE2_ZREAL: MethodScriptDeviceCapabilities.PckIDs  # 31
        REVSE2_ZIMAG: MethodScriptDeviceCapabilities.PckIDs  # 32
        SEVSE2_ZREAL: MethodScriptDeviceCapabilities.PckIDs  # 33
        SEVSE2_ZIMAG: MethodScriptDeviceCapabilities.PckIDs  # 34
        BIPOT_EIS_TDD: MethodScriptDeviceCapabilities.PckIDs  # 35
        REVSE2_EIS_TDD: MethodScriptDeviceCapabilities.PckIDs  # 36
        SEVSE2_EIS_TDD: MethodScriptDeviceCapabilities.PckIDs  # 37
        BIPOT_CURRENT_EIS_AC: MethodScriptDeviceCapabilities.PckIDs  # 38
        BIPOT_CURRENT_EIS_DC: MethodScriptDeviceCapabilities.PckIDs  # 39
        REVSE2_POTENTIAL_EIS_AC: MethodScriptDeviceCapabilities.PckIDs  # 40
        REVSE2_POTENTIAL_EIS_DC: MethodScriptDeviceCapabilities.PckIDs  # 41
        SEVSE2_POTENTIAL_EIS_AC: MethodScriptDeviceCapabilities.PckIDs  # 42
        SEVSE2_POTENTIAL_EIS_DC: MethodScriptDeviceCapabilities.PckIDs  # 43
        APPLIED_POTENTIAL: MethodScriptDeviceCapabilities.PckIDs  # 44
        APPLIED_CURRENT: MethodScriptDeviceCapabilities.PckIDs  # 45
        CELL_FREQUENCY: MethodScriptDeviceCapabilities.PckIDs  # 46
        CELL_AMPLITUDE: MethodScriptDeviceCapabilities.PckIDs  # 47
        CHANNEL: MethodScriptDeviceCapabilities.PckIDs  # 48
        TIME: MethodScriptDeviceCapabilities.PckIDs  # 49
        PIN_MSK: MethodScriptDeviceCapabilities.PckIDs  # 50
        TEMPERATURE: MethodScriptDeviceCapabilities.PckIDs  # 51
        COUNT: MethodScriptDeviceCapabilities.PckIDs  # 52
        TEMPERATURE_BOARD: MethodScriptDeviceCapabilities.PckIDs  # 53
        CURRENT_GENERIC1: MethodScriptDeviceCapabilities.PckIDs  # 54
        CURRENT_GENERIC2: MethodScriptDeviceCapabilities.PckIDs  # 55
        CURRENT_GENERIC3: MethodScriptDeviceCapabilities.PckIDs  # 56
        CURRENT_GENERIC4: MethodScriptDeviceCapabilities.PckIDs  # 57
        POTENTIAL_GENERIC1: MethodScriptDeviceCapabilities.PckIDs  # 58
        POTENTIAL_GENERIC2: MethodScriptDeviceCapabilities.PckIDs  # 59
        POTENTIAL_GENERIC3: MethodScriptDeviceCapabilities.PckIDs  # 60
        POTENTIAL_GENERIC4: MethodScriptDeviceCapabilities.PckIDs  # 61
        MISC_GENERIC1: MethodScriptDeviceCapabilities.PckIDs  # 62
        LOOPINDEX: MethodScriptDeviceCapabilities.PckIDs  # 63
        MISC_GENERIC2: MethodScriptDeviceCapabilities.PckIDs  # 64
        MISC_GENERIC3: MethodScriptDeviceCapabilities.PckIDs  # 65
        MISC_GENERIC4: MethodScriptDeviceCapabilities.PckIDs  # 66
        DEV_DC_DAC_ON_I: MethodScriptDeviceCapabilities.PckIDs  # 67
        DEV_DC_DAC_ON_E: MethodScriptDeviceCapabilities.PckIDs  # 68
        DEV_DC_DAC_ON_3: MethodScriptDeviceCapabilities.PckIDs  # 69
        DEV_I_OUT: MethodScriptDeviceCapabilities.PckIDs  # 70
        DEV_E_OUT: MethodScriptDeviceCapabilities.PckIDs  # 71

    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MSSupportedCommands: List_1[MethodScriptDeviceCapabilities.MSCommands]
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def ConnDescription(self) -> str: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @DefaultSignalTrainConfiguration.setter
    def DefaultSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def EnhancedFSCapabilities(self) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MethodSCRIPTVersion(self) -> str: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumOfflineEISIntervalTime(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedDigitalInputLineMask(self) -> int: ...
    @property
    def SupportedDigitalOutputLineMask(self) -> int: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBipotAutoranging(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsEISTDD(self) -> bool: ...
    @property
    def SupportsExplicitVariableNames(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    @property
    def TechniqueNumberMethodSCRIPTCommandMapping(self) -> Dictionary_2[int, int]: ...
    @abc.abstractmethod
    def MinSampleProcessingWindow(self, nVars: int) -> ValueTuple_2[float, float]: ...
    @abc.abstractmethod
    def MinSampleProcessingWindowInternalStorage(self, nVars: int) -> float: ...
    def MSScriptCommand(self, command: MethodScriptDeviceCapabilities.MSCommands) -> str: ...
    def SupportsConcurrentSamplingOfExtraValues(self, extraValues: ExtraValueMask) -> bool: ...
    # Skipped RangeToInputRange due to it being static, abstract and generic.

    RangeToInputRange: RangeToInputRange_MethodGroup
    class RangeToInputRange_MethodGroup:
        @typing.overload
        def __call__(self, cr: CurrentRange) -> float: ...
        @typing.overload
        def __call__(self, pr: PotentialRange) -> float: ...

class NexusCapabilities(MethodScriptDeviceCapabilities, IDualEISCapabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MIN_FIRMWARE_DATE: DateTime
    MIN_FIRMWARE_REQUIRED: float
    MSSupportedCommands: List_1[MethodScriptDeviceCapabilities.MSCommands]
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def ConnDescription(self) -> str: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def EnhancedFSCapabilities(self) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MethodSCRIPTVersion(self) -> str: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumOfflineEISIntervalTime(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedDigitalInputLineMask(self) -> int: ...
    @property
    def SupportedDigitalOutputLineMask(self) -> int: ...
    @property
    def SupportedDualEisModes(self) -> DualEISModes: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBipotAutoranging(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsEISTDD(self) -> bool: ...
    @property
    def SupportsExplicitVariableNames(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    @property
    def TechniqueNumberMethodSCRIPTCommandMapping(self) -> Dictionary_2[int, int]: ...
    def CanSendDuringMeasurement(self, tbase: float) -> bool: ...
    def GetEstimatedFrequencyDuration(
        self, frequency: float, method: ImpedimetricMethodBase
    ) -> float: ...
    def GetEstimatedFrequencyScanDuration(self, method: ImpedimetricMethodBase) -> float: ...
    def MinSampleProcessingWindow(self, nVars: int) -> ValueTuple_2[float, float]: ...
    def MinSampleProcessingWindowInternalStorage(self, nVars: int) -> float: ...
    def PotentialRangeToGainSetting(self, range: PotentialRanges) -> int: ...
    def SupportsConcurrentSamplingOfExtraValues(self, extraValues: ExtraValueMask) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped RangeToInputRange due to it being static, abstract and generic.

    RangeToInputRange: RangeToInputRange_MethodGroup
    class RangeToInputRange_MethodGroup:
        @typing.overload
        def __call__(self, cr: CurrentRange) -> float: ...
        @typing.overload
        def __call__(self, pr: PotentialRange) -> float: ...

class NoLicenseInfo(Exception):
    def __init__(self) -> None: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...

class PalmSens3Capabilities(DeviceCapabilities):
    def __init__(self, device: Device = ...) -> None: ...

    class EEPROM:
        BiPotFactorDAC: int
        BiPotOffsetADC: int
        BiPotOffsetDAC: int
        EISCalibrationAddress: int
        EReadOffset: int
        HardwareSettings: int
        @classmethod
        @property
        def BiPotFactorADC(cls) -> int: ...

    class EnumHardwareSettings(typing.SupportsInt):
        @typing.overload
        def __init__(self, value: int) -> None: ...
        @typing.overload
        def __init__(self, value: int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        BiPotInstalled: PalmSens3Capabilities.EnumHardwareSettings  # 1

    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MIN_FIRMWARE_DATE: DateTime
    MIN_FIRMWARE_REQUIRED: float
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelCurrentNoPGA(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @DefaultSignalTrainConfiguration.setter
    def DefaultSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    def BipotInstalled(self) -> bool: ...
    def CanSendDuringMeasurement(self, tbase: float) -> bool: ...
    @staticmethod
    def GetCutoffFrequency(crByte: int, filter: int) -> float: ...
    def GetHardwareSettings(self) -> PalmSens3Capabilities.EnumHardwareSettings: ...
    def GetRangeFromCRByte(self, crByte: int) -> CurrentRange: ...
    def PotentialRangeToGainSetting(self, range: PotentialRanges) -> int: ...
    def SetHardwareSettings(
        self, hardwareSettings: PalmSens3Capabilities.EnumHardwareSettings
    ) -> None: ...
    def ToString(self) -> str: ...

class PalmSens4Capabilities(DeviceCapabilities):
    def __init__(self) -> None: ...

    class EEPROM:
        pass

    class EnumHardwareSettings(typing.SupportsInt):
        @typing.overload
        def __init__(self, value: int) -> None: ...
        @typing.overload
        def __init__(self, value: int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:

    class HWRevision(typing.SupportsInt):
        @typing.overload
        def __init__(self, value: int) -> None: ...
        @typing.overload
        def __init__(self, value: int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...

        # Values:
        HW_REV_1_1: PalmSens4Capabilities.HWRevision  # 1
        HW_REV_1_2: PalmSens4Capabilities.HWRevision  # 2

    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MIN_FIRMWARE_DATE: DateTime
    MIN_FIRMWARE_REQUIRED: float
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    PS4BipotGain: float
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @DefaultSignalTrainConfiguration.setter
    def DefaultSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    def CanSendDuringMeasurement(self, tbase: float) -> bool: ...
    @staticmethod
    def GetCutoffFrequency(range: CurrentRange, filter: int) -> float: ...
    def GetHardwareSettings(self) -> PalmSens4Capabilities.EnumHardwareSettings: ...
    def PotentialRangeToGainSetting(self, range: PotentialRanges) -> int: ...
    def SetHardwareSettings(
        self, hardwareSettings: PalmSens4Capabilities.EnumHardwareSettings
    ) -> None: ...
    def ToString(self) -> str: ...

class PalmSensCapabilities(DeviceCapabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    DeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MIN_FIRMWARE_DATE: DateTime
    MIN_FIRMWARE_REQUIRED: float
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelReverseCurrent(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @DefaultSignalTrainConfiguration.setter
    def DefaultSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedRanges.setter
    def SupportedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    def CanSendDuringMeasurement(self, f: float) -> bool: ...
    def PotentialRangeToGainSetting(self, range: PotentialRanges) -> int: ...
    def ToString(self) -> str: ...

class SambaProgramPortCabalities(DeviceCapabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @DefaultSignalTrainConfiguration.setter
    def DefaultSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @SupportedBipotRanges.setter
    def SupportedBipotRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    def CanSendDuringMeasurement(self, f: float) -> bool: ...
    def PotentialRangeToGainSetting(self, range: PotentialRanges) -> int: ...
    def ToString(self) -> str: ...

class SensitWearableCapabilities(EmStatPicoCapabilities):
    def __init__(self) -> None: ...
    BiPotCalibration: PalmSensBiPotCalibration
    CustomDeviceID: str
    EISCalibration: EISCalibration
    EISsettings: EISSettings
    EmStatBiPotMode: DeviceCapabilities.EnumEmStatBipotMode
    FirmwareIsBeta: bool
    FirmwareTimeStamp: str
    IsEmStatBipotBoard: bool
    IsWireless: bool
    MaxMuxChannels: int
    MIN_FIRMWARE_REQUIRED: float
    MSSupportedCommands: List_1[MethodScriptDeviceCapabilities.MSCommands]
    MuxModel: MuxModel
    MuxType: MuxType
    NumMuxChannels: int
    SpecialFirmwareDescription: str
    SupportsAuxiliary: bool
    SupportsStorageSetter: bool
    @property
    def ActiveSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @ActiveSignalTrainConfiguration.setter
    def ActiveSignalTrainConfiguration(
        self, value: MethodScript.PGStatModes
    ) -> MethodScript.PGStatModes: ...
    @property
    def ADCAuxiliary(self) -> AnalogComponent: ...
    @property
    def ADCBiPot(self) -> AnalogComponent: ...
    @property
    def ADCCurrent(self) -> AnalogComponent: ...
    @property
    def ADCPotential(self) -> AnalogComponent: ...
    @property
    def BiPotPresent(self) -> bool: ...
    @BiPotPresent.setter
    def BiPotPresent(self, value: bool) -> bool: ...
    @property
    def CellTypes(self) -> Array_1[str]: ...
    @property
    def ChannelAUX(self) -> int: ...
    @property
    def ChannelCE(self) -> int: ...
    @property
    def ChannelCurrent(self) -> int: ...
    @property
    def ChannelPotential(self) -> int: ...
    @property
    def ChannelWE2(self) -> int: ...
    @property
    def ConnDescription(self) -> str: ...
    @property
    def DACAuxiliary(self) -> AnalogComponent: ...
    @property
    def DACBiPot(self) -> AnalogComponent: ...
    @property
    def DACCurrent(self) -> AnalogComponent: ...
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def DefaultBaudRate(self) -> int: ...
    @property
    def DefaultSignalTrainConfiguration(self) -> MethodScript.PGStatModes: ...
    @property
    def DeviceType(self) -> enumDeviceType: ...
    @property
    def EnableBipot(self) -> bool: ...
    @EnableBipot.setter
    def EnableBipot(self, value: bool) -> bool: ...
    @property
    def EnhancedFSCapabilities(self) -> bool: ...
    @property
    def FirmwareIsDebug(self) -> bool: ...
    @FirmwareIsDebug.setter
    def FirmwareIsDebug(self, value: bool) -> bool: ...
    @property
    def FirmwareReleaseType(self) -> str: ...
    @property
    def FirmwareVersion(self) -> float: ...
    @FirmwareVersion.setter
    def FirmwareVersion(self, value: float) -> float: ...
    @property
    def HardwareRevision(self) -> int: ...
    @property
    def HasAdvancedMathLicence(self) -> bool: ...
    @property
    def HasPSTraceLicence(self) -> bool: ...
    @property
    def HexBlobVersion(self) -> int: ...
    @property
    def IRDropCompMaxValue(self) -> int: ...
    @property
    def IsGalvanostat(self) -> bool: ...
    @property
    def IsSlaveChannel(self) -> bool: ...
    @IsSlaveChannel.setter
    def IsSlaveChannel(self, value: bool) -> bool: ...
    @property
    def LevelStepOverheadTime(self) -> float: ...
    @property
    def MaxCurrent(self) -> float: ...
    @property
    def MaxEISAmplitudeERMS(self) -> float: ...
    @property
    def MaxEISFrequency(self) -> float: ...
    @property
    def MaxFrequencyACV(self) -> float: ...
    @property
    def MaxGEISFrequency(self) -> float: ...
    @property
    def MaxNPoints(self) -> int: ...
    @property
    def MaxOfflinePoints(self) -> int: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialBipot(self) -> float: ...
    @property
    def MaxPotentialRange(self) -> float: ...
    @property
    def MaxSamlingRateAutoRanging(self) -> float: ...
    @property
    def MaxVAux(self) -> float: ...
    @property
    def MethodSCRIPTVersion(self) -> str: ...
    @property
    def MinADIntervalTime(self) -> float: ...
    @property
    def MinCurrent(self) -> float: ...
    @property
    def MinEISFrequency(self) -> float: ...
    @property
    def MinFirmwareDateRequired(self) -> DateTime: ...
    @property
    def MinFirmwareVersionRequired(self) -> float: ...
    @property
    def MinimumOfflineEISIntervalTime(self) -> float: ...
    @property
    def MinimumPulseTimeScanMethod(self) -> float: ...
    @property
    def MinLevelStepDuration(self) -> float: ...
    @property
    def MinOfflineFAIntervalTime(self) -> float: ...
    @property
    def MinOfflineIntervalTime(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    @property
    def MinPotentialBipot(self) -> float: ...
    @property
    def SupportedAltMUXTechniques(self) -> Array_1[int]: ...
    @property
    def SupportedAppliedRanges(self) -> List_1[CurrentRange]: ...
    @SupportedAppliedRanges.setter
    def SupportedAppliedRanges(self, value: List_1[CurrentRange]) -> List_1[CurrentRange]: ...
    @property
    def SupportedBipotRanges(self) -> List_1[CurrentRange]: ...
    @property
    def SupportedCommands(self) -> str: ...
    @property
    def SupportedDigitalInputLineMask(self) -> int: ...
    @property
    def SupportedDigitalOutputLineMask(self) -> int: ...
    @property
    def SupportedMethods(self) -> Array_1[int]: ...
    @property
    def SupportedModes(self) -> Array_1[EnumMode]: ...
    @property
    def SupportedMuxModels(self) -> IReadOnlyList_1[MuxModel]: ...
    @property
    def SupportedPotentialRanges(self) -> List_1[PotentialRange]: ...
    @SupportedPotentialRanges.setter
    def SupportedPotentialRanges(
        self, value: List_1[PotentialRange]
    ) -> List_1[PotentialRange]: ...
    @property
    def SupportedPotentiostatChannels(self) -> PotentionstatChannels: ...
    @property
    def SupportedRanges(self) -> List_1[CurrentRange]: ...
    @property
    def SupportedRemoteCommands(self) -> str: ...
    @SupportedRemoteCommands.setter
    def SupportedRemoteCommands(self, value: str) -> str: ...
    @property
    def SupportedSignalTrainCapabilities(self) -> MethodScript.PGStatModes: ...
    @property
    def SupportedWakeOnTriggers(self) -> WakeOnTriggers: ...
    @property
    def SupportsAdvancedTriggering(self) -> bool: ...
    @property
    def SupportsAdvancedTriggeringOnDelay(self) -> bool: ...
    @property
    def SupportsBipotAutoranging(self) -> bool: ...
    @property
    def SupportsBiPotInIdleStatusPackage(self) -> bool: ...
    @property
    def SupportsBipotSoftwareMode(self) -> bool: ...
    @property
    def SupportsDisplayMethodName(self) -> bool: ...
    @property
    def SupportsEISTDD(self) -> bool: ...
    @property
    def SupportsExplicitVariableNames(self) -> bool: ...
    @property
    def SupportsILimits(self) -> bool: ...
    @property
    def SupportsImpedance(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @SupportsIRDropComp.setter
    def SupportsIRDropComp(self, value: bool) -> bool: ...
    @property
    def SupportsMultipleExtraValues(self) -> bool: ...
    @property
    def SupportsOfflineMeasurements(self) -> bool: ...
    @property
    def SupportsStartSpecificRange(self) -> bool: ...
    @property
    def SupportsStorage(self) -> bool: ...
    @property
    def TechniqueNumberMethodSCRIPTCommandMapping(self) -> Dictionary_2[int, int]: ...
    def RangeToInputRange(self, cr: CurrentRange) -> float: ...
    def ToString(self) -> str: ...

class SignalTrainCapabilities(abc.ABC):
    @property
    def DACPotential(self) -> AnalogComponent: ...
    @property
    def MaxPotential(self) -> float: ...
    @property
    def MaxPotentialRange(self) -> float: ...
    @property
    def MinOnlineIntervalTime(self) -> float: ...
    @property
    def MinPotential(self) -> float: ...
    def GetSupportedCurrentRanges(
        self, availableCurrentRanges: Dictionary_2[int, CurrentRange]
    ) -> List_1[CurrentRange]: ...

class WakeOnTriggers(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    None_: WakeOnTriggers  # 0
    Communication: WakeOnTriggers  # 1
    GPIO: WakeOnTriggers  # 2
    Timer: WakeOnTriggers  # 4
    DoubleTap: WakeOnTriggers  # 8
