import abc
import typing

from PalmSens.Comm import enumDeviceType
from PalmSens.Devices import Device
from System import Array_1, AsyncCallback, IAsyncResult, IDisposable, MulticastDelegate
from System.Collections.Generic import IList_1
from System.Reflection import MethodInfo
from System.Text import StringBuilder
from System.Threading.Tasks import Task

class CommandResponse:
    def __init__(self) -> None: ...
    @property
    def Command(self) -> str: ...
    @Command.setter
    def Command(self, value: str) -> str: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def Response(self) -> str: ...
    @Response.setter
    def Response(self, value: str) -> str: ...
    @property
    def Script(self) -> str: ...
    @Script.setter
    def Script(self, value: str) -> str: ...

class EmStat3PSim(SimBase):
    def __init__(self) -> None: ...
    BiPotCurrentRange: int
    BiPotPotential: float
    CurrentRange: int
    DeviceType: enumDeviceType
    ExternalOutput: int
    Mode: int
    Potential: float
    SimConfig: SimConfig

class EmStatPicoSim(SimBase):
    def __init__(self) -> None: ...
    BiPotCurrentRange: int
    BiPotPotential: float
    CurrentRange: int
    DeviceType: enumDeviceType
    ExternalOutput: int
    Mode: int
    Potential: float
    SimConfig: SimConfig

class PalmSensSimulator:
    def __init__(self) -> None: ...

    class LCDChangeEvent(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(
            self,
            sender: typing.Any,
            args: PalmSensSimulator.LCDChangeEventArgs,
            callback: AsyncCallback,
            object: typing.Any,
        ) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> None: ...
        def Invoke(
            self, sender: typing.Any, args: PalmSensSimulator.LCDChangeEventArgs
        ) -> None: ...

    class LCDChangeEventArgs:
        def __init__(self) -> None: ...
        line: Array_1[str]

    BiPotCurrentRange: int
    BiPotPotential: float
    CurrentRange: int
    ExternalOutput: int
    FastMode: bool
    Mode: int
    outbuffer: StringBuilder
    Potential: float
    ProductType: enumDeviceType
    def PressDown(self) -> None: ...
    def PressEnter(self) -> None: ...
    def PressEsc(self) -> None: ...
    def PressLeft(self) -> None: ...
    def PressPower(self) -> None: ...
    def PressRight(self) -> None: ...
    def PressUp(self) -> None: ...

class parameters(abc.ABC):
    Ebegin: str
    Econd: str
    EDep: str
    nPoints: str
    tCond: str
    tDep: str
    technique: str
    tEquil: str
    tInt: str

class SimBase:
    def __init__(self) -> None: ...
    DeviceType: enumDeviceType
    SimConfig: SimConfig
    def GenerateIdleData(self) -> None: ...
    def ParseData(self, s: str) -> None: ...
    def ReadOutBuffer(self) -> str: ...
    def TryParseBuffer(self) -> None: ...

class SimConfig:
    def __init__(self) -> None: ...
    @property
    def CommandResponses(self) -> IList_1[CommandResponse]: ...
    @CommandResponses.setter
    def CommandResponses(self, value: IList_1[CommandResponse]) -> IList_1[CommandResponse]: ...
    def FindCommandResponse(self, command: str) -> CommandResponse: ...

class SimEmStat3P(Device):
    def __init__(self, simConfig: SimConfig) -> None: ...
    Simulator: EmStat3PSim
    @property
    def Baudrate(self) -> int: ...
    @property
    def ClearBufferTime(self) -> int: ...
    @ClearBufferTime.setter
    def ClearBufferTime(self, value: int) -> int: ...
    @property
    def IsProgramPortOnly(self) -> bool: ...
    @property
    def IsWireless(self) -> bool: ...
    @property
    def MaxIncomingRate(self) -> int: ...
    @MaxIncomingRate.setter
    def MaxIncomingRate(self, value: int) -> int: ...
    @property
    def MaxSamplingRateMS(self) -> int: ...
    @MaxSamplingRateMS.setter
    def MaxSamplingRateMS(self, value: int) -> int: ...
    @property
    def OutgoingMessageBlockSize(self) -> int: ...
    @OutgoingMessageBlockSize.setter
    def OutgoingMessageBlockSize(self, value: int) -> int: ...
    @property
    def OutgoingMessageDelay(self) -> int: ...
    @OutgoingMessageDelay.setter
    def OutgoingMessageDelay(self, value: int) -> int: ...
    @property
    def ShortName(self) -> str: ...
    @property
    def SupportsDownloading(self) -> bool: ...
    @property
    def TimeOut(self) -> int: ...
    def Close(self) -> None: ...
    def Read(self) -> str: ...
    def ToString(self) -> str: ...
    def Write(self, s: str) -> None: ...
    # Skipped Open due to it being static, abstract and generic.

    Open: Open_MethodGroup
    class Open_MethodGroup:
        @typing.overload
        def __call__(self) -> None: ...
        @typing.overload
        def __call__(self, baudrate: int) -> None: ...

class SimEmStatPico(Device):
    def __init__(self, simConfig: SimConfig) -> None: ...
    Simulator: EmStatPicoSim
    @property
    def Baudrate(self) -> int: ...
    @property
    def ClearBufferTime(self) -> int: ...
    @ClearBufferTime.setter
    def ClearBufferTime(self, value: int) -> int: ...
    @property
    def IsProgramPortOnly(self) -> bool: ...
    @property
    def IsWireless(self) -> bool: ...
    @property
    def MaxIncomingRate(self) -> int: ...
    @MaxIncomingRate.setter
    def MaxIncomingRate(self, value: int) -> int: ...
    @property
    def MaxSamplingRateMS(self) -> int: ...
    @MaxSamplingRateMS.setter
    def MaxSamplingRateMS(self, value: int) -> int: ...
    @property
    def OutgoingMessageBlockSize(self) -> int: ...
    @OutgoingMessageBlockSize.setter
    def OutgoingMessageBlockSize(self, value: int) -> int: ...
    @property
    def OutgoingMessageDelay(self) -> int: ...
    @OutgoingMessageDelay.setter
    def OutgoingMessageDelay(self, value: int) -> int: ...
    @property
    def ShortName(self) -> str: ...
    @property
    def SupportsDownloading(self) -> bool: ...
    @property
    def TimeOut(self) -> int: ...
    def Close(self) -> None: ...
    def Read(self) -> str: ...
    def ToString(self) -> str: ...
    def WriteAsync(self, s: str, delayBetweenBlocks: int) -> Task: ...
    # Skipped Open due to it being static, abstract and generic.

    Open: Open_MethodGroup
    class Open_MethodGroup:
        @typing.overload
        def __call__(self) -> None: ...
        @typing.overload
        def __call__(self, baudrate: int) -> None: ...

    # Skipped Write due to it being static, abstract and generic.

    Write: Write_MethodGroup
    class Write_MethodGroup:
        @typing.overload
        def __call__(self, s: str) -> None: ...
        @typing.overload
        def __call__(self, s: str, delayBetweenBlocks: int) -> None: ...

class SimMeasurement(IDisposable, abc.ABC):
    def Dispose(self) -> None: ...

class SimPalmSens(SimulatorDevice):
    def __init__(self) -> None: ...
    Simulator: PalmSensSimulator
    @property
    def Baudrate(self) -> int: ...
    @property
    def ClearBufferTime(self) -> int: ...
    @ClearBufferTime.setter
    def ClearBufferTime(self, value: int) -> int: ...
    @property
    def IsProgramPortOnly(self) -> bool: ...
    @property
    def IsWireless(self) -> bool: ...
    @property
    def MaxIncomingRate(self) -> int: ...
    @MaxIncomingRate.setter
    def MaxIncomingRate(self, value: int) -> int: ...
    @property
    def MaxSamplingRateMS(self) -> int: ...
    @MaxSamplingRateMS.setter
    def MaxSamplingRateMS(self, value: int) -> int: ...
    @property
    def OutgoingMessageBlockSize(self) -> int: ...
    @OutgoingMessageBlockSize.setter
    def OutgoingMessageBlockSize(self, value: int) -> int: ...
    @property
    def OutgoingMessageDelay(self) -> int: ...
    @OutgoingMessageDelay.setter
    def OutgoingMessageDelay(self, value: int) -> int: ...
    @property
    def ShortName(self) -> str: ...
    @property
    def SupportsDownloading(self) -> bool: ...
    @property
    def TimeOut(self) -> int: ...
    def ToString(self) -> str: ...

class SimulatorDevice(Device):
    def __init__(self, product: enumDeviceType) -> None: ...
    Simulator: PalmSensSimulator
    @property
    def Baudrate(self) -> int: ...
    @property
    def ClearBufferTime(self) -> int: ...
    @ClearBufferTime.setter
    def ClearBufferTime(self, value: int) -> int: ...
    @property
    def IsProgramPortOnly(self) -> bool: ...
    @property
    def IsWireless(self) -> bool: ...
    @property
    def MaxIncomingRate(self) -> int: ...
    @MaxIncomingRate.setter
    def MaxIncomingRate(self, value: int) -> int: ...
    @property
    def MaxSamplingRateMS(self) -> int: ...
    @MaxSamplingRateMS.setter
    def MaxSamplingRateMS(self, value: int) -> int: ...
    @property
    def OutgoingMessageBlockSize(self) -> int: ...
    @OutgoingMessageBlockSize.setter
    def OutgoingMessageBlockSize(self, value: int) -> int: ...
    @property
    def OutgoingMessageDelay(self) -> int: ...
    @OutgoingMessageDelay.setter
    def OutgoingMessageDelay(self, value: int) -> int: ...
    @property
    def ShortName(self) -> str: ...
    @property
    def SupportsDownloading(self) -> bool: ...
    @property
    def TimeOut(self) -> int: ...
    def Close(self) -> None: ...
    def Read(self) -> str: ...
    def ToString(self) -> str: ...
    def Write(self, s: str) -> None: ...
    # Skipped Open due to it being static, abstract and generic.

    Open: Open_MethodGroup
    class Open_MethodGroup:
        @typing.overload
        def __call__(self) -> None: ...
        @typing.overload
        def __call__(self, baudrate: int) -> None: ...
