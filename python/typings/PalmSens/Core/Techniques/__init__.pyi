import abc
import typing

from PalmSens import (
    CurrentRange,
    CurrentRanges,
    ExtraValueMask,
    MeasType,
    Method,
    MethodScript,
    MuxMethod,
    PolyEmStatMethodEx,
    PotentionstatChannels,
    Ranging,
    RangingPotential,
    SE2vsXChannels,
    TaskBarrier,
    enumReaction,
    enumSignal,
)
from PalmSens.Comm import ActiveMeasurement, Buffer, ClientConnection, ClientConnectionMS
from PalmSens.Data import DataArrayType
from PalmSens.Devices import DeviceCapabilities, MethodScriptDeviceCapabilities
from PalmSens.Plottables import CurveDirection
from PalmSens.Techniques import (
    ImpedimetricGstatMethod,
    ImpedimetricIterationMethodBase,
    ImpedimetricMethod,
)
from PalmSens.Techniques.Impedance import (
    DualEISModes,
    EnumFrequencyMode,
    enumFrequencyType,
    enumScanType,
)
from PalmSens.Units import Unit
from System import Array_1
from System.Collections import BitArray
from System.Collections.Generic import List_1
from System.Threading.Tasks import Task_1

class FastImpedance(ImpedimetricMethod):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MaxPGAgain: int
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def CustomFreqs(self) -> List_1[float]: ...
    @CustomFreqs.setter
    def CustomFreqs(self, value: List_1[float]) -> List_1[float]: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def Eac(self) -> float: ...
    @Eac.setter
    def Eac(self, value: float) -> float: ...
    @property
    def EndPotential(self) -> float: ...
    @EndPotential.setter
    def EndPotential(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def FixedFrequency(self) -> float: ...
    @FixedFrequency.setter
    def FixedFrequency(self, value: float) -> float: ...
    @property
    def ForceMaxHStabFilter(self) -> bool: ...
    @ForceMaxHStabFilter.setter
    def ForceMaxHStabFilter(self, value: bool) -> bool: ...
    @property
    def Freqs(self) -> List_1[float]: ...
    @property
    def FreqType(self) -> enumFrequencyType: ...
    @FreqType.setter
    def FreqType(self, value: enumFrequencyType) -> enumFrequencyType: ...
    @property
    def FrequencyMode(self) -> EnumFrequencyMode: ...
    @FrequencyMode.setter
    def FrequencyMode(self, value: EnumFrequencyMode) -> EnumFrequencyMode: ...
    @property
    def Iac(self) -> float: ...
    @Iac.setter
    def Iac(self, value: float) -> float: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def IterationMethodOverrides(self) -> ImpedimetricIterationMethodBase: ...
    @IterationMethodOverrides.setter
    def IterationMethodOverrides(
        self, value: ImpedimetricIterationMethodBase
    ) -> ImpedimetricIterationMethodBase: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxEqTime(self) -> float: ...
    @MaxEqTime.setter
    def MaxEqTime(self, value: float) -> float: ...
    @property
    def MaxFrequency(self) -> float: ...
    @MaxFrequency.setter
    def MaxFrequency(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinFrequency(self) -> float: ...
    @MinFrequency.setter
    def MinFrequency(self, value: float) -> float: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nFrequencies(self) -> int: ...
    @nFrequencies.setter
    def nFrequencies(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def NScans(self) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @PGStatMode.setter
    def PGStatMode(self, value: MethodScript.PGStatModes) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatEachFreqMeas(self) -> bool: ...
    @PretreatEachFreqMeas.setter
    def PretreatEachFreqMeas(self, value: bool) -> bool: ...
    @property
    def PretreatEachScan(self) -> bool: ...
    @PretreatEachScan.setter
    def PretreatEachScan(self, value: bool) -> bool: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def RecordDualEISMode(self) -> DualEISModes: ...
    @RecordDualEISMode.setter
    def RecordDualEISMode(self, value: DualEISModes) -> DualEISModes: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SamplingTime(self) -> float: ...
    @SamplingTime.setter
    def SamplingTime(self, value: float) -> float: ...
    @property
    def SamplingTimeMS(self) -> float: ...
    @SamplingTimeMS.setter
    def SamplingTimeMS(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def ScanType(self) -> enumScanType: ...
    @ScanType.setter
    def ScanType(self, value: enumScanType) -> enumScanType: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def ShowTDDMS(self) -> bool: ...
    @ShowTDDMS.setter
    def ShowTDDMS(self, value: bool) -> bool: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepPotential(self) -> float: ...
    @StepPotential.setter
    def StepPotential(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPEndPotential(self) -> float: ...
    @VersusOCPEndPotential.setter
    def VersusOCPEndPotential(self, value: float) -> float: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def GetMethodID(self) -> str: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...

class FastImpedanceDeviceCapabilitiesExtensions(abc.ABC):
    @staticmethod
    def SupportsFastImpedance(capabilities: DeviceCapabilities) -> bool: ...

class FastImpedanceGstat(ImpedimetricGstatMethod):
    def __init__(self) -> None: ...
    AnalyteName: str
    DefaultXAxis: DataArrayType
    DefaultYAxis: DataArrayType
    MaxPGAgain: int
    MethodID: str
    MethodIsGalvanostatic: bool
    MuxSett: Method.MuxSettings
    Name: str
    PeakOverlap: float
    PolyEmStat: PolyEmStatMethodEx
    RecordCE: bool
    ShortName: str
    SmoothLevel: int
    Standard: Array_1[float]
    Technique: int
    UseMuxChannel: BitArray
    UseStirrer: bool
    ViewBottom: float
    ViewLeft: float
    ViewRight: float
    ViewTop: float
    @property
    def AppliedCurrentRange(self) -> CurrentRange: ...
    @AppliedCurrentRange.setter
    def AppliedCurrentRange(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def Area(self) -> float: ...
    @Area.setter
    def Area(self, value: float) -> float: ...
    @property
    def Ba(self) -> float: ...
    @Ba.setter
    def Ba(self, value: float) -> float: ...
    @property
    def Bandwidth(self) -> float: ...
    @Bandwidth.setter
    def Bandwidth(self, value: float) -> float: ...
    @property
    def Bc(self) -> float: ...
    @Bc.setter
    def Bc(self, value: float) -> float: ...
    @property
    def BeginCurrent(self) -> float: ...
    @BeginCurrent.setter
    def BeginCurrent(self, value: float) -> float: ...
    @property
    def BeginPotential(self) -> float: ...
    @BeginPotential.setter
    def BeginPotential(self, value: float) -> float: ...
    @property
    def BiPotCR(self) -> CurrentRange: ...
    @BiPotCR.setter
    def BiPotCR(self, value: CurrentRange) -> CurrentRange: ...
    @property
    def BipotModePS(self) -> Method.EnumPalmSensBipotMode: ...
    @BipotModePS.setter
    def BipotModePS(
        self, value: Method.EnumPalmSensBipotMode
    ) -> Method.EnumPalmSensBipotMode: ...
    @property
    def BiPotPotential(self) -> float: ...
    @BiPotPotential.setter
    def BiPotPotential(self, value: float) -> float: ...
    @property
    def BipotRanging(self) -> Ranging: ...
    @BipotRanging.setter
    def BipotRanging(self, value: Ranging) -> Ranging: ...
    @property
    def CellOnAfterMeasurement(self) -> bool: ...
    @CellOnAfterMeasurement.setter
    def CellOnAfterMeasurement(self, value: bool) -> bool: ...
    @property
    def ConcentrationUnit(self) -> Unit: ...
    @ConcentrationUnit.setter
    def ConcentrationUnit(self, value: Unit) -> Unit: ...
    @property
    def ConditioningPotential(self) -> float: ...
    @ConditioningPotential.setter
    def ConditioningPotential(self, value: float) -> float: ...
    @property
    def ConditioningTime(self) -> float: ...
    @ConditioningTime.setter
    def ConditioningTime(self, value: float) -> float: ...
    @property
    def Current(self) -> float: ...
    @Current.setter
    def Current(self, value: float) -> float: ...
    @property
    def CustomFreqs(self) -> List_1[float]: ...
    @CustomFreqs.setter
    def CustomFreqs(self, value: List_1[float]) -> List_1[float]: ...
    @property
    def DefaultXArrayTypeBipotPotential(self) -> DataArrayType: ...
    @DefaultXArrayTypeBipotPotential.setter
    def DefaultXArrayTypeBipotPotential(self, value: DataArrayType) -> DataArrayType: ...
    @property
    def DefaultXUnit(self) -> Unit: ...
    @property
    def DefaultYUnit(self) -> Unit: ...
    @property
    def Density(self) -> float: ...
    @Density.setter
    def Density(self, value: float) -> float: ...
    @property
    def DepositionPotential(self) -> float: ...
    @DepositionPotential.setter
    def DepositionPotential(self, value: float) -> float: ...
    @property
    def DepositionTime(self) -> float: ...
    @DepositionTime.setter
    def DepositionTime(self, value: float) -> float: ...
    @property
    def EndCurrent(self) -> float: ...
    @EndCurrent.setter
    def EndCurrent(self, value: float) -> float: ...
    @property
    def EquilibrationTime(self) -> float: ...
    @EquilibrationTime.setter
    def EquilibrationTime(self, value: float) -> float: ...
    @property
    def ExtraValueMsk(self) -> ExtraValueMask: ...
    @ExtraValueMsk.setter
    def ExtraValueMsk(self, value: ExtraValueMask) -> ExtraValueMask: ...
    @property
    def FixedFrequency(self) -> float: ...
    @FixedFrequency.setter
    def FixedFrequency(self, value: float) -> float: ...
    @property
    def ForceMaxHStabFilter(self) -> bool: ...
    @ForceMaxHStabFilter.setter
    def ForceMaxHStabFilter(self, value: bool) -> bool: ...
    @property
    def Freqs(self) -> List_1[float]: ...
    @property
    def FreqType(self) -> enumFrequencyType: ...
    @FreqType.setter
    def FreqType(self, value: enumFrequencyType) -> enumFrequencyType: ...
    @property
    def FrequencyMode(self) -> EnumFrequencyMode: ...
    @FrequencyMode.setter
    def FrequencyMode(self, value: EnumFrequencyMode) -> EnumFrequencyMode: ...
    @property
    def GEquilibrationTime(self) -> float: ...
    @GEquilibrationTime.setter
    def GEquilibrationTime(self, value: float) -> float: ...
    @property
    def Iac(self) -> float: ...
    @Iac.setter
    def Iac(self, value: float) -> float: ...
    @property
    def Idc(self) -> float: ...
    @Idc.setter
    def Idc(self, value: float) -> float: ...
    @property
    def IntervalTime(self) -> float: ...
    @IntervalTime.setter
    def IntervalTime(self, value: float) -> float: ...
    @property
    def IRDropCompRes(self) -> float: ...
    @IRDropCompRes.setter
    def IRDropCompRes(self, value: float) -> float: ...
    @property
    def IsMainWE(self) -> bool: ...
    @IsMainWE.setter
    def IsMainWE(self, value: bool) -> bool: ...
    @property
    def IsVersusOCP(self) -> bool: ...
    @property
    def IterationMethodOverrides(self) -> ImpedimetricIterationMethodBase: ...
    @IterationMethodOverrides.setter
    def IterationMethodOverrides(
        self, value: ImpedimetricIterationMethodBase
    ) -> ImpedimetricIterationMethodBase: ...
    @property
    def LimitMaxValue(self) -> float: ...
    @LimitMaxValue.setter
    def LimitMaxValue(self, value: float) -> float: ...
    @property
    def LimitMinValue(self) -> float: ...
    @LimitMinValue.setter
    def LimitMinValue(self, value: float) -> float: ...
    @property
    def MaxEqTime(self) -> float: ...
    @MaxEqTime.setter
    def MaxEqTime(self, value: float) -> float: ...
    @property
    def MaxFrequency(self) -> float: ...
    @MaxFrequency.setter
    def MaxFrequency(self, value: float) -> float: ...
    @property
    def MaxMuxChannelSelected(self) -> int: ...
    @property
    def MethodFilename(self) -> str: ...
    @MethodFilename.setter
    def MethodFilename(self, value: str) -> str: ...
    @property
    def MinFrequency(self) -> float: ...
    @MinFrequency.setter
    def MinFrequency(self, value: float) -> float: ...
    @property
    def MinLevelHeight(self) -> float: ...
    @property
    def MinLevelWidth(self) -> float: ...
    @property
    def MinPeakHeight(self) -> float: ...
    @MinPeakHeight.setter
    def MinPeakHeight(self, value: float) -> float: ...
    @property
    def MinPeakWidth(self) -> float: ...
    @MinPeakWidth.setter
    def MinPeakWidth(self, value: float) -> float: ...
    @property
    def MultiplexCycles(self) -> int: ...
    @property
    def MuxMethod(self) -> MuxMethod: ...
    @MuxMethod.setter
    def MuxMethod(self, value: MuxMethod) -> MuxMethod: ...
    @property
    def MuxNoTimeResetForNextChannel(self) -> bool: ...
    @MuxNoTimeResetForNextChannel.setter
    def MuxNoTimeResetForNextChannel(self, value: bool) -> bool: ...
    @property
    def nAvgScans(self) -> int: ...
    @nAvgScans.setter
    def nAvgScans(self, value: int) -> int: ...
    @property
    def nFrequencies(self) -> int: ...
    @nFrequencies.setter
    def nFrequencies(self, value: int) -> int: ...
    @property
    def nOCPparameters(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def nPoints(self) -> int: ...
    @property
    def nScans(self) -> int: ...
    @nScans.setter
    def nScans(self, value: int) -> int: ...
    @property
    def NScans(self) -> int: ...
    @property
    def OCPMaxOCPTime(self) -> float: ...
    @OCPMaxOCPTime.setter
    def OCPMaxOCPTime(self, value: float) -> float: ...
    @property
    def OCPmode(self) -> int: ...
    @OCPmode.setter
    def OCPmode(self, value: int) -> int: ...
    @property
    def OCPStabilityCriterion(self) -> float: ...
    @OCPStabilityCriterion.setter
    def OCPStabilityCriterion(self, value: float) -> float: ...
    @property
    def OriginalAppliedCurrentRange(self) -> typing.Optional[CurrentRanges]: ...
    @OriginalAppliedCurrentRange.setter
    def OriginalAppliedCurrentRange(
        self, value: typing.Optional[CurrentRanges]
    ) -> typing.Optional[CurrentRanges]: ...
    @property
    def OverrideBandwidth(self) -> bool: ...
    @OverrideBandwidth.setter
    def OverrideBandwidth(self, value: bool) -> bool: ...
    @property
    def OverridePGStatMode(self) -> bool: ...
    @OverridePGStatMode.setter
    def OverridePGStatMode(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRange(self) -> bool: ...
    @OverridePotentialRange.setter
    def OverridePotentialRange(self, value: bool) -> bool: ...
    @property
    def OverridePotentialRangeMax(self) -> float: ...
    @OverridePotentialRangeMax.setter
    def OverridePotentialRangeMax(self, value: float) -> float: ...
    @property
    def OverridePotentialRangeMin(self) -> float: ...
    @OverridePotentialRangeMin.setter
    def OverridePotentialRangeMin(self, value: float) -> float: ...
    @property
    def Overrides(self) -> str: ...
    @Overrides.setter
    def Overrides(self, value: str) -> str: ...
    @property
    def PeakWindow(self) -> float: ...
    @PeakWindow.setter
    def PeakWindow(self, value: float) -> float: ...
    @property
    def PGStatMode(self) -> MethodScript.PGStatModes: ...
    @property
    def PolyStatMode(self) -> PolyEmStatMethodEx.enumEMode: ...
    @property
    def Potential(self) -> float: ...
    @Potential.setter
    def Potential(self, value: float) -> float: ...
    @property
    def PretLimitMaxValue(self) -> float: ...
    @PretLimitMaxValue.setter
    def PretLimitMaxValue(self, value: float) -> float: ...
    @property
    def PretLimitMinValue(self) -> float: ...
    @PretLimitMinValue.setter
    def PretLimitMinValue(self, value: float) -> float: ...
    @property
    def PretreatEachFreqMeas(self) -> bool: ...
    @PretreatEachFreqMeas.setter
    def PretreatEachFreqMeas(self, value: bool) -> bool: ...
    @property
    def PretreatEachScan(self) -> bool: ...
    @PretreatEachScan.setter
    def PretreatEachScan(self, value: bool) -> bool: ...
    @property
    def PretreatmentDuration(self) -> float: ...
    @property
    def Ranging(self) -> Ranging: ...
    @Ranging.setter
    def Ranging(self, value: Ranging) -> Ranging: ...
    @property
    def RangingPotential(self) -> RangingPotential: ...
    @RangingPotential.setter
    def RangingPotential(self, value: RangingPotential) -> RangingPotential: ...
    @property
    def RangingType(self) -> Method.RangingTypes: ...
    @property
    def Reaction(self) -> enumReaction: ...
    @Reaction.setter
    def Reaction(self, value: enumReaction) -> enumReaction: ...
    @property
    def ReferenceElectrodeName(self) -> str: ...
    @ReferenceElectrodeName.setter
    def ReferenceElectrodeName(self, value: str) -> str: ...
    @property
    def ReferenceElectrodeOffset(self) -> float: ...
    @ReferenceElectrodeOffset.setter
    def ReferenceElectrodeOffset(self, value: float) -> float: ...
    @property
    def Replications(self) -> int: ...
    @Replications.setter
    def Replications(self, value: int) -> int: ...
    @property
    def RunTime(self) -> float: ...
    @RunTime.setter
    def RunTime(self, value: float) -> float: ...
    @property
    def SamplingTime(self) -> float: ...
    @SamplingTime.setter
    def SamplingTime(self, value: float) -> float: ...
    @property
    def SamplingTimeMS(self) -> float: ...
    @SamplingTimeMS.setter
    def SamplingTimeMS(self, value: float) -> float: ...
    @property
    def SavedToFile(self) -> bool: ...
    @SavedToFile.setter
    def SavedToFile(self, value: bool) -> bool: ...
    @property
    def SaveOnDevice(self) -> bool: ...
    @SaveOnDevice.setter
    def SaveOnDevice(self, value: bool) -> bool: ...
    @property
    def ScanType(self) -> enumScanType: ...
    @ScanType.setter
    def ScanType(self, value: enumScanType) -> enumScanType: ...
    @property
    def SE2vsXChannel(self) -> SE2vsXChannels: ...
    @SE2vsXChannel.setter
    def SE2vsXChannel(self, value: SE2vsXChannels) -> SE2vsXChannels: ...
    @property
    def SelectedPotentiostatChannel(self) -> PotentionstatChannels: ...
    @SelectedPotentiostatChannel.setter
    def SelectedPotentiostatChannel(
        self, value: PotentionstatChannels
    ) -> PotentionstatChannels: ...
    @property
    def ShowTDDMS(self) -> bool: ...
    @ShowTDDMS.setter
    def ShowTDDMS(self, value: bool) -> bool: ...
    @property
    def Signal(self) -> enumSignal: ...
    @Signal.setter
    def Signal(self, value: enumSignal) -> enumSignal: ...
    @property
    def StandbyPotential(self) -> float: ...
    @StandbyPotential.setter
    def StandbyPotential(self, value: float) -> float: ...
    @property
    def StandbyTime(self) -> float: ...
    @StandbyTime.setter
    def StandbyTime(self, value: float) -> float: ...
    @property
    def StepCurrent(self) -> float: ...
    @StepCurrent.setter
    def StepCurrent(self, value: float) -> float: ...
    @property
    def SupportsCorrosion(self) -> bool: ...
    @property
    def SupportsHoldDuringMeasurement(self) -> bool: ...
    @property
    def SupportsIRDropComp(self) -> bool: ...
    @property
    def TriggerDelayPeriod(self) -> float: ...
    @TriggerDelayPeriod.setter
    def TriggerDelayPeriod(self, value: float) -> float: ...
    @property
    def TriggerValueOnDelay(self) -> int: ...
    @TriggerValueOnDelay.setter
    def TriggerValueOnDelay(self, value: int) -> int: ...
    @property
    def TriggerValueOnEquil(self) -> int: ...
    @TriggerValueOnEquil.setter
    def TriggerValueOnEquil(self, value: int) -> int: ...
    @property
    def TriggerValueOnStart(self) -> int: ...
    @TriggerValueOnStart.setter
    def TriggerValueOnStart(self, value: int) -> int: ...
    @property
    def UseAlternativeSignalTrain(self) -> None: ...
    @UseAlternativeSignalTrain.setter
    def UseAlternativeSignalTrain(self, value: bool) -> None: ...
    @property
    def UseHWSync(self) -> bool: ...
    @UseHWSync.setter
    def UseHWSync(self, value: bool) -> bool: ...
    @property
    def UseIRDropComp(self) -> bool: ...
    @UseIRDropComp.setter
    def UseIRDropComp(self, value: bool) -> bool: ...
    @property
    def UseLimitMaxValue(self) -> bool: ...
    @UseLimitMaxValue.setter
    def UseLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UseLimitMinValue(self) -> bool: ...
    @UseLimitMinValue.setter
    def UseLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMaxValue(self) -> bool: ...
    @UsePretLimitMaxValue.setter
    def UsePretLimitMaxValue(self, value: bool) -> bool: ...
    @property
    def UsePretLimitMinValue(self) -> bool: ...
    @UsePretLimitMinValue.setter
    def UsePretLimitMinValue(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnDelay(self) -> bool: ...
    @UseTriggerOnDelay.setter
    def UseTriggerOnDelay(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnEquil(self) -> bool: ...
    @UseTriggerOnEquil.setter
    def UseTriggerOnEquil(self, value: bool) -> bool: ...
    @property
    def UseTriggerOnStart(self) -> bool: ...
    @UseTriggerOnStart.setter
    def UseTriggerOnStart(self, value: bool) -> bool: ...
    @property
    def VersusOCPPotential(self) -> float: ...
    @VersusOCPPotential.setter
    def VersusOCPPotential(self, value: float) -> float: ...
    @property
    def VsPrevEI(self) -> bool: ...
    @VsPrevEI.setter
    def VsPrevEI(self, value: bool) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> float: ...
    @property
    def XDirection(self) -> CurveDirection: ...
    @property
    def XLeft(self) -> float: ...
    @property
    def XRight(self) -> float: ...
    @property
    def YBottom(self) -> float: ...
    @property
    def YDirection(self) -> CurveDirection: ...
    @property
    def YTop(self) -> float: ...
    def GetMethodID(self) -> str: ...
    def ReceiveMeasurementMS(
        self, c: ClientConnection, muxChannel: int, measType: MeasType, measBuff: Buffer = ...
    ) -> ActiveMeasurement: ...
    def ReceiveMeasurementMSAsync(
        self,
        c: ClientConnection,
        muxChannel: int,
        measType: MeasType,
        measBuff: Buffer = ...,
        taskBarrier: TaskBarrier = ...,
    ) -> Task_1[ActiveMeasurement]: ...
    def ToMethodScript(
        self,
        capabilities: MethodScriptDeviceCapabilities,
        forEditor: bool,
        connMS: ClientConnectionMS = ...,
    ) -> MethodScript: ...
    def ToShortString(self) -> str: ...
    def ToString(self) -> str: ...
