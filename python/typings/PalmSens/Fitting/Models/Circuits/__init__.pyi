import abc
import typing

from PalmSens.Fitting.Models.Circuits.Elements import ElementTypes, IElementBase
from System import Array_1
from System.Collections.Generic import List_1

class CDCQueItem:
    @typing.overload
    def __init__(self, elementType: ElementTypes) -> None: ...
    @typing.overload
    def __init__(self, elementType: ElementTypes, value: float) -> None: ...
    @typing.overload
    def __init__(self, elementType: ElementTypes, value: float, value2: float) -> None: ...
    @typing.overload
    def __init__(
        self, elementType: ElementTypes, value: float, value2: float, value3: float
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        elementType: ElementTypes,
        value: float,
        value2: float,
        value3: float,
        value4: float,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        elementType: ElementTypes,
        value: float,
        value2: float,
        value3: float,
        value4: float,
        value5: float,
    ) -> None: ...
    ElementType: ElementTypes
    NewElement: bool
    Value: float
    Value2: float
    Value3: float
    Value4: float
    Value5: float

class CircuitDesigner:
    def __init__(self, fromChild: bool = ...) -> None: ...
    @property
    def CircuitDesign(self) -> List_1[ISubGroup]: ...
    @CircuitDesign.setter
    def CircuitDesign(self, value: List_1[ISubGroup]) -> List_1[ISubGroup]: ...
    def AddSubGroupParallel(
        self, type: ElementTypes, grpLeft: ISubGroup, grpBase: ISubGroup, grpRight: ISubGroup
    ) -> None: ...
    def CDCAddParallelGroup(self, grpParent: ISubGroup, iPrlSeries: int) -> ISubGroup: ...
    def CDCAddSeries(
        self, type: ElementTypes, grpParent: ISubGroup, iPrlSeries: int
    ) -> None: ...
    def RemoveGroup(self, grp: ISubGroup) -> None: ...

class CircuitParser:
    def __init__(self, cd: CircuitDesigner) -> None: ...
    @property
    def CDC(self) -> str: ...
    def CircuitToString(self, circuitDesign: List_1[ISubGroup]) -> str: ...
    @staticmethod
    def GetCircuitFromCDC(cdc: str) -> List_1[ISubGroup]: ...
    def InsertCDC(self, key: str, index: int) -> Array_1[str]: ...
    def ParseString(self, str: str) -> str: ...

class ConnectorGroup(SubGroup):
    @typing.overload
    def __init__(self, fromChild: bool = ...) -> None: ...
    @typing.overload
    def __init__(
        self, grpLeft: ISubGroup, grpRight: ISubGroup, grpParent: ISubGroup
    ) -> None: ...
    @property
    def Elements(self) -> List_1[IElementBase]: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @ElementType.setter
    def ElementType(self, value: ElementTypes) -> ElementTypes: ...
    @property
    def ElementValue(self) -> float: ...
    @ElementValue.setter
    def ElementValue(self, value: float) -> float: ...
    @property
    def ElementValue2(self) -> float: ...
    @ElementValue2.setter
    def ElementValue2(self, value: float) -> float: ...
    @property
    def ElementValue2Max(self) -> float: ...
    @ElementValue2Max.setter
    def ElementValue2Max(self, value: float) -> float: ...
    @property
    def ElementValue2Min(self) -> float: ...
    @ElementValue2Min.setter
    def ElementValue2Min(self, value: float) -> float: ...
    @property
    def ElementValue3(self) -> float: ...
    @ElementValue3.setter
    def ElementValue3(self, value: float) -> float: ...
    @property
    def ElementValue3Max(self) -> float: ...
    @ElementValue3Max.setter
    def ElementValue3Max(self, value: float) -> float: ...
    @property
    def ElementValue3Min(self) -> float: ...
    @ElementValue3Min.setter
    def ElementValue3Min(self, value: float) -> float: ...
    @property
    def ElementValue4(self) -> float: ...
    @ElementValue4.setter
    def ElementValue4(self, value: float) -> float: ...
    @property
    def ElementValue4Max(self) -> float: ...
    @ElementValue4Max.setter
    def ElementValue4Max(self, value: float) -> float: ...
    @property
    def ElementValue4Min(self) -> float: ...
    @ElementValue4Min.setter
    def ElementValue4Min(self, value: float) -> float: ...
    @property
    def ElementValue5(self) -> float: ...
    @ElementValue5.setter
    def ElementValue5(self, value: float) -> float: ...
    @property
    def ElementValue5Max(self) -> float: ...
    @ElementValue5Max.setter
    def ElementValue5Max(self, value: float) -> float: ...
    @property
    def ElementValue5Min(self) -> float: ...
    @ElementValue5Min.setter
    def ElementValue5Min(self, value: float) -> float: ...
    @property
    def ElementValueMax(self) -> float: ...
    @ElementValueMax.setter
    def ElementValueMax(self, value: float) -> float: ...
    @property
    def ElementValueMin(self) -> float: ...
    @ElementValueMin.setter
    def ElementValueMin(self, value: float) -> float: ...
    @property
    def GroupLeft(self) -> ISubGroup: ...
    @GroupLeft.setter
    def GroupLeft(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupRight(self) -> ISubGroup: ...
    @GroupRight.setter
    def GroupRight(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupType(self) -> GroupTypes: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def ParallelSeries(self) -> List_1[List_1[ISubGroup]]: ...
    @property
    def Preview(self) -> bool: ...
    @Preview.setter
    def Preview(self, value: bool) -> bool: ...
    @property
    def StatusConn(self) -> StatConn: ...
    @StatusConn.setter
    def StatusConn(self, value: StatConn) -> StatConn: ...
    def Clone(self) -> ISubGroup: ...

class ElementGroup(SubGroup):
    def __init__(
        self, type: ElementTypes, grpLeft: ISubGroup, grpParent: ISubGroup, grpRight: ISubGroup
    ) -> None: ...
    NValues: int
    @property
    def Elements(self) -> List_1[IElementBase]: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @ElementType.setter
    def ElementType(self, value: ElementTypes) -> ElementTypes: ...
    @property
    def ElementValue(self) -> float: ...
    @ElementValue.setter
    def ElementValue(self, value: float) -> float: ...
    @property
    def ElementValue2(self) -> float: ...
    @ElementValue2.setter
    def ElementValue2(self, value: float) -> float: ...
    @property
    def ElementValue2Max(self) -> float: ...
    @ElementValue2Max.setter
    def ElementValue2Max(self, value: float) -> float: ...
    @property
    def ElementValue2Min(self) -> float: ...
    @ElementValue2Min.setter
    def ElementValue2Min(self, value: float) -> float: ...
    @property
    def ElementValue3(self) -> float: ...
    @ElementValue3.setter
    def ElementValue3(self, value: float) -> float: ...
    @property
    def ElementValue3Max(self) -> float: ...
    @ElementValue3Max.setter
    def ElementValue3Max(self, value: float) -> float: ...
    @property
    def ElementValue3Min(self) -> float: ...
    @ElementValue3Min.setter
    def ElementValue3Min(self, value: float) -> float: ...
    @property
    def ElementValue4(self) -> float: ...
    @ElementValue4.setter
    def ElementValue4(self, value: float) -> float: ...
    @property
    def ElementValue4Max(self) -> float: ...
    @ElementValue4Max.setter
    def ElementValue4Max(self, value: float) -> float: ...
    @property
    def ElementValue4Min(self) -> float: ...
    @ElementValue4Min.setter
    def ElementValue4Min(self, value: float) -> float: ...
    @property
    def ElementValue5(self) -> float: ...
    @ElementValue5.setter
    def ElementValue5(self, value: float) -> float: ...
    @property
    def ElementValue5Max(self) -> float: ...
    @ElementValue5Max.setter
    def ElementValue5Max(self, value: float) -> float: ...
    @property
    def ElementValue5Min(self) -> float: ...
    @ElementValue5Min.setter
    def ElementValue5Min(self, value: float) -> float: ...
    @property
    def ElementValueMax(self) -> float: ...
    @ElementValueMax.setter
    def ElementValueMax(self, value: float) -> float: ...
    @property
    def ElementValueMin(self) -> float: ...
    @ElementValueMin.setter
    def ElementValueMin(self, value: float) -> float: ...
    @property
    def GroupLeft(self) -> ISubGroup: ...
    @GroupLeft.setter
    def GroupLeft(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupRight(self) -> ISubGroup: ...
    @GroupRight.setter
    def GroupRight(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupType(self) -> GroupTypes: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def ParallelSeries(self) -> List_1[List_1[ISubGroup]]: ...
    @property
    def Preview(self) -> bool: ...
    @Preview.setter
    def Preview(self, value: bool) -> bool: ...
    @property
    def StatusConn(self) -> StatConn: ...
    @StatusConn.setter
    def StatusConn(self, value: StatConn) -> StatConn: ...
    def Clone(self) -> ISubGroup: ...

class GroupTypes(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    ConnectorGroup: GroupTypes  # 0
    ElementGroup: GroupTypes  # 1
    ParallelGroup: GroupTypes  # 2

class ISubGroup(typing.Protocol):
    @property
    def Elements(self) -> List_1[IElementBase]: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def ElementValue(self) -> float: ...
    @ElementValue.setter
    def ElementValue(self, value: float) -> float: ...
    @property
    def ElementValue2(self) -> float: ...
    @ElementValue2.setter
    def ElementValue2(self, value: float) -> float: ...
    @property
    def ElementValue2Max(self) -> float: ...
    @ElementValue2Max.setter
    def ElementValue2Max(self, value: float) -> float: ...
    @property
    def ElementValue2Min(self) -> float: ...
    @ElementValue2Min.setter
    def ElementValue2Min(self, value: float) -> float: ...
    @property
    def ElementValue3(self) -> float: ...
    @ElementValue3.setter
    def ElementValue3(self, value: float) -> float: ...
    @property
    def ElementValue3Max(self) -> float: ...
    @ElementValue3Max.setter
    def ElementValue3Max(self, value: float) -> float: ...
    @property
    def ElementValue3Min(self) -> float: ...
    @ElementValue3Min.setter
    def ElementValue3Min(self, value: float) -> float: ...
    @property
    def ElementValue4(self) -> float: ...
    @ElementValue4.setter
    def ElementValue4(self, value: float) -> float: ...
    @property
    def ElementValue4Max(self) -> float: ...
    @ElementValue4Max.setter
    def ElementValue4Max(self, value: float) -> float: ...
    @property
    def ElementValue4Min(self) -> float: ...
    @ElementValue4Min.setter
    def ElementValue4Min(self, value: float) -> float: ...
    @property
    def ElementValue5(self) -> float: ...
    @ElementValue5.setter
    def ElementValue5(self, value: float) -> float: ...
    @property
    def ElementValue5Max(self) -> float: ...
    @ElementValue5Max.setter
    def ElementValue5Max(self, value: float) -> float: ...
    @property
    def ElementValue5Min(self) -> float: ...
    @ElementValue5Min.setter
    def ElementValue5Min(self, value: float) -> float: ...
    @property
    def ElementValueMax(self) -> float: ...
    @ElementValueMax.setter
    def ElementValueMax(self, value: float) -> float: ...
    @property
    def ElementValueMin(self) -> float: ...
    @ElementValueMin.setter
    def ElementValueMin(self, value: float) -> float: ...
    @property
    def GroupLeft(self) -> ISubGroup: ...
    @GroupLeft.setter
    def GroupLeft(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupRight(self) -> ISubGroup: ...
    @GroupRight.setter
    def GroupRight(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupType(self) -> GroupTypes: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def ParallelSeries(self) -> List_1[List_1[ISubGroup]]: ...
    @property
    def StatusConn(self) -> StatConn: ...
    @StatusConn.setter
    def StatusConn(self, value: StatConn) -> StatConn: ...
    @abc.abstractmethod
    def CDCNewEmptyParallelChildGroup(self, iPrlSeries: int) -> ISubGroup: ...
    @abc.abstractmethod
    def Clone(self) -> ISubGroup: ...
    @abc.abstractmethod
    def InsertParallelGroup(self, type: ElementTypes) -> None: ...
    @abc.abstractmethod
    def NewParallelChildGroup(self, type: ElementTypes, baseEle: ISubGroup) -> None: ...
    @abc.abstractmethod
    def RemoveFromChildParallelGroup(self, grp: ISubGroup, parentGrp: ISubGroup) -> None: ...
    @abc.abstractmethod
    def RemoveFromParallelGroup(self, grp: ISubGroup) -> List_1[ISubGroup]: ...
    @abc.abstractmethod
    def ResetConnections(self) -> None: ...
    @abc.abstractmethod
    def ValidateBaseGroup(
        self, grp: ISubGroup, grpLeft: ISubGroup, grpRight: ISubGroup, grpParent: ISubGroup
    ) -> None: ...
    # Skipped InsertInToParallelGroup due to it being static, abstract and generic.

    InsertInToParallelGroup: InsertInToParallelGroup_MethodGroup
    class InsertInToParallelGroup_MethodGroup:
        @typing.overload
        def __call__(self, type: ElementTypes, connGroup: ISubGroup) -> None: ...
        @typing.overload
        def __call__(self, type: ElementTypes, index: int, first: bool) -> None: ...

class ParallelGroup(SubGroup):
    @typing.overload
    def __init__(
        self, grpLeft: ISubGroup, grpRight: ISubGroup, grpParent: ISubGroup
    ) -> None: ...
    @typing.overload
    def __init__(
        self, type: ElementTypes, grpLeft: ISubGroup, grpBase: ISubGroup, grpRight: ISubGroup
    ) -> None: ...
    @property
    def Elements(self) -> List_1[IElementBase]: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @ElementType.setter
    def ElementType(self, value: ElementTypes) -> ElementTypes: ...
    @property
    def ElementValue(self) -> float: ...
    @ElementValue.setter
    def ElementValue(self, value: float) -> float: ...
    @property
    def ElementValue2(self) -> float: ...
    @ElementValue2.setter
    def ElementValue2(self, value: float) -> float: ...
    @property
    def ElementValue2Max(self) -> float: ...
    @ElementValue2Max.setter
    def ElementValue2Max(self, value: float) -> float: ...
    @property
    def ElementValue2Min(self) -> float: ...
    @ElementValue2Min.setter
    def ElementValue2Min(self, value: float) -> float: ...
    @property
    def ElementValue3(self) -> float: ...
    @ElementValue3.setter
    def ElementValue3(self, value: float) -> float: ...
    @property
    def ElementValue3Max(self) -> float: ...
    @ElementValue3Max.setter
    def ElementValue3Max(self, value: float) -> float: ...
    @property
    def ElementValue3Min(self) -> float: ...
    @ElementValue3Min.setter
    def ElementValue3Min(self, value: float) -> float: ...
    @property
    def ElementValue4(self) -> float: ...
    @ElementValue4.setter
    def ElementValue4(self, value: float) -> float: ...
    @property
    def ElementValue4Max(self) -> float: ...
    @ElementValue4Max.setter
    def ElementValue4Max(self, value: float) -> float: ...
    @property
    def ElementValue4Min(self) -> float: ...
    @ElementValue4Min.setter
    def ElementValue4Min(self, value: float) -> float: ...
    @property
    def ElementValue5(self) -> float: ...
    @ElementValue5.setter
    def ElementValue5(self, value: float) -> float: ...
    @property
    def ElementValue5Max(self) -> float: ...
    @ElementValue5Max.setter
    def ElementValue5Max(self, value: float) -> float: ...
    @property
    def ElementValue5Min(self) -> float: ...
    @ElementValue5Min.setter
    def ElementValue5Min(self, value: float) -> float: ...
    @property
    def ElementValueMax(self) -> float: ...
    @ElementValueMax.setter
    def ElementValueMax(self, value: float) -> float: ...
    @property
    def ElementValueMin(self) -> float: ...
    @ElementValueMin.setter
    def ElementValueMin(self, value: float) -> float: ...
    @property
    def GroupLeft(self) -> ISubGroup: ...
    @GroupLeft.setter
    def GroupLeft(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupRight(self) -> ISubGroup: ...
    @GroupRight.setter
    def GroupRight(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupType(self) -> GroupTypes: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def ParallelSeries(self) -> List_1[List_1[ISubGroup]]: ...
    @property
    def Preview(self) -> bool: ...
    @Preview.setter
    def Preview(self, value: bool) -> bool: ...
    @property
    def StatusConn(self) -> StatConn: ...
    @StatusConn.setter
    def StatusConn(self, value: StatConn) -> StatConn: ...
    def CDCNewEmptyParallelChildGroup(self, iPrlSeries: int) -> ISubGroup: ...
    def Clone(self) -> ISubGroup: ...
    def InsertParallelGroup(self, type: ElementTypes) -> None: ...
    def NewParallelChildGroup(self, type: ElementTypes, baseGrp: ISubGroup) -> None: ...
    def RemoveFromChildParallelGroup(self, grp: ISubGroup, parentGrp: ISubGroup) -> None: ...
    def RemoveFromParallelGroup(self, grp: ISubGroup) -> List_1[ISubGroup]: ...
    # Skipped InsertInToParallelGroup due to it being static, abstract and generic.

    InsertInToParallelGroup: InsertInToParallelGroup_MethodGroup
    class InsertInToParallelGroup_MethodGroup:
        @typing.overload
        def __call__(self, type: ElementTypes, connGroup: ISubGroup) -> None: ...
        @typing.overload
        def __call__(self, type: ElementTypes, index: int, first: bool) -> None: ...

class StatConn(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Unconnected: StatConn  # 0
    Connected: StatConn  # 1

class SubGroup(ISubGroup, abc.ABC):
    @property
    def Elements(self) -> List_1[IElementBase]: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @ElementType.setter
    def ElementType(self, value: ElementTypes) -> ElementTypes: ...
    @property
    def ElementValue(self) -> float: ...
    @ElementValue.setter
    def ElementValue(self, value: float) -> float: ...
    @property
    def ElementValue2(self) -> float: ...
    @ElementValue2.setter
    def ElementValue2(self, value: float) -> float: ...
    @property
    def ElementValue2Max(self) -> float: ...
    @ElementValue2Max.setter
    def ElementValue2Max(self, value: float) -> float: ...
    @property
    def ElementValue2Min(self) -> float: ...
    @ElementValue2Min.setter
    def ElementValue2Min(self, value: float) -> float: ...
    @property
    def ElementValue3(self) -> float: ...
    @ElementValue3.setter
    def ElementValue3(self, value: float) -> float: ...
    @property
    def ElementValue3Max(self) -> float: ...
    @ElementValue3Max.setter
    def ElementValue3Max(self, value: float) -> float: ...
    @property
    def ElementValue3Min(self) -> float: ...
    @ElementValue3Min.setter
    def ElementValue3Min(self, value: float) -> float: ...
    @property
    def ElementValue4(self) -> float: ...
    @ElementValue4.setter
    def ElementValue4(self, value: float) -> float: ...
    @property
    def ElementValue4Max(self) -> float: ...
    @ElementValue4Max.setter
    def ElementValue4Max(self, value: float) -> float: ...
    @property
    def ElementValue4Min(self) -> float: ...
    @ElementValue4Min.setter
    def ElementValue4Min(self, value: float) -> float: ...
    @property
    def ElementValue5(self) -> float: ...
    @ElementValue5.setter
    def ElementValue5(self, value: float) -> float: ...
    @property
    def ElementValue5Max(self) -> float: ...
    @ElementValue5Max.setter
    def ElementValue5Max(self, value: float) -> float: ...
    @property
    def ElementValue5Min(self) -> float: ...
    @ElementValue5Min.setter
    def ElementValue5Min(self, value: float) -> float: ...
    @property
    def ElementValueMax(self) -> float: ...
    @ElementValueMax.setter
    def ElementValueMax(self, value: float) -> float: ...
    @property
    def ElementValueMin(self) -> float: ...
    @ElementValueMin.setter
    def ElementValueMin(self, value: float) -> float: ...
    @property
    def GroupLeft(self) -> ISubGroup: ...
    @GroupLeft.setter
    def GroupLeft(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupRight(self) -> ISubGroup: ...
    @GroupRight.setter
    def GroupRight(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def GroupType(self) -> GroupTypes: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def ParallelSeries(self) -> List_1[List_1[ISubGroup]]: ...
    @property
    def Preview(self) -> bool: ...
    @Preview.setter
    def Preview(self, value: bool) -> bool: ...
    @property
    def StatusConn(self) -> StatConn: ...
    @StatusConn.setter
    def StatusConn(self, value: StatConn) -> StatConn: ...
    def CDCNewEmptyParallelChildGroup(self, iPrlSeries: int) -> ISubGroup: ...
    @abc.abstractmethod
    def Clone(self) -> ISubGroup: ...
    def InsertParallelGroup(self, type: ElementTypes) -> None: ...
    def NewParallelChildGroup(self, type: ElementTypes, baseEle: ISubGroup) -> None: ...
    def RemoveFromChildParallelGroup(self, grp: ISubGroup, parentGrp: ISubGroup) -> None: ...
    def RemoveFromParallelGroup(self, grp: ISubGroup) -> List_1[ISubGroup]: ...
    def ResetConnections(self) -> None: ...
    def ValidateBaseGroup(
        self, grp: ISubGroup, grpLeft: ISubGroup, grpRight: ISubGroup, grpParent: ISubGroup
    ) -> None: ...
    # Skipped InsertInToParallelGroup due to it being static, abstract and generic.

    InsertInToParallelGroup: InsertInToParallelGroup_MethodGroup
    class InsertInToParallelGroup_MethodGroup:
        @typing.overload
        def __call__(self, type: ElementTypes, connGroup: ISubGroup) -> None: ...
        @typing.overload
        def __call__(self, type: ElementTypes, index: int, first: bool) -> None: ...
