import abc
import typing

from PalmSens.Fitting.Models.Circuits import ISubGroup

class ElementBase(IElementBase, abc.ABC):
    @property
    def ElementStatus(self) -> ElementStat: ...
    @ElementStatus.setter
    def ElementStatus(self, value: ElementStat) -> ElementStat: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Symbol(self) -> str: ...

class ElementBisquertOpen(ElementBase):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parent: ISubGroup) -> None: ...
    @property
    def ElementStatus(self) -> ElementStat: ...
    @ElementStatus.setter
    def ElementStatus(self, value: ElementStat) -> ElementStat: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Symbol(self) -> str: ...

class ElementBisquertShort(ElementBase):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parent: ISubGroup) -> None: ...
    @property
    def ElementStatus(self) -> ElementStat: ...
    @ElementStatus.setter
    def ElementStatus(self, value: ElementStat) -> ElementStat: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Symbol(self) -> str: ...

class ElementCapacitance(ElementBase):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parent: ISubGroup) -> None: ...
    @property
    def ElementStatus(self) -> ElementStat: ...
    @ElementStatus.setter
    def ElementStatus(self, value: ElementStat) -> ElementStat: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Symbol(self) -> str: ...

class ElementConnector(ElementBase):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parent: ISubGroup, forceConnected: bool) -> None: ...
    @property
    def ElementStatus(self) -> ElementStat: ...
    @ElementStatus.setter
    def ElementStatus(self, value: ElementStat) -> ElementStat: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Symbol(self) -> str: ...

class ElementCPE(ElementBase):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parent: ISubGroup) -> None: ...
    @property
    def ElementStatus(self) -> ElementStat: ...
    @ElementStatus.setter
    def ElementStatus(self, value: ElementStat) -> ElementStat: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Symbol(self) -> str: ...

class ElementGerischer(ElementBase):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parent: ISubGroup) -> None: ...
    @property
    def ElementStatus(self) -> ElementStat: ...
    @ElementStatus.setter
    def ElementStatus(self, value: ElementStat) -> ElementStat: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Symbol(self) -> str: ...

class ElementInductance(ElementBase):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parent: ISubGroup) -> None: ...
    @property
    def ElementStatus(self) -> ElementStat: ...
    @ElementStatus.setter
    def ElementStatus(self, value: ElementStat) -> ElementStat: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Symbol(self) -> str: ...

class ElementResistance(ElementBase):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parent: ISubGroup) -> None: ...
    @property
    def ElementStatus(self) -> ElementStat: ...
    @ElementStatus.setter
    def ElementStatus(self, value: ElementStat) -> ElementStat: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Symbol(self) -> str: ...

class ElementStat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Unconnected: ElementStat  # 0
    Connected: ElementStat  # 1

class ElementTypes(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Resistance: ElementTypes  # 0
    Capacitance: ElementTypes  # 1
    Inductance: ElementTypes  # 2
    ConstantPhaseElement: ElementTypes  # 3
    WarburgComponent: ElementTypes  # 4
    WarburgShort: ElementTypes  # 5
    WarburgOpen: ElementTypes  # 6
    Gerischer: ElementTypes  # 7
    BisquertShort: ElementTypes  # 8
    BisquertOpen: ElementTypes  # 9
    Eraser: ElementTypes  # 10
    Connector: ElementTypes  # 11
    Empty: ElementTypes  # 12

class ElementWarburg(ElementBase):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parent: ISubGroup) -> None: ...
    @property
    def ElementStatus(self) -> ElementStat: ...
    @ElementStatus.setter
    def ElementStatus(self, value: ElementStat) -> ElementStat: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Symbol(self) -> str: ...

class ElementWarburgOpen(ElementBase):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parent: ISubGroup) -> None: ...
    @property
    def ElementStatus(self) -> ElementStat: ...
    @ElementStatus.setter
    def ElementStatus(self, value: ElementStat) -> ElementStat: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Symbol(self) -> str: ...

class ElementWarburgShort(ElementBase):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parent: ISubGroup) -> None: ...
    @property
    def ElementStatus(self) -> ElementStat: ...
    @ElementStatus.setter
    def ElementStatus(self, value: ElementStat) -> ElementStat: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Symbol(self) -> str: ...

class IElementBase(typing.Protocol):
    @property
    def ElementStatus(self) -> ElementStat: ...
    @ElementStatus.setter
    def ElementStatus(self, value: ElementStat) -> ElementStat: ...
    @property
    def ElementType(self) -> ElementTypes: ...
    @property
    def GroupParent(self) -> ISubGroup: ...
    @GroupParent.setter
    def GroupParent(self, value: ISubGroup) -> ISubGroup: ...
    @property
    def ID(self) -> int: ...
    @ID.setter
    def ID(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Symbol(self) -> str: ...
