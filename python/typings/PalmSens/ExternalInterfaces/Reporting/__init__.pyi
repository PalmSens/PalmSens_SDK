import abc
import typing

from PalmSens import Measurement
from PalmSens.Comm import DeviceSerial, enumDeviceType
from PalmSens.Data import SessionManager
from PalmSens.Devices import Device, DeviceCapabilities
from System import Exception, Guid
from System.Collections.Generic import Dictionary_2

class InstrumentUsageMetrics(ISessionMetrics, abc.ABC):
    @property
    def EventKey(self) -> str: ...
    def GetSessionMetrics(self, sessionID: Guid) -> Dictionary_2[str, str]: ...
    def OnCommError(self) -> None: ...
    @abc.abstractmethod
    def OnConnected(
        self, deviceSerial: DeviceSerial, device: Device, deviceType: enumDeviceType
    ) -> None: ...
    def OnDisconnected(self, deviceSerial: str) -> None: ...
    def OnFirmwareUpload(self) -> None: ...

class IReportingService(typing.Protocol):
    @abc.abstractmethod
    def ReportError(self, exception: Exception, properties: Dictionary_2[str, str]) -> None: ...
    @abc.abstractmethod
    def SendMetrics(self, sessionMetrics: ISessionMetrics) -> None: ...
    @abc.abstractmethod
    def SendSessionMetrics(self) -> None: ...

class IReportMetrics(IReportingService, typing.Protocol):
    @property
    def InstrumentUsageMetrics(self) -> InstrumentUsageMetrics: ...
    @property
    def SessionDataProcessingMetrics(self) -> SessionDataProcessingMetrics: ...
    @property
    def SessionDataUsageMetrics(self) -> SessionDataUsageMetrics: ...
    @property
    def TabAndDialogMetrics(self) -> TabAndDialogMetrics: ...

class ISessionMetrics(typing.Protocol):
    @property
    def EventKey(self) -> str: ...
    @abc.abstractmethod
    def GetSessionMetrics(self, sessionID: Guid) -> Dictionary_2[str, str]: ...

class MeasurementMetrics(ISessionMetrics, abc.ABC):
    def __init__(
        self, measurement: Measurement, capabilities: DeviceCapabilities, scriptID: str
    ) -> None: ...
    @property
    def EventKey(self) -> str: ...
    def GetSessionMetrics(self, sessionID: Guid) -> Dictionary_2[str, str]: ...

class ReportingService(abc.ABC):
    @classmethod
    @property
    def Service(cls) -> IReportMetrics: ...
    @classmethod
    @Service.setter
    def Service(cls, value: IReportMetrics) -> IReportMetrics: ...
    @staticmethod
    def ReportError(exception: Exception, properties: Dictionary_2[str, str] = ...) -> None: ...
    @staticmethod
    def SendMetrics(sessionMetrics: ISessionMetrics) -> None: ...
    @staticmethod
    def SendSessionMetrics() -> None: ...

class ScriptMetrics(ISessionMetrics, abc.ABC):
    def __init__(self, scriptID: str) -> None: ...
    @property
    def EventKey(self) -> str: ...
    def GetSessionMetrics(self, sessionID: Guid) -> Dictionary_2[str, str]: ...

class SessionDataProcessingMetrics(ISessionMetrics):
    def __init__(self) -> None: ...
    @property
    def EventKey(self) -> str: ...
    def GetSessionMetrics(self, sessionID: Guid) -> Dictionary_2[str, str]: ...
    def OnAnalyticalModelFit(self) -> None: ...
    def OnAutoPeakLevelUsed(self) -> None: ...
    def OnButlerVolmerFitAuto(self) -> None: ...
    def OnButlerVolmerFitManual(self) -> None: ...
    def OnCurveOperationsPerformed(self) -> None: ...
    def OnEquivalentCircuitFit(self) -> None: ...
    def OnEquivalentCircuitFitCorrosion(self) -> None: ...
    def OnLegendTitleRenamed(self) -> None: ...
    def OnManualPeakLevelUsed(self) -> None: ...
    def OnPeaksAndOrLevelCopied(self) -> None: ...
    def OnPlotViewChanges(self) -> None: ...
    def OnPointLabelAdded(self) -> None: ...
    def OnSecondaryAxesUses(self) -> None: ...
    def OnTafelFit(self) -> None: ...
    def SetAutoPeakLevelSettingEnabled(self, enabled: bool) -> None: ...
    def SetElectrodCorrectionEnabled(self, enabled: bool) -> None: ...

class SessionDataUsageMetrics(ISessionMetrics):
    def __init__(self) -> None: ...
    TargetSessionManager: SessionManager
    @property
    def EventKey(self) -> str: ...
    def GetSessionMetrics(self, sessionID: Guid) -> Dictionary_2[str, str]: ...
    def OnExportToCSV(self, count: int) -> None: ...
    def OnExportToExcel(self) -> None: ...
    def OnExportToMatlab(self, count: int) -> None: ...
    def OnExportToOrigin(self, count: int) -> None: ...
    def OnMaxConcurrentMeasurementsOpenUpdated(
        self, sessionManager: SessionManager, concurrentOpenMeasurements: int
    ) -> None: ...
    def OnMaxConcurrentPlottablesOpenUpdated(
        self, sessionManager: SessionManager, concurrentPlottables: int
    ) -> None: ...
    def OnMaxConcurrentPointsPlotted(self, concurrentPoints: int) -> None: ...
    def OnMeasurementAdded(self, sessionManager: SessionManager, technique: str) -> None: ...
    def OnMeasurementsLoaded(self, count: int) -> None: ...
    def OnMeasurementsLoadedInternalStorage(self, count: int) -> None: ...
    def OnMeasurementsSaved(self, count: int) -> None: ...
    def SetAutoSaveAndRecoveryMetrics(self, autoSave: bool, recovery: bool) -> None: ...

class TabAndDialogMetrics(ISessionMetrics):
    def __init__(self) -> None: ...
    @property
    def EventKey(self) -> str: ...
    def GetSessionMetrics(self, sessionID: Guid) -> Dictionary_2[str, str]: ...
    def OnAnalyticalTab(self) -> None: ...
    def OnCircuitFittingWindow(self) -> None: ...
    def OnCorrosionTab(self) -> None: ...
    def OnCurveCalculations(self) -> None: ...
    def OnCurveFlyout(self) -> None: ...
    def OnCurveOperations(self) -> None: ...
    def OnDataTab(self) -> None: ...
    def OnEISFlyout(self) -> None: ...
    def OnEISPlotTab(self) -> None: ...
    def OnGeneralSettings(self) -> None: ...
    def OnInstrumentSettings(self) -> None: ...
    def OnLoadSaveDialog(self) -> None: ...
    def OnManualControlTab(self) -> None: ...
    def OnMeasurementFlyout(self) -> None: ...
    def OnPeakWindow(self) -> None: ...
    def OnPlotTab(self) -> None: ...
    def OnScriptWindow(self) -> None: ...
    def OnSeparatePeaks(self) -> None: ...
