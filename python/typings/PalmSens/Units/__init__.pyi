import abc
import typing

from Newtonsoft.Json import JsonReader
from PalmSens.DataFiles import JsonBag
from System import Version
from System.Threading import CancellationToken
from System.Threading.Tasks import Task_1

class AdjustedSIPrefixUnit(Unit):
    @typing.overload
    def __init__(self, bag: JsonBag, coreVersion: Version) -> None: ...
    @typing.overload
    def __init__(self, s: str, q: str, a: str) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def ToJsonBag(self) -> JsonBag: ...

class Ampere(SIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...

class DerivativeUnit(FixedUnit, IDerivedUnit):
    @typing.overload
    def __init__(self, bag: JsonBag, coreVersion: Version) -> None: ...
    @typing.overload
    def __init__(self, xUnit: Unit, yUnit: Unit) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def OriginalUnit(self) -> Unit: ...
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    @staticmethod
    def DerivativeUnitFromJson(jr: JsonReader) -> Task_1[DerivativeUnit]: ...
    def ToJsonBag(self) -> JsonBag: ...

class FahradImaginary(SIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def Format(self, f: float) -> str: ...
    def ToJsonBag(self) -> JsonBag: ...

class FahradReal(SIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def Format(self, f: float) -> str: ...
    def ToJsonBag(self) -> JsonBag: ...

class Farad(SIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...

class FixedUnit(Unit):
    @typing.overload
    def __init__(self, bag: JsonBag, coreVersion: Version) -> None: ...
    @typing.overload
    def __init__(self, s: str, q: str, a: str) -> None: ...
    @typing.overload
    def __init__(self, serializedString: str) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...

class Hertz(SIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def Format(self, f: float) -> str: ...
    def FormatNoPrefix(self, value: float) -> str: ...
    def ToJsonBag(self) -> JsonBag: ...

class IDerivedUnit(typing.Protocol):
    @property
    def OriginalUnit(self) -> Unit: ...

class Index(FixedUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...

class IntegralUnit(FixedUnit, IDerivedUnit):
    @typing.overload
    def __init__(self, bag: JsonBag, coreVersion: Version) -> None: ...
    @typing.overload
    def __init__(self, xUnit: Unit, yUnit: Unit) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def OriginalUnit(self) -> Unit: ...
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    @staticmethod
    def IntegralUnitFromJson(jr: JsonReader) -> Task_1[IntegralUnit]: ...
    def ToJsonBag(self) -> JsonBag: ...

class InverseSquareRootTime(Unit, IDerivedUnit):
    def __init__(self) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def OriginalUnit(self) -> Unit: ...
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def Format(self, f: float) -> str: ...
    def ToJsonBag(self) -> JsonBag: ...

class Log10Current(AdjustedSIPrefixUnit, IDerivedUnit):
    @typing.overload
    def __init__(self, bag: JsonBag, coreVersion: Version) -> None: ...
    @typing.overload
    def __init__(self, originalUnit: Unit, minimumCurrentRange: float) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def OriginalUnit(self) -> Unit: ...
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ConvertValue(self, originalvalue: float) -> float: ...
    @staticmethod
    def Log10CurrentFromJson(jr: JsonReader) -> Task_1[Log10Current]: ...
    def ToJsonBag(self) -> JsonBag: ...
    def ToLongString(self, pf: Prefix) -> str: ...
    def ToString(self, pf: Prefix) -> str: ...

class Log10Unit(FixedUnit, IDerivedUnit):
    @typing.overload
    def __init__(self, bag: JsonBag, coreVersion: Version) -> None: ...
    @typing.overload
    def __init__(self, originalUnit: Unit) -> None: ...
    @typing.overload
    def __init__(self, s: str, q: str, a: str) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def OriginalUnit(self) -> Unit: ...
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ConvertValue(self, originalvalue: float) -> float: ...
    @staticmethod
    def Log10UnitFromJson(jr: JsonReader) -> Task_1[Log10Unit]: ...
    def ToJsonBag(self) -> JsonBag: ...
    def ToLongString(self, pf: Prefix) -> str: ...
    def ToString(self) -> str: ...

class MicroAmpere(AdjustedSIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...

class MicroCoulomb(AdjustedSIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def Format(self, f: float) -> str: ...
    def ToJsonBag(self) -> JsonBag: ...

class MicroWatt(AdjustedSIPrefixUnit, IDerivedUnit):
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    @typing.overload
    def __init__(self, originalUnit: Unit) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def OriginalUnit(self) -> Unit: ...
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...

class Ohm(SIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def Format(self, value: float) -> str: ...
    def ToJsonBag(self) -> JsonBag: ...

class Phase(FixedUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...

class Prefix:
    def __init__(self, factor: float, prefix: str) -> None: ...
    Factor: float
    def ToString(self) -> str: ...

class SecondDerivativeUnit(FixedUnit, IDerivedUnit):
    @typing.overload
    def __init__(self, bag: JsonBag, coreVersion: Version) -> None: ...
    @typing.overload
    def __init__(self, xUnit: Unit, yUnit: Unit) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def OriginalUnit(self) -> Unit: ...
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    @staticmethod
    def SecondDerivativeUnitFromJson(jr: JsonReader) -> Task_1[SecondDerivativeUnit]: ...
    def ToJsonBag(self) -> JsonBag: ...

class SIPrefixUnit(Unit):
    @typing.overload
    def __init__(self, bag: JsonBag, coreVersion: Version) -> None: ...
    @typing.overload
    def __init__(self, s: str, q: str, a: str) -> None: ...
    @typing.overload
    def __init__(self, serializedString: str) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def ToJsonBag(self) -> JsonBag: ...

class SquareRootTime(Unit, IDerivedUnit):
    def __init__(self) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def OriginalUnit(self) -> Unit: ...
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def Format(self, f: float) -> str: ...
    def ToJsonBag(self) -> JsonBag: ...

class Temperature(Unit):
    def __init__(self) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...

class Time(Unit):
    def __init__(self) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def Format(self, f: float) -> str: ...
    def ToJsonBag(self) -> JsonBag: ...

class Unit(abc.ABC):
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    @abc.abstractmethod
    def Clone(self) -> Unit: ...
    def ConvertValue(self, originalvalue: float) -> float: ...
    def Equals(self, o: typing.Any) -> bool: ...
    @staticmethod
    def FromJsonBag(bag: JsonBag, coreVersion: Version) -> Unit: ...
    @staticmethod
    def FromJsonBagAsync(jr: JsonReader) -> Task_1[Unit]: ...
    def GetHashCode(self) -> int: ...
    def GetPrefix(self, f: float) -> Prefix: ...
    def Serialize(self) -> str: ...
    def ToJsonBag(self) -> JsonBag: ...
    def ToJsonBagAsync(self, cancellationToken: CancellationToken) -> Task_1[JsonBag]: ...
    def ToLongString(self, pf: Prefix) -> str: ...
    # Skipped Format due to it being static, abstract and generic.

    Format: Format_MethodGroup
    class Format_MethodGroup:
        @typing.overload
        def __call__(self, f: float) -> str: ...
        @typing.overload
        def __call__(self, pf: Prefix, f: float) -> str: ...

    # Skipped GetUnitWithPrefix due to it being static, abstract and generic.

    GetUnitWithPrefix: GetUnitWithPrefix_MethodGroup
    class GetUnitWithPrefix_MethodGroup:
        @typing.overload
        def __call__(self, f: float) -> str: ...
        @typing.overload
        def __call__(self, pf: Prefix, f: float) -> str: ...

    # Skipped ToString due to it being static, abstract and generic.

    ToString: ToString_MethodGroup
    class ToString_MethodGroup:
        @typing.overload
        def __call__(self) -> str: ...
        @typing.overload
        def __call__(self, pf: Prefix) -> str: ...

class VauxV(FixedUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...

class Volt(SIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def Format(self, f: float) -> str: ...
    def ToJsonBag(self) -> JsonBag: ...

class Y(SIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...

class YIm(SIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...

class YRe(SIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...

class Z(SIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def Format(self, value: float) -> str: ...
    def ToJsonBag(self) -> JsonBag: ...

class ZIm(SIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...

class ZRe(SIPrefixUnit):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bag: JsonBag, version: Version) -> None: ...
    Abbreviation: str
    IsLogarithmic: bool
    Quantity: str
    Symbol: str
    @property
    def ZeroPrefix(self) -> Prefix: ...
    def Clone(self) -> Unit: ...
    def ToJsonBag(self) -> JsonBag: ...
