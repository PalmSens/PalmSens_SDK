import typing

import clr
from System import Array_1, IDisposable, ReadOnlyMemory_1, Span_1
from System.Runtime.Serialization import (
    IDeserializationCallback,
    ISerializable,
    SerializationInfo,
    StreamingContext,
)
from System.Security import SecureString
from System.Security.Cryptography import HashAlgorithmName

class X509Certificate(ISerializable, IDeserializationCallback, IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, cert: X509Certificate) -> None: ...
    @typing.overload
    def __init__(self, data: Array_1[int]) -> None: ...
    @typing.overload
    def __init__(self, fileName: str) -> None: ...
    @typing.overload
    def __init__(self, fileName: str, password: str) -> None: ...
    @typing.overload
    def __init__(self, fileName: str, password: SecureString) -> None: ...
    @typing.overload
    def __init__(
        self, fileName: str, password: str, keyStorageFlags: X509KeyStorageFlags
    ) -> None: ...
    @typing.overload
    def __init__(
        self, fileName: str, password: SecureString, keyStorageFlags: X509KeyStorageFlags
    ) -> None: ...
    @typing.overload
    def __init__(self, handle: int) -> None: ...
    @typing.overload
    def __init__(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @typing.overload
    def __init__(self, rawData: Array_1[int], password: str) -> None: ...
    @typing.overload
    def __init__(self, rawData: Array_1[int], password: SecureString) -> None: ...
    @typing.overload
    def __init__(
        self, rawData: Array_1[int], password: str, keyStorageFlags: X509KeyStorageFlags
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        rawData: Array_1[int],
        password: SecureString,
        keyStorageFlags: X509KeyStorageFlags,
    ) -> None: ...
    @property
    def Handle(self) -> int: ...
    @property
    def Issuer(self) -> str: ...
    @property
    def SerialNumberBytes(self) -> ReadOnlyMemory_1[int]: ...
    @property
    def Subject(self) -> str: ...
    @staticmethod
    def CreateFromCertFile(filename: str) -> X509Certificate: ...
    @staticmethod
    def CreateFromSignedFile(filename: str) -> X509Certificate: ...
    def Dispose(self) -> None: ...
    def GetEffectiveDateString(self) -> str: ...
    def GetExpirationDateString(self) -> str: ...
    def GetFormat(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetIssuerName(self) -> str: ...
    def GetKeyAlgorithm(self) -> str: ...
    def GetKeyAlgorithmParameters(self) -> Array_1[int]: ...
    def GetKeyAlgorithmParametersString(self) -> str: ...
    def GetName(self) -> str: ...
    def GetPublicKey(self) -> Array_1[int]: ...
    def GetPublicKeyString(self) -> str: ...
    def GetRawCertData(self) -> Array_1[int]: ...
    def GetRawCertDataString(self) -> str: ...
    def GetSerialNumber(self) -> Array_1[int]: ...
    def GetSerialNumberString(self) -> str: ...
    def Reset(self) -> None: ...
    def TryGetCertHash(
        self,
        hashAlgorithm: HashAlgorithmName,
        destination: Span_1[int],
        bytesWritten: clr.Reference[int],
    ) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals: Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: X509Certificate) -> bool: ...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool: ...

    # Skipped Export due to it being static, abstract and generic.

    Export: Export_MethodGroup
    class Export_MethodGroup:
        @typing.overload
        def __call__(self, contentType: X509ContentType) -> Array_1[int]: ...
        @typing.overload
        def __call__(self, contentType: X509ContentType, password: str) -> Array_1[int]: ...
        @typing.overload
        def __call__(
            self, contentType: X509ContentType, password: SecureString
        ) -> Array_1[int]: ...

    # Skipped GetCertHash due to it being static, abstract and generic.

    GetCertHash: GetCertHash_MethodGroup
    class GetCertHash_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[int]: ...
        @typing.overload
        def __call__(self, hashAlgorithm: HashAlgorithmName) -> Array_1[int]: ...

    # Skipped GetCertHashString due to it being static, abstract and generic.

    GetCertHashString: GetCertHashString_MethodGroup
    class GetCertHashString_MethodGroup:
        @typing.overload
        def __call__(self) -> str: ...
        @typing.overload
        def __call__(self, hashAlgorithm: HashAlgorithmName) -> str: ...

    # Skipped Import due to it being static, abstract and generic.

    Import: Import_MethodGroup
    class Import_MethodGroup:
        @typing.overload
        def __call__(self, rawData: Array_1[int]) -> None: ...
        @typing.overload
        def __call__(self, fileName: str) -> None: ...
        @typing.overload
        def __call__(
            self, rawData: Array_1[int], password: str, keyStorageFlags: X509KeyStorageFlags
        ) -> None: ...
        @typing.overload
        def __call__(
            self,
            rawData: Array_1[int],
            password: SecureString,
            keyStorageFlags: X509KeyStorageFlags,
        ) -> None: ...
        @typing.overload
        def __call__(
            self, fileName: str, password: str, keyStorageFlags: X509KeyStorageFlags
        ) -> None: ...
        @typing.overload
        def __call__(
            self, fileName: str, password: SecureString, keyStorageFlags: X509KeyStorageFlags
        ) -> None: ...

    # Skipped ToString due to it being static, abstract and generic.

    ToString: ToString_MethodGroup
    class ToString_MethodGroup:
        @typing.overload
        def __call__(self) -> str: ...
        @typing.overload
        def __call__(self, fVerbose: bool) -> str: ...

class X509ContentType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Unknown: X509ContentType  # 0
    Cert: X509ContentType  # 1
    SerializedCert: X509ContentType  # 2
    Pfx: X509ContentType  # 3
    Pkcs12: X509ContentType  # 3
    SerializedStore: X509ContentType  # 4
    Pkcs7: X509ContentType  # 5
    Authenticode: X509ContentType  # 6

class X509KeyStorageFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    DefaultKeySet: X509KeyStorageFlags  # 0
    UserKeySet: X509KeyStorageFlags  # 1
    MachineKeySet: X509KeyStorageFlags  # 2
    Exportable: X509KeyStorageFlags  # 4
    UserProtected: X509KeyStorageFlags  # 8
    PersistKeySet: X509KeyStorageFlags  # 16
    EphemeralKeySet: X509KeyStorageFlags  # 32
