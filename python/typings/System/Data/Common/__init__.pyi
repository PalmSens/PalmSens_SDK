import abc
import typing

from System import Array_1, DateTime, Decimal, Guid, IAsyncDisposable, MarshalByRefObject
from System.Collections import IEnumerable, IEnumerator
from System.Collections.ObjectModel import ReadOnlyCollection_1
from System.Data import DataTable, IDataReader
from System.IO import Stream, TextReader
from System.Threading import CancellationToken
from System.Threading.Tasks import Task, Task_1, ValueTask

class DbColumn(abc.ABC):
    @property
    def AllowDBNull(self) -> typing.Optional[bool]: ...
    @AllowDBNull.setter
    def AllowDBNull(self, value: typing.Optional[bool]) -> typing.Optional[bool]: ...
    @property
    def BaseCatalogName(self) -> str: ...
    @BaseCatalogName.setter
    def BaseCatalogName(self, value: str) -> str: ...
    @property
    def BaseColumnName(self) -> str: ...
    @BaseColumnName.setter
    def BaseColumnName(self, value: str) -> str: ...
    @property
    def BaseSchemaName(self) -> str: ...
    @BaseSchemaName.setter
    def BaseSchemaName(self, value: str) -> str: ...
    @property
    def BaseServerName(self) -> str: ...
    @BaseServerName.setter
    def BaseServerName(self, value: str) -> str: ...
    @property
    def BaseTableName(self) -> str: ...
    @BaseTableName.setter
    def BaseTableName(self, value: str) -> str: ...
    @property
    def ColumnName(self) -> str: ...
    @ColumnName.setter
    def ColumnName(self, value: str) -> str: ...
    @property
    def ColumnOrdinal(self) -> typing.Optional[int]: ...
    @ColumnOrdinal.setter
    def ColumnOrdinal(self, value: typing.Optional[int]) -> typing.Optional[int]: ...
    @property
    def ColumnSize(self) -> typing.Optional[int]: ...
    @ColumnSize.setter
    def ColumnSize(self, value: typing.Optional[int]) -> typing.Optional[int]: ...
    @property
    def DataType(self) -> typing.Type[typing.Any]: ...
    @DataType.setter
    def DataType(self, value: typing.Type[typing.Any]) -> typing.Type[typing.Any]: ...
    @property
    def DataTypeName(self) -> str: ...
    @DataTypeName.setter
    def DataTypeName(self, value: str) -> str: ...
    @property
    def IsAliased(self) -> typing.Optional[bool]: ...
    @IsAliased.setter
    def IsAliased(self, value: typing.Optional[bool]) -> typing.Optional[bool]: ...
    @property
    def IsAutoIncrement(self) -> typing.Optional[bool]: ...
    @IsAutoIncrement.setter
    def IsAutoIncrement(self, value: typing.Optional[bool]) -> typing.Optional[bool]: ...
    @property
    def IsExpression(self) -> typing.Optional[bool]: ...
    @IsExpression.setter
    def IsExpression(self, value: typing.Optional[bool]) -> typing.Optional[bool]: ...
    @property
    def IsHidden(self) -> typing.Optional[bool]: ...
    @IsHidden.setter
    def IsHidden(self, value: typing.Optional[bool]) -> typing.Optional[bool]: ...
    @property
    def IsIdentity(self) -> typing.Optional[bool]: ...
    @IsIdentity.setter
    def IsIdentity(self, value: typing.Optional[bool]) -> typing.Optional[bool]: ...
    @property
    def IsKey(self) -> typing.Optional[bool]: ...
    @IsKey.setter
    def IsKey(self, value: typing.Optional[bool]) -> typing.Optional[bool]: ...
    @property
    def IsLong(self) -> typing.Optional[bool]: ...
    @IsLong.setter
    def IsLong(self, value: typing.Optional[bool]) -> typing.Optional[bool]: ...
    @property
    def IsReadOnly(self) -> typing.Optional[bool]: ...
    @IsReadOnly.setter
    def IsReadOnly(self, value: typing.Optional[bool]) -> typing.Optional[bool]: ...
    @property
    def IsUnique(self) -> typing.Optional[bool]: ...
    @IsUnique.setter
    def IsUnique(self, value: typing.Optional[bool]) -> typing.Optional[bool]: ...
    @property
    def Item(self) -> typing.Any: ...
    @property
    def NumericPrecision(self) -> typing.Optional[int]: ...
    @NumericPrecision.setter
    def NumericPrecision(self, value: typing.Optional[int]) -> typing.Optional[int]: ...
    @property
    def NumericScale(self) -> typing.Optional[int]: ...
    @NumericScale.setter
    def NumericScale(self, value: typing.Optional[int]) -> typing.Optional[int]: ...
    @property
    def UdtAssemblyQualifiedName(self) -> str: ...
    @UdtAssemblyQualifiedName.setter
    def UdtAssemblyQualifiedName(self, value: str) -> str: ...

class DbDataReader(MarshalByRefObject, IDataReader, IAsyncDisposable, IEnumerable):
    @property
    def Depth(self) -> int: ...
    @property
    def FieldCount(self) -> int: ...
    @property
    def HasRows(self) -> bool: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def Item(self) -> typing.Any: ...
    @property
    def Item(self) -> typing.Any: ...
    @property
    def RecordsAffected(self) -> int: ...
    @property
    def VisibleFieldCount(self) -> int: ...
    def Close(self) -> None: ...
    def CloseAsync(self) -> Task: ...
    def Dispose(self) -> None: ...
    def DisposeAsync(self) -> ValueTask: ...
    @abc.abstractmethod
    def GetBoolean(self, ordinal: int) -> bool: ...
    @abc.abstractmethod
    def GetByte(self, ordinal: int) -> int: ...
    @abc.abstractmethod
    def GetBytes(
        self,
        ordinal: int,
        dataOffset: int,
        buffer: Array_1[int],
        bufferOffset: int,
        length: int,
    ) -> int: ...
    @abc.abstractmethod
    def GetChar(self, ordinal: int) -> str: ...
    @abc.abstractmethod
    def GetChars(
        self,
        ordinal: int,
        dataOffset: int,
        buffer: Array_1[str],
        bufferOffset: int,
        length: int,
    ) -> int: ...
    def GetColumnSchemaAsync(
        self, cancellationToken: CancellationToken = ...
    ) -> Task_1[ReadOnlyCollection_1[DbColumn]]: ...
    def GetData(self, ordinal: int) -> DbDataReader: ...
    @abc.abstractmethod
    def GetDataTypeName(self, ordinal: int) -> str: ...
    @abc.abstractmethod
    def GetDateTime(self, ordinal: int) -> DateTime: ...
    @abc.abstractmethod
    def GetDecimal(self, ordinal: int) -> Decimal: ...
    @abc.abstractmethod
    def GetDouble(self, ordinal: int) -> float: ...
    @abc.abstractmethod
    def GetEnumerator(self) -> IEnumerator: ...
    @abc.abstractmethod
    def GetFieldType(self, ordinal: int) -> typing.Type[typing.Any]: ...
    @abc.abstractmethod
    def GetFloat(self, ordinal: int) -> float: ...
    @abc.abstractmethod
    def GetGuid(self, ordinal: int) -> Guid: ...
    @abc.abstractmethod
    def GetInt16(self, ordinal: int) -> int: ...
    @abc.abstractmethod
    def GetInt32(self, ordinal: int) -> int: ...
    @abc.abstractmethod
    def GetInt64(self, ordinal: int) -> int: ...
    @abc.abstractmethod
    def GetName(self, ordinal: int) -> str: ...
    @abc.abstractmethod
    def GetOrdinal(self, name: str) -> int: ...
    def GetProviderSpecificFieldType(self, ordinal: int) -> typing.Type[typing.Any]: ...
    def GetProviderSpecificValue(self, ordinal: int) -> typing.Any: ...
    def GetProviderSpecificValues(self, values: Array_1[typing.Any]) -> int: ...
    def GetSchemaTable(self) -> DataTable: ...
    def GetSchemaTableAsync(
        self, cancellationToken: CancellationToken = ...
    ) -> Task_1[DataTable]: ...
    def GetStream(self, ordinal: int) -> Stream: ...
    @abc.abstractmethod
    def GetString(self, ordinal: int) -> str: ...
    def GetTextReader(self, ordinal: int) -> TextReader: ...
    @abc.abstractmethod
    def GetValue(self, ordinal: int) -> typing.Any: ...
    @abc.abstractmethod
    def GetValues(self, values: Array_1[typing.Any]) -> int: ...
    @abc.abstractmethod
    def IsDBNull(self, ordinal: int) -> bool: ...
    @abc.abstractmethod
    def NextResult(self) -> bool: ...
    @abc.abstractmethod
    def Read(self) -> bool: ...
    # Skipped GetFieldValue due to it being static, abstract and generic.

    GetFieldValue: GetFieldValue_MethodGroup
    class GetFieldValue_MethodGroup:
        def __getitem__(
            self, t: typing.Type[GetFieldValue_1_T1]
        ) -> GetFieldValue_1[GetFieldValue_1_T1]: ...

        GetFieldValue_1_T1 = typing.TypeVar('GetFieldValue_1_T1')
        class GetFieldValue_1(typing.Generic[GetFieldValue_1_T1]):
            GetFieldValue_1_T = DbDataReader.GetFieldValue_MethodGroup.GetFieldValue_1_T1
            def __call__(self, ordinal: int) -> GetFieldValue_1_T: ...

    # Skipped GetFieldValueAsync due to it being static, abstract and generic.

    GetFieldValueAsync: GetFieldValueAsync_MethodGroup
    class GetFieldValueAsync_MethodGroup:
        def __getitem__(
            self, t: typing.Type[GetFieldValueAsync_1_T1]
        ) -> GetFieldValueAsync_1[GetFieldValueAsync_1_T1]: ...

        GetFieldValueAsync_1_T1 = typing.TypeVar('GetFieldValueAsync_1_T1')
        class GetFieldValueAsync_1(typing.Generic[GetFieldValueAsync_1_T1]):
            GetFieldValueAsync_1_T = (
                DbDataReader.GetFieldValueAsync_MethodGroup.GetFieldValueAsync_1_T1
            )
            @typing.overload
            def __call__(self, ordinal: int) -> Task_1[GetFieldValueAsync_1_T]: ...
            @typing.overload
            def __call__(
                self, ordinal: int, cancellationToken: CancellationToken
            ) -> Task_1[GetFieldValueAsync_1_T]: ...

    # Skipped IsDBNullAsync due to it being static, abstract and generic.

    IsDBNullAsync: IsDBNullAsync_MethodGroup
    class IsDBNullAsync_MethodGroup:
        @typing.overload
        def __call__(self, ordinal: int) -> Task_1[bool]: ...
        @typing.overload
        def __call__(
            self, ordinal: int, cancellationToken: CancellationToken
        ) -> Task_1[bool]: ...

    # Skipped NextResultAsync due to it being static, abstract and generic.

    NextResultAsync: NextResultAsync_MethodGroup
    class NextResultAsync_MethodGroup:
        @typing.overload
        def __call__(self) -> Task_1[bool]: ...
        @typing.overload
        def __call__(self, cancellationToken: CancellationToken) -> Task_1[bool]: ...

    # Skipped ReadAsync due to it being static, abstract and generic.

    ReadAsync: ReadAsync_MethodGroup
    class ReadAsync_MethodGroup:
        @typing.overload
        def __call__(self) -> Task_1[bool]: ...
        @typing.overload
        def __call__(self, cancellationToken: CancellationToken) -> Task_1[bool]: ...
